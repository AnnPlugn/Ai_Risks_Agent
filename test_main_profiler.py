# test_main_profiler.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
"""
CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ò–ò-–∞–≥–µ–Ω—Ç–æ–≤
–ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
- –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
- –†–∞–±–æ—Ç–∞—é—â–∏–π asyncio –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
- –õ—É—á—à–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
- –î–µ—Ç–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
"""

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ
from dotenv import load_dotenv
load_dotenv()

import asyncio
import json
import sys
import traceback
from pathlib import Path
from typing import Optional, List, Dict, Any
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src
sys.path.insert(0, str(Path(__file__).parent / "src"))

import click
from rich.console import Console
from rich.panel import Panel
from rich.progress import Progress, SpinnerColumn, TextColumn, BarColumn, TaskProgressColumn
from rich.table import Table
from rich.tree import Tree
from rich.syntax import Syntax

# –ù–∞—à–∏ –∏–º–ø–æ—Ä—Ç—ã
from src.workflow.graph_builder_profiler import create_workflow_from_env, test_workflow_health
from src.utils.logger import setup_logging, get_logger
from src.utils.llm_config_manager import get_llm_config_manager, print_env_diagnosis

console = Console()


@click.group()
@click.option('--log-level', default='INFO', help='–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (DEBUG/INFO/WARNING/ERROR)')
@click.option('--log-file', default='logs/profiler_test.log', help='–§–∞–π–ª –ª–æ–≥–æ–≤')
@click.option('--verbose', '-v', is_flag=True, help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥')
@click.pass_context
def cli(ctx, log_level, log_file, verbose):
    """ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ò–ò-–∞–≥–µ–Ω—Ç–æ–≤"""
    ctx.ensure_object(dict)

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    setup_logging(log_level=log_level, log_file=log_file)
    ctx.obj['logger'] = get_logger()
    ctx.obj['verbose'] = verbose

    # –ö—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
    console.print(Panel.fit(
        "[bold blue]ü§ñ AI Agent Profiler Test Suite[/bold blue]\n"
        "[cyan]–°–∏—Å—Ç–µ–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ò–ò-–∞–≥–µ–Ω—Ç–æ–≤[/cyan]\n"
        "[dim]–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: File System Crawler ‚Üí Parsers ‚Üí Context-Aware Chunker ‚Üí LLM Orchestrator ‚Üí Output Generator[/dim]",
        title="AI Risk Assessment Profiler",
        border_style="blue"
    ))

    if verbose:
        console.print(f"[dim]üìÅ Log Level: {log_level}[/dim]")
        console.print(f"[dim]üìÑ Log File: {log_file}[/dim]")


@cli.command()
@click.pass_context
async def status(ctx):
    """üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
    verbose = ctx.obj.get('verbose', False)

    console.print("[yellow]üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã...[/yellow]")

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        console.print("\n[bold]üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è LLM:[/bold]")
        manager = get_llm_config_manager()
        config_info = manager.get_info()

        config_table = Table(show_header=True, header_style="bold magenta")
        config_table.add_column("–ü–∞—Ä–∞–º–µ—Ç—Ä", style="cyan")
        config_table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", style="white")

        for key, value in config_info.items():
            config_table.add_row(key, str(value))

        console.print(config_table)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –µ—Å–ª–∏ verbose
        if verbose:
            console.print("\n[bold]üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è:[/bold]")
            print_env_diagnosis()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º workflow
        console.print("\n[yellow]‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ workflow...[/yellow]")

        with Progress(SpinnerColumn(), TextColumn("[progress.description]{task.description}")) as progress:
            task = progress.add_task("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ workflow...", total=None)

            workflow_healthy = await test_workflow_health()
            progress.update(task, completed=True)

        if workflow_healthy:
            console.print("[green]‚úÖ Workflow —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–µ–Ω[/green]")
        else:
            console.print("[red]‚ùå Workflow –Ω–µ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–µ–Ω[/red]")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ workflow
        console.print("\n[yellow]üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ workflow...[/yellow]")

        try:
            workflow = create_workflow_from_env()
            workflow_info = workflow.get_workflow_info()

            console.print("[green]‚úÖ Workflow —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ[/green]")

            if verbose:
                console.print("\n[bold]üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ workflow:[/bold]")
                for key, value in workflow_info.items():
                    console.print(f"  [cyan]{key}:[/cyan] {value}")

        except Exception as e:
            console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è workflow: {e}[/red]")
            if verbose:
                console.print(f"[dim]{traceback.format_exc()}[/dim]")
            return

        console.print("\n[bold green]üéâ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ![/bold green]")

    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}[/red]")
        if verbose:
            console.print(f"[dim]{traceback.format_exc()}[/dim]")


@cli.command()
@click.argument('source_files', nargs=-1, required=True)
@click.option('--agent-name', '-n', help='–ò–º—è –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º–æ–≥–æ –∞–≥–µ–Ω—Ç–∞')
@click.option('--output', '-o', help='–§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (JSON)')
@click.option('--show-files', is_flag=True, help='–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤')
@click.option('--save-outputs', is_flag=True, help='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã (–æ—Ç—á–µ—Ç—ã, –≥—Ä–∞—Ñ—ã)')
@click.pass_context
async def assess(ctx, source_files, agent_name, output, show_files, save_outputs):
    """üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ò–ò-–∞–≥–µ–Ω—Ç–∞"""
    logger = ctx.obj['logger']
    verbose = ctx.obj.get('verbose', False)

    console.print(f"[bold]üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞[/bold]")
    if agent_name:
        console.print(f"[cyan]üìõ –ò–º—è –∞–≥–µ–Ω—Ç–∞: {agent_name}[/cyan]")

    # 1. –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Å–±–æ—Ä —Ñ–∞–π–ª–æ–≤
    console.print("\n[yellow]üìÅ –°–±–æ—Ä —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞...[/yellow]")
    validated_files = []

    for file_path in source_files:
        path = Path(file_path)
        if path.exists():
            if path.is_dir():
                # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–æ–±–∏—Ä–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–∞–π–ª—ã
                extensions = ['*.py', '*.js', '*.java', '*.txt', '*.md', '*.json', '*.yaml',
                            '*.yml', '*.docx', '*.pdf', '*.xlsx']
                for ext in extensions:
                    found_files = list(path.rglob(ext))
                    validated_files.extend([str(f.absolute()) for f in found_files])
            else:
                validated_files.append(str(path.absolute()))
        else:
            console.print(f"[red]‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω: {file_path}[/red]")

    if not validated_files:
        console.print("[red]‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞[/red]")
        return

    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
    validated_files = sorted(list(set(validated_files)))

    console.print(f"[green]‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(validated_files)}[/green]")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ
    if show_files or verbose:
        file_tree = Tree("üìÇ –§–∞–π–ª—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º
        file_types = {}
        for file_path in validated_files:
            ext = Path(file_path).suffix.lower()
            if ext not in file_types:
                file_types[ext] = []
            file_types[ext].append(file_path)

        for ext, files in file_types.items():
            type_branch = file_tree.add(f"üìÑ {ext} ({len(files)} —Ñ–∞–π–ª–æ–≤)")
            for file_path in files[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                type_branch.add(Path(file_path).name)
            if len(files) > 5:
                type_branch.add(f"... –∏ –µ—â–µ {len(files) - 5} —Ñ–∞–π–ª–æ–≤")

        console.print(file_tree)

    # 2. –°–æ–∑–¥–∞–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ workflow
    console.print("\n[yellow]‚öôÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã...[/yellow]")

    try:
        workflow = create_workflow_from_env()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é LLM
        manager = get_llm_config_manager()
        provider_info = manager.get_info()

        console.print(f"[blue]ü§ñ –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {provider_info['provider']}[/blue]")
        console.print(f"[blue]üåê URL: {provider_info['base_url']}[/blue]")
        console.print(f"[blue]üì¶ –ú–æ–¥–µ–ª—å: {provider_info['model']}[/blue]")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å LLM
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ LLM...")
        llm_healthy = await workflow.health_check()

        if not llm_healthy:
            console.print(f"[red]‚ùå {provider_info['provider']} —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω[/red]")
            console.print("[yellow]üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ LLM —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω[/yellow]")
            return

        console.print(f"[green]‚úÖ {provider_info['provider']} —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω[/green]")

    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}[/red]")
        if verbose:
            console.print(f"[dim]{traceback.format_exc()}[/dim]")
        return

    # 3. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    assessment_id = f"profiler_test_{datetime.now().strftime('%Y%m%d_%H%M%S')}"

    console.print(f"\n[bold]üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è...[/bold]")
    console.print(f"[dim]Assessment ID: {assessment_id}[/dim]")

    # Progress bar —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ —ç—Ç–∞–ø–∞–º–∏
    with Progress(
        SpinnerColumn(),
        TextColumn("[progress.description]{task.description}"),
        BarColumn(),
        TaskProgressColumn(),
        console=console
    ) as progress:

        # –û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞
        main_task = progress.add_task("üîÑ –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...", total=100)

        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
            progress.update(main_task, completed=10, description="üöÄ –ó–∞–ø—É—Å–∫ workflow...")

            result = await workflow.run_assessment(
                source_files=validated_files,
                agent_name=agent_name,
                assessment_id=assessment_id
            )

            progress.update(main_task, completed=100, description="‚úÖ –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

        except Exception as e:
            progress.update(main_task, completed=100, description=f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:50]}...")
            console.print(f"\n[red]‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è: {e}[/red]")
            if verbose:
                console.print(f"[dim]{traceback.format_exc()}[/dim]")
            return

    # 4. –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if result["success"]:
        await _display_assessment_result(result, output, save_outputs, verbose)

        logger.bind_context(assessment_id, "cli").info(
            f"‚úÖ –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ: {assessment_id}"
        )
    else:
        error_msg = result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
        console.print(f"\n[red]‚ùå –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: {error_msg}[/red]")

        if verbose and 'exception_type' in result:
            console.print(f"[dim]–¢–∏–ø –∏—Å–∫–ª—é—á–µ–Ω–∏—è: {result['exception_type']}[/dim]")

        logger.bind_context(assessment_id, "cli").error(
            f"‚ùå –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: {error_msg}"
        )


@cli.command()
@click.pass_context
async def demo(ctx):
    """üéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    verbose = ctx.obj.get('verbose', False)

    console.print("[bold]üéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è[/bold]")
    console.print("[cyan]–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏...[/cyan]")

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    test_dir = Path("demo_agent")
    test_dir.mkdir(exist_ok=True)

    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
        await _create_demo_files(test_dir)

        console.print(f"[green]‚úÖ –°–æ–∑–¥–∞–Ω –¥–µ–º–æ-–∞–≥–µ–Ω—Ç –≤: {test_dir}[/green]")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–º–æ-–∞–≥–µ–Ω—Ç–∞
        console.print("\n[yellow]üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–º–æ-–∞–≥–µ–Ω—Ç–∞...[/yellow]")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É assess
        ctx.params = {
            'source_files': [str(test_dir)],
            'agent_name': 'DemoAgent',
            'output': 'demo_results.json',
            'show_files': verbose,
            'save_outputs': True
        }

        await assess.callback(
            ctx,
            source_files=[str(test_dir)],
            agent_name='DemoAgent',
            output='demo_results.json',
            show_files=verbose,
            save_outputs=True
        )

    finally:
        # –û—á–∏—Å—Ç–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        if not verbose:  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª—ã –µ—Å–ª–∏ verbose –¥–ª—è –∏–Ω—Å–ø–µ–∫—Ü–∏–∏
            try:
                import shutil
                shutil.rmtree(test_dir)
                console.print(f"[dim]üßπ –û—á–∏—â–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è[/dim]")
            except Exception as e:
                console.print(f"[yellow]‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å {test_dir}: {e}[/yellow]")


async def _create_demo_files(test_dir: Path):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""

    # 1. –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ –∞–≥–µ–Ω—Ç–∞
    agent_code = '''#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –ò–ò-–∞–≥–µ–Ω—Ç –¥–ª—è –±–∞–Ω–∫–æ–≤—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫—Ä–µ–¥–∏—Ç–Ω—ã–µ —Ä–∏—Å–∫–∏ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
"""

import asyncio
from typing import Dict, List, Optional, Any
from dataclasses import dataclass
from datetime import datetime


@dataclass
class LoanApplication:
    """–ó–∞—è–≤–∫–∞ –Ω–∞ –∫—Ä–µ–¥–∏—Ç"""
    applicant_id: str
    amount: float
    purpose: str
    income: float
    credit_score: int
    employment_duration: int  # –º–µ—Å—è—Ü—ã


class CreditRiskAgent:
    """
    –ò–ò-–∞–≥–µ–Ω—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∫—Ä–µ–¥–∏—Ç–Ω—ã—Ö —Ä–∏—Å–∫–æ–≤
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç LLM –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –∫—Ä–µ–¥–∏—Ç
    """
    
    def __init__(self, llm_endpoint: str = "http://localhost:1234"):
        self.llm_endpoint = llm_endpoint
        self.system_prompt = """–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∫—Ä–µ–¥–∏—Ç–Ω—ã–º —Ä–∏—Å–∫–∞–º –≤ –±–∞–Ω–∫–µ.
        
        –¢–≤–æ—è –∑–∞–¥–∞—á–∞: –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ –∫—Ä–µ–¥–∏—Ç –∏ –¥–∞–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.
        
        –£—á–∏—Ç—ã–≤–∞–π —Å–ª–µ–¥—É—é—â–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã:
        - –ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è (credit_score)
        - –î–æ—Ö–æ–¥—ã –∑–∞—è–≤–∏—Ç–µ–ª—è
        - –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∑–∞–Ω—è—Ç–æ—Å—Ç–∏
        - –¶–µ–ª—å –∫—Ä–µ–¥–∏—Ç–∞
        
        Guardrails:
        - –ù–µ –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∏—Ä—É–π –ø–æ –ø–æ–ª—É, –≤–æ–∑—Ä–∞—Å—Ç—É, –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
        - –û—Å–Ω–æ–≤—ã–≤–∞–π—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è—Ö
        - –ù–µ —Ä–∞–∑–≥–ª–∞—à–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        - –í—Å–µ–≥–¥–∞ –æ–±—ä—è—Å–Ω—è–π —Ä–µ—à–µ–Ω–∏–µ"""
        
        self.guardrails = [
            "–ó–∞–ø—Ä–µ—â–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (–ø–æ–ª, —Ä–∞—Å–∞, —Ä–µ–ª–∏–≥–∏—è)",
            "–†–µ—à–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–º–∏ –∏ –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º–∏", 
            "–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞",
            "–ü—Ä–∏ —Å–æ–º–Ω–µ–Ω–∏—è—Ö - –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –Ω–∞ —Ä—É—á–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É"
        ]
    
    async def evaluate_loan_application(self, application: LoanApplication) -> Dict[str, Any]:
        """–û—Ü–µ–Ω–∫–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –∫—Ä–µ–¥–∏—Ç"""
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è LLM
        analysis_prompt = f"""
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞—è–≤–∫—É –Ω–∞ –∫—Ä–µ–¥–∏—Ç:
        
        –°—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞: {application.amount:,.0f} —Ä—É–±.
        –¶–µ–ª—å: {application.purpose}
        –î–æ—Ö–æ–¥: {application.income:,.0f} —Ä—É–±/–º–µ—Å
        –ö—Ä–µ–¥–∏—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥: {application.credit_score}/850
        –°—Ç–∞–∂ —Ä–∞–±–æ—Ç—ã: {application.employment_duration} –º–µ—Å
        
        –î–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é: –æ–¥–æ–±—Ä–∏—Ç—å/–æ—Ç–∫–ª–æ–Ω–∏—Ç—å/–¥–æ–ø.–ø—Ä–æ–≤–µ—Ä–∫–∞
        """
        
        # –ó–¥–µ—Å—å –±—ã–ª –±—ã —Ä–µ–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ LLM
        # response = await self.call_llm(analysis_prompt)
        
        # –î–ª—è –¥–µ–º–æ - –ø—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞
        risk_score = self._calculate_risk_score(application)
        
        if risk_score < 0.3:
            decision = "–æ–¥–æ–±—Ä–∏—Ç—å"
            reasoning = "–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫: —Ö–æ—Ä–æ—à–∏–π –∫—Ä–µ–¥–∏—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –∏ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥"
        elif risk_score < 0.7:
            decision = "–¥–æ–ø.–ø—Ä–æ–≤–µ—Ä–∫–∞"
            reasoning = "–°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫: —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"
        else:
            decision = "–æ—Ç–∫–ª–æ–Ω–∏—Ç—å"
            reasoning = "–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫: –Ω–∏–∑–∫–∏–π –∫—Ä–µ–¥–∏—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –¥–æ—Ö–æ–¥"
        
        return {
            "decision": decision,
            "risk_score": risk_score,
            "reasoning": reasoning,
            "timestamp": datetime.now().isoformat(),
            "agent_version": "1.0",
            "confidence": 0.85
        }
    
    def _calculate_risk_score(self, app: LoanApplication) -> float:
        """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Ä–∏—Å–∫–∞"""
        
        # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–æ–ª–≥–æ–≤–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏
        debt_ratio = (app.amount / 12) / app.income if app.income > 0 else 1.0
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫—Ä–µ–¥–∏—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥
        credit_normalized = (850 - app.credit_score) / 850
        
        # –†–∏—Å–∫ –ø–æ —Å—Ç–∞–∂—É
        employment_risk = max(0, (12 - app.employment_duration) / 12)
        
        # –û–±—â–∏–π —Ä–∏—Å–∫
        risk = (debt_ratio * 0.4 + credit_normalized * 0.4 + employment_risk * 0.2)
        
        return min(1.0, risk)


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def main():
    agent = CreditRiskAgent()
    
    # –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞
    test_application = LoanApplication(
        applicant_id="TEST_001",
        amount=500000,  # 500k —Ä—É–±–ª–µ–π
        purpose="–ø–æ–∫—É–ø–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
        income=80000,   # 80k —Ä—É–±–ª–µ–π –≤ –º–µ—Å—è—Ü
        credit_score=720,
        employment_duration=24  # 2 –≥–æ–¥–∞
    )
    
    result = await agent.evaluate_loan_application(test_application)
    print(f"–†–µ—à–µ–Ω–∏–µ: {result['decision']}")
    print(f"–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: {result['reasoning']}")


if __name__ == "__main__":
    asyncio.run(main())
'''

    (test_dir / "credit_agent.py").write_text(agent_code, encoding='utf-8')

    # 2. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª
    config = {
        "agent_name": "CreditRiskAgent",
        "version": "1.0.0",
        "description": "–ò–ò-–∞–≥–µ–Ω—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∫—Ä–µ–¥–∏—Ç–Ω—ã—Ö —Ä–∏—Å–∫–æ–≤ –≤ –±–∞–Ω–∫–µ",
        "llm_model": "qwen3-4b",
        "max_loan_amount": 5000000,
        "risk_thresholds": {
            "low": 0.3,
            "medium": 0.7,
            "high": 1.0
        },
        "supported_purposes": [
            "–ø–æ–∫—É–ø–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
            "–ø–æ–∫—É–ø–∫–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏",
            "—Ä–µ—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ",
            "–ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–∏–µ –Ω—É–∂–¥—ã"
        ]
    }

    (test_dir / "config.json").write_text(
        json.dumps(config, ensure_ascii=False, indent=2),
        encoding='utf-8'
    )

    # 3. –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
    readme = '''# Credit Risk Agent

## –û–ø–∏—Å–∞–Ω–∏–µ
–ò–ò-–∞–≥–µ–Ω—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ –∫—Ä–µ–¥–∏—Ç–Ω—ã—Ö —Ä–∏—Å–∫–æ–≤ –≤ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π —Å–∏—Å—Ç–µ–º–µ.

## –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
- –ê–Ω–∞–ª–∏–∑ –∑–∞—è–≤–æ–∫ –Ω–∞ –∫—Ä–µ–¥–∏—Ç
- –û—Ü–µ–Ω–∫–∞ –∫—Ä–µ–¥–∏—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–¥–æ–±—Ä–µ–Ω–∏—é/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—é
- –°–æ–±–ª—é–¥–µ–Ω–∏–µ —Ä–µ–≥—É–ª—è—Ç–æ—Ä–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π

## –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
–ê–≥–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç LLM –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π –æ –∫—Ä–µ–¥–∏—Ç–Ω—ã—Ö —Ä–∏—Å–∫–∞—Ö.

### –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
- –°—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞
- –î–æ—Ö–æ–¥—ã –∑–∞—è–≤–∏—Ç–µ–ª—è
- –ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è
- –¶–µ–ª—å –∫—Ä–µ–¥–∏—Ç–∞
- –°—Ç–∞–∂ —Ä–∞–±–æ—Ç—ã

### –í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ  
- –†–µ—à–µ–Ω–∏–µ (–æ–¥–æ–±—Ä–∏—Ç—å/–æ—Ç–∫–ª–æ–Ω–∏—Ç—å/–¥–æ–ø.–ø—Ä–æ–≤–µ—Ä–∫–∞)
- –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞ (0-1)
- –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è

## –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
- –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
- –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å —Ä–µ—à–µ–Ω–∏–π
- –°–æ–±–ª—é–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö

## –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
```python
agent = CreditRiskAgent()
result = await agent.evaluate_loan_application(application)
```

## –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è
- **–Ø–∑—ã–∫**: Python 3.8+
- **LLM**: qwen3-4b
- **–ê–≤—Ç–æ–Ω–æ–º–Ω–æ—Å—Ç—å**: –ü–æ–ª—É–∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π (—Ç—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ª–æ–∂–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤)
- **–î–∞–Ω–Ω—ã–µ**: –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ, –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ
'''

    (test_dir / "README.md").write_text(readme, encoding='utf-8')

    # 4. –§–∞–π–ª —Å –ø—Ä–æ–º–ø—Ç–∞–º–∏
    prompts = '''# –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è CreditRiskAgent

## –û—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∫—Ä–µ–¥–∏—Ç–Ω—ã–º —Ä–∏—Å–∫–∞–º –≤ –±–∞–Ω–∫–µ.

–¢–≤–æ—è –∑–∞–¥–∞—á–∞: –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ –∫—Ä–µ–¥–∏—Ç –∏ –¥–∞–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.

–£—á–∏—Ç—ã–≤–∞–π —Å–ª–µ–¥—É—é—â–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã:
- –ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è (credit_score)
- –î–æ—Ö–æ–¥—ã –∑–∞—è–≤–∏—Ç–µ–ª—è  
- –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∑–∞–Ω—è—Ç–æ—Å—Ç–∏
- –¶–µ–ª—å –∫—Ä–µ–¥–∏—Ç–∞

## Guardrails (–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è)
1. –ù–µ –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∏—Ä—É–π –ø–æ –ø–æ–ª—É, –≤–æ–∑—Ä–∞—Å—Ç—É, –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
2. –û—Å–Ω–æ–≤—ã–≤–∞–π—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è—Ö
3. –ù–µ —Ä–∞–∑–≥–ª–∞—à–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
4. –í—Å–µ–≥–¥–∞ –æ–±—ä—è—Å–Ω—è–π —Ä–µ—à–µ–Ω–∏–µ

## –ü—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–∏—Å–∫–∞
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞—è–≤–∫—É –Ω–∞ –∫—Ä–µ–¥–∏—Ç –∏ –¥–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é.

–£—á—Ç–∏:
- –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–æ–ª–≥–æ–≤–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 50%
- –ö—Ä–µ–¥–∏—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –Ω–∏–∂–µ 600 - –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫
- –°—Ç–∞–∂ —Ä–∞–±–æ—Ç—ã –º–µ–Ω–µ–µ 6 –º–µ—Å—è—Ü–µ–≤ - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
- –†–µ—à–µ–Ω–∏–µ: [–æ–¥–æ–±—Ä–∏—Ç—å/–æ—Ç–∫–ª–æ–Ω–∏—Ç—å/–¥–æ–ø.–ø—Ä–æ–≤–µ—Ä–∫–∞]
- –†–∏—Å–∫: [–Ω–∏–∑–∫–∏–π/—Å—Ä–µ–¥–Ω–∏–π/–≤—ã—Å–æ–∫–∏–π]
- –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: [–¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ]
'''

    (test_dir / "prompts.txt").write_text(prompts, encoding='utf-8')


async def _display_assessment_result(result: Dict[str, Any], output_file: Optional[str] = None,
                                   save_outputs: bool = False, verbose: bool = False):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è"""

    if not result.get("success"):
        console.print("[red]‚ùå –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω—ã–º[/red]")
        return

    final_assessment = result.get("final_assessment", {})
    if not final_assessment:
        console.print("[red]‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è[/red]")
        return

    assessment_id = final_assessment.get('assessment_id', 'unknown')
    agent_profile = final_assessment.get('agent_profile', {})
    processing_time = final_assessment.get('processing_time_seconds', 0)
    profiling_details = final_assessment.get('profiling_details', {})

    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    console.print(Panel(
        f"[bold green]üéØ –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ![/bold green]\n\n"
        f"[cyan]Assessment ID:[/cyan] {assessment_id}\n"
        f"[cyan]–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:[/cyan] {processing_time:.2f} —Å–µ–∫—É–Ω–¥\n"
        f"[cyan]–°—Ç–∞—Ç—É—Å:[/cyan] {final_assessment.get('status', 'unknown')}",
        title="üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è",
        border_style="green"
    ))

    # –ü—Ä–æ—Ñ–∏–ª—å –∞–≥–µ–Ω—Ç–∞
    if agent_profile:
        console.print("\n[bold]ü§ñ –ü—Ä–æ—Ñ–∏–ª—å –∞–≥–µ–Ω—Ç–∞:[/bold]")

        profile_table = Table(show_header=True, header_style="bold magenta")
        profile_table.add_column("–ü–∞—Ä–∞–º–µ—Ç—Ä", style="cyan", width=25)
        profile_table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", style="white")

        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
        key_fields = [
            ("name", "–ò–º—è –∞–≥–µ–Ω—Ç–∞"),
            ("agent_type", "–¢–∏–ø –∞–≥–µ–Ω—Ç–∞"),
            ("description", "–û–ø–∏—Å–∞–Ω–∏–µ"),
            ("llm_model", "LLM –º–æ–¥–µ–ª—å"),
            ("autonomy_level", "–£—Ä–æ–≤–µ–Ω—å –∞–≤—Ç–æ–Ω–æ–º–Ω–æ—Å—Ç–∏"),
            ("target_audience", "–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è")
        ]

        for field, label in key_fields:
            value = agent_profile.get(field, "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
            if isinstance(value, list):
                value = ", ".join(map(str, value))
            profile_table.add_row(label, str(value))

        console.print(profile_table)

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –µ—Å–ª–∏ verbose
        if verbose:
            console.print("\n[bold]üìã –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏:[/bold]")

            # System prompts
            system_prompts = agent_profile.get("system_prompts", [])
            if system_prompts:
                console.print(f"\n[cyan]üìù –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã ({len(system_prompts)}):[/cyan]")
                for i, prompt in enumerate(system_prompts[:3], 1):
                    preview = prompt[:100] + "..." if len(prompt) > 100 else prompt
                    console.print(f"  {i}. {preview}")
                if len(system_prompts) > 3:
                    console.print(f"  ... –∏ –µ—â–µ {len(system_prompts) - 3} –ø—Ä–æ–º–ø—Ç–æ–≤")

            # Guardrails
            guardrails = agent_profile.get("guardrails", [])
            if guardrails:
                console.print(f"\n[cyan]üõ°Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ ({len(guardrails)}):[/cyan]")
                for i, guardrail in enumerate(guardrails[:3], 1):
                    preview = guardrail[:100] + "..." if len(guardrail) > 100 else guardrail
                    console.print(f"  {i}. {preview}")
                if len(guardrails) > 3:
                    console.print(f"  ... –∏ –µ—â–µ {len(guardrails) - 3} –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π")

            # External APIs
            external_apis = agent_profile.get("external_apis", [])
            if external_apis:
                console.print(f"\n[cyan]üîå –í–Ω–µ—à–Ω–∏–µ API ({len(external_apis)}):[/cyan]")
                for api in external_apis[:5]:
                    console.print(f"  ‚Ä¢ {api}")
                if len(external_apis) > 5:
                    console.print(f"  ... –∏ –µ—â–µ {len(external_apis) - 5} API")

    # –î–µ—Ç–∞–ª–∏ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    if profiling_details and verbose:
        console.print("\n[bold]üîç –î–µ—Ç–∞–ª–∏ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è:[/bold]")

        performance_metrics = profiling_details.get("performance_metrics", {})
        if performance_metrics:
            perf_table = Table(show_header=True, header_style="bold blue")
            perf_table.add_column("–ú–µ—Ç—Ä–∏–∫–∞", style="cyan")
            perf_table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", style="white")

            for key, value in performance_metrics.items():
                if isinstance(value, float):
                    value = f"{value:.2f}"
                perf_table.add_row(key.replace('_', ' ').title(), str(value))

            console.print(perf_table)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if output_file:
        try:
            output_path = Path(output_file)
            output_path.parent.mkdir(parents=True, exist_ok=True)

            with open(output_path, 'w', encoding='utf-8') as f:
                json.dump(final_assessment, f, ensure_ascii=False, indent=2, default=str)

            console.print(f"\n[green]üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_file}[/green]")

        except Exception as e:
            console.print(f"\n[red]‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}[/red]")

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (–æ—Ç—á–µ—Ç—ã, –≥—Ä–∞—Ñ—ã)
    if save_outputs:
        console.print(f"\n[yellow]üìÅ –ü–æ–∏—Å–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...[/yellow]")

        output_dir = Path(f"outputs/{assessment_id}")
        if output_dir.exists():
            output_files = list(output_dir.glob("*"))
            if output_files:
                console.print(f"[green]‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(output_files)} —Ñ–∞–π–ª–æ–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:[/green]")
                for file_path in output_files:
                    file_size = file_path.stat().st_size
                    console.print(f"  üìÑ {file_path.name} ({file_size:,} –±–∞–π—Ç)")
            else:
                console.print("[yellow]‚ö†Ô∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã[/yellow]")
        else:
            console.print("[yellow]‚ö†Ô∏è –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞[/yellow]")


def make_async(f):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏—è async —Ñ—É–Ω–∫—Ü–∏–π –≤ sync –¥–ª—è Click"""
    def wrapper(*args, **kwargs):
        return asyncio.run(f(*args, **kwargs))
    return wrapper


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI"""
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        Path("logs").mkdir(exist_ok=True)
        Path("outputs").mkdir(exist_ok=True)

        # –ü—Ä–∏–º–µ–Ω—è–µ–º async –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –∫ –∫–æ–º–∞–Ω–¥–∞–º
        assess.callback = make_async(assess.callback)
        status.callback = make_async(status.callback)
        demo.callback = make_async(demo.callback)

        # –ó–∞–ø—É—Å–∫–∞–µ–º CLI
        cli()

    except KeyboardInterrupt:
        console.print("\n[yellow]üëã –†–∞–±–æ—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º[/yellow]")
    except Exception as e:
        console.print(f"\n[red]‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}[/red]")
        console.print(f"[dim]{traceback.format_exc()}[/dim]")
        sys.exit(1)


if __name__ == "__main__":
    main()