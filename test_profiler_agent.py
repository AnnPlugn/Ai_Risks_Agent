# test_profiler_agent.py
"""
–¢–µ—Å—Ç –ø—Ä–æ—Ñ–∞–π–ª–µ—Ä-–∞–≥–µ–Ω—Ç–∞ (–Ω–∞—á–∞–ª–æ –≠—Ç–∞–ø–∞ 3)
–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –±–∞–∑–æ–≤—É—é —Ä–∞–±–æ—Ç—É –ø—Ä–æ—Ñ–∞–π–ª–µ—Ä-–∞–≥–µ–Ω—Ç–∞
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src
sys.path.insert(0, str(Path(__file__).parent / "src"))

async def test_profiler_agent_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∞–π–ª–µ—Ä-–∞–≥–µ–Ω—Ç–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∞–π–ª–µ—Ä-–∞–≥–µ–Ω—Ç–∞...")
    
    try:
        from src.agents.profiler_agent import create_profiler_agent
        
        # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞
        profiler = create_profiler_agent()
        
        print(f"‚úÖ –ü—Ä–æ—Ñ–∞–π–ª–µ—Ä —Å–æ–∑–¥–∞–Ω: {profiler.name}")
        print(f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ: {profiler.description}")
        print(f"‚úÖ –¢–∏–ø –∑–∞–¥–∞—á–∏: {profiler._get_task_type()}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º health check (–µ—Å–ª–∏ LM Studio –¥–æ—Å—Ç—É–ø–µ–Ω)
        is_healthy = await profiler.health_check()
        print(f"‚úÖ Health check: {'‚úÖ OK' if is_healthy else '‚ö†Ô∏è LM Studio –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∞–π–ª–µ—Ä–∞: {e}")
        return False

async def test_profiler_agent_processing():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∞–π–ª–µ—Ä–æ–º"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        from src.agents.profiler_agent import create_profiler_agent
        
        profiler = create_profiler_agent()
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ - –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∞–º –ø—Ä–æ–µ–∫—Ç
        test_input = {
            "source_files": [
                str(Path(__file__).parent),  # –ö–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
                "test_stage1.py",  # –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
                "requirements.txt"  # –§–∞–π–ª –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            ],
            "agent_name": "AI_Risk_Assessment_System"
        }
        
        assessment_id = "test_profiler_001"
        
        print(f"üìÅ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º: {len(test_input['source_files'])} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ñ–∞–π–ª–µ—Ä
        result = await profiler.run(test_input, assessment_id)
        
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å: {result.status}")
        print(f"‚úÖ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {result.execution_time_seconds:.2f}—Å")
        
        if result.status.value == "completed":
            agent_profile = result.result_data["agent_profile"]
            data_summary = result.result_data["collected_data_summary"]
            
            print(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω: {agent_profile['name']}")
            print(f"‚úÖ –¢–∏–ø –∞–≥–µ–Ω—Ç–∞: {agent_profile['agent_type']}")
            print(f"‚úÖ –£—Ä–æ–≤–µ–Ω—å –∞–≤—Ç–æ–Ω–æ–º–Ω–æ—Å—Ç–∏: {agent_profile['autonomy_level']}")
            print(f"‚úÖ –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è: {agent_profile['target_audience']}")
            print(f"‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤: {len(agent_profile['system_prompts'])}")
            print(f"‚úÖ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π: {len(agent_profile['guardrails'])}")
            
            print(f"\nüìä –°–≤–æ–¥–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:")
            print(f"  - –§–∞–π–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {data_summary['documents_processed']}")
            print(f"  - –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞: {'‚úÖ' if data_summary['code_analysis_success'] else '‚ùå'}")
            print(f"  - –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–º–ø—Ç–æ–≤: {'‚úÖ' if data_summary['prompt_analysis_success'] else '‚ùå'}")
            print(f"  - –û—à–∏–±–æ–∫: {data_summary['errors_count']}")
            
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result.error_message}")
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–≥–µ–Ω—Ç–∞
        stats = profiler.get_stats()
        print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–≥–µ–Ω—Ç–∞:")
        print(f"  - –ó–∞–ø—Ä–æ—Å–æ–≤: {stats['total_requests']}")
        print(f"  - –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {stats['success_rate']:.1%}")
        print(f"  - –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {stats['average_response_time']:.2f}—Å")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        return False

async def test_langgraph_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å LangGraph"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å LangGraph...")
    
    try:
        from src.agents.profiler_agent import create_profiler_agent, create_profiler_node_function
        
        profiler = create_profiler_agent()
        
        # –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —É–∑–ª–∞ –¥–ª—è LangGraph
        profiler_node = create_profiler_node_function(profiler)
        
        # –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ workflow
        test_state = {
            "assessment_id": "test_langgraph_001",
            "source_files": ["test_stage1.py"],
            "preliminary_agent_name": "TestAgent"
        }
        
        print("üîÑ –ó–∞–ø—É—Å–∫ —É–∑–ª–∞ –ø—Ä–æ—Ñ–∞–π–ª–µ—Ä–∞ –≤ LangGraph —Å–æ—Å—Ç–æ—è–Ω–∏–∏...")
        
        # –í—ã–∑—ã–≤–∞–µ–º —É–∑–µ–ª
        updated_state = await profiler_node(test_state)
        
        print(f"‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
        print(f"‚úÖ –¢–µ–∫—É—â–∏–π —à–∞–≥: {updated_state.get('current_step', 'unknown')}")
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è: {'‚úÖ' if 'profiling_result' in updated_state else '‚ùå'}")
        
        if 'agent_profile' in updated_state:
            profile = updated_state['agent_profile']
            print(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –∞–≥–µ–Ω—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏: {profile['name']}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ LangGraph: {e}")
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∞–π–ª–µ—Ä-–∞–≥–µ–Ω—Ç–∞ (–≠—Ç–∞–ø 3)")
    print("=" * 60)
    
    success = True
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞
    success &= await test_profiler_agent_creation()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö
    success &= await test_profiler_agent_processing()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å LangGraph
    success &= await test_langgraph_integration()
    
    print("\n" + "=" * 60)
    if success:
        print("üéâ –ü–†–û–§–ê–ô–õ–ï–†-–ê–ì–ï–ù–¢ –†–ê–ë–û–¢–ê–ï–¢ –£–°–ü–ï–®–ù–û!")
        print("\nüìã –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ:")
        print("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∞–π–ª–µ—Ä-–∞–≥–µ–Ω—Ç–∞")
        print("‚úÖ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫")
        print("‚úÖ –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –∫–æ–¥–∞ –∏ –ø—Ä–æ–º–ø—Ç–æ–≤")
        print("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è AgentProfile")
        print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å LangGraph workflow")
        print("\nüöÄ –ì–æ—Ç–æ–≤—ã —Å–æ–∑–¥–∞–≤–∞—Ç—å –∞–≥–µ–Ω—Ç–æ–≤-–æ—Ü–µ–Ω—â–∏–∫–æ–≤!")
    else:
        print("‚ùå –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´ –° –ü–†–û–§–ê–ô–õ–ï–†–û–ú")
        print("\nüîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("- –ó–∞–ø—É—â–µ–Ω –ª–∏ LM Studio –Ω–∞ localhost:1234?")
        print("- –í—Å–µ –ª–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã?")
        print("- –ï—Å—Ç—å –ª–∏ –ø—Ä–∞–≤–∞ –Ω–∞ —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤?")
    
    return success

if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1)