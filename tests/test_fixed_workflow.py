"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ workflow –ø–æ—Å–ª–µ –≤—Å–µ—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ç—á–µ–π
"""

import asyncio
import sys
import tempfile
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src
sys.path.insert(0, str(Path(__file__).parent / "src"))

async def test_completely_fixed_workflow():
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ workflow"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ workflow...")
    
    try:
        from src.workflow import create_workflow_from_env
        from src.models.risk_models import WorkflowState
        
        print("‚úÖ –ò–º–ø–æ—Ä—Ç—ã —É—Å–ø–µ—à–Ω—ã")
        
        # –°–æ–∑–¥–∞–µ–º workflow
        workflow = create_workflow_from_env()
        print("‚úÖ Workflow —Å–æ–∑–¥–∞–Ω —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º LLM
        health = await workflow.profiler.health_check()
        print(f"‚úÖ LLM Health: {'OK' if health else '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å —á–µ—Ç–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
        with tempfile.NamedTemporaryFile(mode='w', suffix='.py', delete=False) as f:
            f.write('''
# simple_test_agent.py
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –∞–≥–µ–Ω—Ç –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–æ–≤
"""

class SimpleTestAgent:
    def __init__(self):
        self.name = "SimpleTestAgent"
        self.version = "1.0"
        self.system_prompt = "–¢—ã –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã"
        
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        self.guardrails = [
            "–†–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏",
            "–ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é",
            "–¢—Ä–µ–±–æ–≤–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –ª—é–±—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π"
        ]
    
    def process_request(self, request: str) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        if "—Ç–µ—Å—Ç" in request.lower():
            return "–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç: –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω"
        return "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞"
    
    def get_capabilities(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞–≥–µ–Ω—Ç–∞"""
        return [
            "–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
            "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤",
            "–í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
        ]
''')
            test_file = f.name
        
        # –°–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
        with tempfile.NamedTemporaryFile(mode='w', suffix='.txt', delete=False) as f:
            f.write('''–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: SimpleTestAgent

–û–ë–©–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:
–ù–∞–∑–≤–∞–Ω–∏–µ: SimpleTestAgent
–í–µ—Ä—Å–∏—è: 1.0
–¢–∏–ø: –¢–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç-–±–æ—Ç
–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–æ–≤

–§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–¨:
- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å—Ç—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
- –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö

–û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò:
- –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
- –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
- –¢—Ä–µ–±—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
- –ü–æ–¥ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º –Ω–∞–¥–∑–æ—Ä–æ–º

–¢–ï–•–ù–ò–ß–ï–°–ö–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:
- –Ø–∑—ã–∫: Python
- –ê–≤—Ç–æ–Ω–æ–º–Ω–æ—Å—Ç—å: –ü–æ–¥ –Ω–∞–¥–∑–æ—Ä–æ–º
- –î–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º: –¢–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã–µ
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
''')
            doc_file = f.name
        
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã")
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º workflow —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏
            print("üîÑ –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ workflow...")
            
            result = await workflow.run_assessment(
                source_files=[test_file, doc_file],
                agent_name="SimpleTestAgent"
            )
            
            if result.get("success"):
                print("‚úÖ Workflow –∑–∞–≤–µ—Ä—à–µ–Ω –£–°–ü–ï–®–ù–û!")
                
                assessment = result.get("final_assessment")
                if assessment:
                    print(f"üìä –û–±—â–∏–π —Ä–∏—Å–∫: {assessment.get('overall_risk_level', 'unknown')}")
                    print(f"üî¢ –ë–∞–ª–ª —Ä–∏—Å–∫–∞: {assessment.get('overall_risk_score', 0)}/25")
                    print(f"‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result.get('processing_time', 0):.1f}—Å")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–æ–≤
                    risk_evaluations = assessment.get("risk_evaluations", {})
                    print(f"üîç –ü–æ–ª—É—á–µ–Ω–æ –æ—Ü–µ–Ω–æ–∫: {len(risk_evaluations)}/6")
                    
                    for risk_type, evaluation in risk_evaluations.items():
                        if isinstance(evaluation, dict):
                            level = evaluation.get("risk_level", "unknown")
                            score = evaluation.get("total_score", 0)
                            print(f"  ‚Ä¢ {risk_type}: {level} ({score}/25)")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                    recommendations = assessment.get("priority_recommendations", [])
                    print(f"üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {len(recommendations)}")
                    
                    return True
                else:
                    print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞")
                    return False
            else:
                error = result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                print(f"‚ùå –û—à–∏–±–∫–∞ workflow: {error}")
                
                # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å concurrent updates, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
                if "INVALID_CONCURRENT_GRAPH_UPDATE" in error:
                    print("‚ö†Ô∏è –û—à–∏–±–∫–∞ concurrent updates - —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
                
                return False
                
        finally:
            # –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª—ã
            try:
                import os
                os.unlink(test_file)
                os.unlink(doc_file)
                print("üóëÔ∏è –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã")
            except:
                pass
                
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    print("üöÄ –¢–ï–°–¢ –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û WORKFLOW")
    print("=" * 55)
    
    success = await test_completely_fixed_workflow()
    
    if success:
        print("\\nüéâ –í–°–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –†–ê–ë–û–¢–ê–Æ–¢!")
        print("‚úÖ Workflow –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω")
        print("üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        
        print("\\nüìù –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
        print("   python main.py demo")
        print("   python main.py assess <—Ñ–∞–π–ª—ã>")
        print("   python test_complete_workflow.py")
    else:
        print("\\n‚ùå –¢–†–ï–ë–£–Æ–¢–°–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")
    
    return success

if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1)