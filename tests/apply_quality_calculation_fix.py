# apply_quality_calculation_fix.py
"""
–°–∏—Å—Ç–µ–º–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –≤ _quality_check_node
–ó–∞–º–µ–Ω—è–µ—Ç –ª–æ–≥–∏–∫—É —Ä–∞—Å—á–µ—Ç–∞, —á—Ç–æ–±—ã —É—á–∏—Ç—ã–≤–∞—Ç—å confidence_level –∞–≥–µ–Ω—Ç–æ–≤
"""

import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src
sys.path.insert(0, str(Path(__file__).parent / "src"))

def apply_quality_calculation_fix():
    """
    –ü—Ä–∏–º–µ–Ω—è–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫ —Ñ—É–Ω–∫—Ü–∏–∏ _quality_check_node
    —á—Ç–æ–±—ã —Ä–∞—Å—á–µ—Ç –∫–∞—á–µ—Å—Ç–≤–∞ —É—á–∏—Ç—ã–≤–∞–ª confidence_level –∞–≥–µ–Ω—Ç–æ–≤
    """
    
    try:
        print("üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–∞ –∫–∞—á–µ—Å—Ç–≤–∞...")
        
        from src.workflow.graph_builder import RiskAssessmentWorkflow
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
        if not hasattr(RiskAssessmentWorkflow, '_original_quality_check_node'):
            RiskAssessmentWorkflow._original_quality_check_node = RiskAssessmentWorkflow._quality_check_node
        
        async def fixed_quality_check_node(self, state):
            """
            –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è _quality_check_node —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ä–∞—Å—á–µ—Ç–æ–º –∫–∞—á–µ—Å—Ç–≤–∞
            """
            
            assessment_id = state["assessment_id"]
            
            self.graph_logger.log_workflow_step(
                assessment_id, "quality_check_start",
                f"üîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è quality_check, –≤—Ö–æ–¥—è—â–∏–π current_step: {state.get('current_step')}"
            )

            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —É—Å–ø–µ—à–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫
            try:
                all_results = state.get_evaluation_results()
                evaluation_results = {}
                
                for risk_type, result in all_results.items():
                    if not result:
                        continue
                        
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
                    status = None
                    if isinstance(result, dict):
                        status = result.get("status")
                    elif hasattr(result, 'status'):
                        status = result.status
                        
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ü–µ–Ω–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ
                    is_completed = False
                    if hasattr(status, 'value'):
                        is_completed = status.value == "completed"
                    elif str(status) == "ProcessingStatus.COMPLETED":
                        is_completed = True  
                    elif status == "completed":
                        is_completed = True
                    
                    if not is_completed:
                        continue
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ result_data
                    result_data = None
                    if isinstance(result, dict):
                        result_data = result.get("result_data")
                    elif hasattr(result, 'result_data'):
                        result_data = result.result_data
                        
                    if result_data is None:
                        continue
                    
                    evaluation_results[risk_type] = result
                
                self.graph_logger.log_workflow_step(
                    assessment_id, "quality_check_data",
                    f"üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –£—Å–ø–µ—à–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫: {len(evaluation_results)}, —Ç–∏–ø—ã: {list(evaluation_results.keys())}"
                )
                
            except Exception as e:
                self.graph_logger.log_workflow_step(
                    assessment_id, "quality_check_data_error",
                    f"üîß –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è successful_evaluations: {e}"
                )
                evaluation_results = {}

            # –ï—Å–ª–∏ –Ω–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫, –∏–¥–µ–º –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
            if not evaluation_results:
                self.graph_logger.log_workflow_step(
                    assessment_id, "quality_check_no_evaluations",
                    "üîß ‚ùå –ù–ï–¢ –£–°–ü–ï–®–ù–´–• –û–¶–ï–ù–û–ö - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º error"
                )
                state["current_step"] = "error"
                state["error_message"] = "–ù–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫ —Ä–∏—Å–∫–æ–≤"
                state["retry_needed"] = []
                return state
            
            # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            success_rate = len(evaluation_results) / 6  # 6 —Ç–∏–ø–æ–≤ —Ä–∏—Å–∫–æ–≤ –≤—Å–µ–≥–æ
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫—Ä–∏—Ç–∏–∫–∞
            critic_results = state.get("critic_results", {})
            has_critic_results = bool(critic_results)
            
            self.graph_logger.log_workflow_step(
                assessment_id, "quality_check_metrics",
                f"üîß Success rate: {success_rate:.2f}, –∏–º–µ–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫—Ä–∏—Ç–∏–∫–∞: {has_critic_results}"
            )
            
            if has_critic_results:
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫—Ä–∏—Ç–∏–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö (—Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞)
                retry_needed = []
                quality_scores = []
                
                for risk_type, critic_result in critic_results.items():
                    try:
                        if isinstance(critic_result, dict):
                            if (critic_result.get("status") == "completed" and 
                                critic_result.get("result_data") and 
                                "critic_evaluation" in critic_result["result_data"]):
                                
                                critic_eval = critic_result["result_data"]["critic_evaluation"]
                                quality_scores.append(critic_eval.get("quality_score", 7.0))
                                
                                if not critic_eval.get("is_acceptable", True):
                                    retry_count = state.get("retry_count", {})
                                    current_retries = retry_count.get(risk_type, 0)
                                    max_retries = state.get("max_retries", 3)
                                    
                                    if current_retries < max_retries:
                                        retry_needed.append(risk_type)
                            else:
                                quality_scores.append(7.0)
                                
                    except Exception as e:
                        self.graph_logger.log_workflow_step(
                            assessment_id, "quality_check_warning",
                            f"üîß –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∫—Ä–∏—Ç–∏–∫–∞ –¥–ª—è {risk_type}: {e}"
                        )
                        quality_scores.append(7.0)
                
                avg_quality = sum(quality_scores) / len(quality_scores) if quality_scores else 7.0
                
            else:
                # üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ confidence_level –∞–≥–µ–Ω—Ç–æ–≤
                confidence_scores = []
                
                self.graph_logger.log_workflow_step(
                    assessment_id, "quality_check_confidence_analysis",
                    f"üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º confidence_level –∏–∑ {len(evaluation_results)} —É—Å–ø–µ—à–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫"
                )
                
                for risk_type, result in evaluation_results.items():
                    try:
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º confidence_level –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                        confidence = None
                        
                        if isinstance(result, dict):
                            result_data = result.get("result_data")
                            if result_data:
                                confidence = result_data.get("confidence_level")
                        elif hasattr(result, 'result_data') and result.result_data:
                            confidence = result.result_data.get("confidence_level")
                        
                        if confidence is not None:
                            confidence_scores.append(confidence)
                            self.graph_logger.log_workflow_step(
                                assessment_id, "confidence_extracted",
                                f"üîß {risk_type}: confidence_level = {confidence:.3f}"
                            )
                        else:
                            # Fallback: –µ—Å–ª–∏ confidence –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ä–µ–¥–Ω–∏–π
                            confidence_scores.append(0.7)
                            self.graph_logger.log_workflow_step(
                                assessment_id, "confidence_fallback",
                                f"üîß {risk_type}: confidence_level –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º 0.7"
                            )
                            
                    except Exception as e:
                        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
                        confidence_scores.append(0.7)
                        self.graph_logger.log_workflow_step(
                            assessment_id, "confidence_error",
                            f"üîß {risk_type}: –æ—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è confidence - {e}, –∏—Å–ø–æ–ª—å–∑—É–µ–º 0.7"
                        )
                
                if confidence_scores:
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω—é—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
                    avg_confidence = sum(confidence_scores) / len(confidence_scores)
                    
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º confidence (0.0-1.0) –≤ quality (0.0-10.0)
                    # 80% –æ—Ç confidence_level, 20% –æ—Ç success_rate
                    confidence_quality = avg_confidence * 8.0  # –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å
                    success_quality = success_rate * 2.0       # –ë–æ–Ω—É—Å –∑–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç—å
                    avg_quality = confidence_quality + success_quality
                    
                    self.graph_logger.log_workflow_step(
                        assessment_id, "quality_check_confidence_calculation",
                        f"üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: avg_confidence={avg_confidence:.3f}, "
                        f"confidence_quality={confidence_quality:.1f}, "
                        f"success_quality={success_quality:.1f}, "
                        f"total_quality={avg_quality:.1f}"
                    )
                else:
                    # Fallback: –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ confidence, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É
                    avg_quality = 5.0 + (success_rate * 5.0)
                    self.graph_logger.log_workflow_step(
                        assessment_id, "quality_check_fallback",
                        f"üîß Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É, quality={avg_quality:.1f}"
                    )
                
                retry_needed = []
                
                self.graph_logger.log_workflow_step(
                    assessment_id, "quality_check_final",
                    f"üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: {avg_quality:.1f} (–ø–æ—Ä–æ–≥: {self.quality_threshold})"
                )
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
            self.graph_logger.log_quality_check(
                assessment_id, 
                "overall", 
                avg_quality, 
                self.quality_threshold
            )
            
            # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—á–µ—Å—Ç–≤–∞
            state["average_quality"] = avg_quality
            
            if retry_needed:
                state["retry_needed"] = retry_needed
                state["current_step"] = "retry_needed"
                
                self.graph_logger.log_workflow_step(
                    assessment_id, "quality_check_retry",
                    f"üîß ‚úÖ –£–°–¢–ê–ù–û–í–õ–ï–ù current_step = 'retry_needed' –¥–ª—è: {retry_needed}"
                )
                
            elif avg_quality < self.quality_threshold and not has_critic_results:
                state["current_step"] = "needs_critic"
                state["retry_needed"] = []
                
                self.graph_logger.log_workflow_step(
                    assessment_id, "quality_check_needs_critic",
                    f"üîß ‚úÖ –£–°–¢–ê–ù–û–í–õ–ï–ù current_step = 'needs_critic' (–∫–∞—á–µ—Å—Ç–≤–æ {avg_quality:.1f} < {self.quality_threshold})"
                )
                
            else:
                state["current_step"] = "ready_for_finalization"
                state["retry_needed"] = []
                
                self.graph_logger.log_workflow_step(
                    assessment_id, "quality_check_finalize",
                    f"üîß ‚úÖ –£–°–¢–ê–ù–û–í–õ–ï–ù current_step = 'ready_for_finalization' (–∫–∞—á–µ—Å—Ç–≤–æ {avg_quality:.1f} >= {self.quality_threshold})"
                )
            
            return state
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        RiskAssessmentWorkflow._quality_check_node = fixed_quality_check_node
        
        print("‚úÖ –°–∏—Å—Ç–µ–º–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ")
        print("üéØ –¢–µ–ø–µ—Ä—å –∫–∞—á–µ—Å—Ç–≤–æ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ confidence_level –∞–≥–µ–Ω—Ç–æ–≤")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_with_fixed_quality():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º —Ä–∞—Å—á–µ—Ç–æ–º –∫–∞—á–µ—Å—Ç–≤–∞"""
    
    import asyncio
    import tempfile
    
    async def run_test():
        try:
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            if not apply_quality_calculation_fix():
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
                return False
                
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
            temp_dir = Path(tempfile.mkdtemp())
            test_file = temp_dir / "test_agent.py"
            test_file.write_text("# –¢–µ—Å—Ç–æ–≤—ã–π –∞–≥–µ–Ω—Ç\nclass TestAgent:\n    pass", encoding='utf-8')
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            from src.utils.logger import setup_logging
            setup_logging(log_level="INFO")
            
            # –°–æ–∑–¥–∞–µ–º workflow
            from src.workflow import create_workflow_from_env
            workflow = create_workflow_from_env()
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π –ø–æ—Ä–æ–≥
            workflow.quality_threshold = 6.5
            print(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Ä–æ–≥ –∫–∞—á–µ—Å—Ç–≤–∞: {workflow.quality_threshold}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ü–µ–Ω–∫—É
            print("\nüèÉ‚Äç‚ôÇÔ∏è –ó–∞–ø—É—Å–∫ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º —Ä–∞—Å—á–µ—Ç–æ–º –∫–∞—á–µ—Å—Ç–≤–∞...")
            
            result = await workflow.run_assessment(
                source_files=[str(temp_dir)],
                agent_name="TestAgentWithFixedQuality"
            )
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –° –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ú –†–ê–°–ß–ï–¢–û–ú:")
            print("=" * 50)
            
            if result.get("success"):
                print("‚úÖ –û—Ü–µ–Ω–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                
                processing_time = result.get("processing_time", 0)
                print(f"‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.1f}—Å")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—É—Å–∫–∞–ª—Å—è –ª–∏ –∫—Ä–∏—Ç–∏–∫
                if processing_time > 60:
                    print("üéâ –ö–†–ò–¢–ò–ö –ó–ê–ü–£–°–ö–ê–õ–°–Ø! (–≤—Ä–µ–º—è > 60 —Å–µ–∫)")
                    print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - –∫–∞—á–µ—Å—Ç–≤–æ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                else:
                    print("‚ö†Ô∏è –ö—Ä–∏—Ç–∏–∫ –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª—Å—è (–≤—Ä–µ–º—è < 60 —Å–µ–∫)")
                    print("üí° –í–æ–∑–º–æ–∂–Ω–æ –∫–∞—á–µ—Å—Ç–≤–æ –≤—Å–µ –µ—â–µ –≤—ã—Å–æ–∫–æ–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ lower threshold")
                
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞: {result.get('error', 'Unknown')}")
                return False
                
        except Exception as e:
            print(f"üí• –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            import traceback
            traceback.print_exc()
            return False
    
    return asyncio.run(run_test())

if __name__ == "__main__":
    print("üöÄ –°–ò–°–¢–ï–ú–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –†–ê–°–ß–ï–¢–ê –ö–ê–ß–ï–°–¢–í–ê")
    print("=" * 60)
    print("üéØ –¶–ï–õ–¨: –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É quality_check_node –¥–ª—è —É—á–µ—Ç–∞ confidence_level")
    print("üîß –ú–ï–¢–û–î: –ó–∞–º–µ–Ω–∏—Ç—å —Ä–∞—Å—á–µ—Ç –∫–∞—á–µ—Å—Ç–≤–∞ —Å success_rate –Ω–∞ confidence_level")
    
    success = test_with_fixed_quality()
    
    print(f"\nüèÅ –†–ï–ó–£–õ–¨–¢–ê–¢ –°–ò–°–¢–ï–ú–ù–û–ì–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:")
    if success:
        print("‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –†–ê–ë–û–¢–ê–ï–¢!")
        print("üí° –î–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏–º–µ–Ω–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ graph_builder.py")
    else:
        print("‚ùå –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´ –° –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï–ú")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")