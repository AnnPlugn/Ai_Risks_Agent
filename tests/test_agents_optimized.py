# test_agents_quick_fixed.py
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏ –¥–ª—è qwen3-4b
"""

import asyncio
import sys
import time
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src
sys.path.insert(0, str(Path(__file__).parent / "src"))

async def test_single_evaluator_fixed():
    """–¢–µ—Å—Ç –æ–¥–Ω–æ–≥–æ –æ—Ü–µ–Ω—â–∏–∫–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏"""
    print("üß™ –¢–µ—Å—Ç –æ—Ü–µ–Ω—â–∏–∫–∞ —ç—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–∏—Å–∫–æ–≤ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)...")
    
    try:
        from src.agents.evaluator_agents import EthicalRiskEvaluator
        from src.agents.base_agent import create_agent_config
        
        # –ü—Ä–æ—Å—Ç–µ–π—à–∏–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        simple_profile = {
            "name": "QuickTestBot",
            "agent_type": "chatbot", 
            "description": "–ü—Ä–æ—Å—Ç–æ–π –±–æ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–æ–≤",
            "autonomy_level": "supervised",
            "data_access": ["public"],
            "target_audience": "–¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã",
            "llm_model": "qwen3-4b",
            "system_prompts": ["–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"],
            "guardrails": ["–û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã"],
            "external_apis": []
        }
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ü–µ–Ω—â–∏–∫–∞ —Å –∫–æ—Ä–æ—Ç–∫–∏–º —Ç–∞–π–º-–∞—É—Ç–æ–º
        config = create_agent_config(
            name="ethical_evaluator_quick",
            description="–ë—ã—Å—Ç—Ä–∞—è –æ—Ü–µ–Ω–∫–∞ —ç—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–∏—Å–∫–æ–≤",
            llm_base_url="http://127.0.0.1:1234",
            llm_model="qwen3-4b", 
            temperature=0.0,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å
            timeout_seconds=45,  # –ö–æ—Ä–æ—Ç–∫–∏–π —Ç–∞–π–º-–∞—É—Ç
            use_risk_analysis_client=True
        )
        
        evaluator = EthicalRiskEvaluator(config)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å LLM
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ LLM...")
        is_available = await evaluator.health_check()
        if not is_available:
            print("‚ùå LM Studio –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
        
        print("‚úÖ LLM –¥–æ—Å—Ç—É–ø–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –æ—Ü–µ–Ω–∫—É...")
        
        input_data = {"agent_profile": simple_profile}
        assessment_id = "quick_eval_001"
        
        start_time = time.time()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        result = await asyncio.wait_for(
            evaluator.run(input_data, assessment_id),
            timeout=60  # 1 –º–∏–Ω—É—Ç–∞ –º–∞–∫—Å–∏–º—É–º
        )
        
        elapsed = time.time() - start_time
        print(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {elapsed:.1f}—Å")
        
        if result.status.value == "completed":
            risk_eval = result.result_data["risk_evaluation"]
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –æ—Ü–µ–Ω–∫–∞!")
            print(f"   üìä –ë–∞–ª–ª: {risk_eval['total_score']}/25")
            print(f"   üìà –£—Ä–æ–≤–µ–Ω—å: {risk_eval['risk_level']}")
            print(f"   üéØ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {risk_eval['probability_score']}/5")
            print(f"   üí• –í–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ: {risk_eval['impact_score']}/5")
            print(f"   üîë –ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã: {len(risk_eval.get('key_factors', []))}")
            print(f"   üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {len(risk_eval.get('recommendations', []))}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏: {result.error_message}")
            return False
            
    except asyncio.TimeoutError:
        print("‚è∞ –¢–∞–π–º-–∞—É—Ç! –û—Ü–µ–Ω–∫–∞ –∑–∞–Ω—è–ª–∞ –±–æ–ª—å—à–µ 1 –º–∏–Ω—É—Ç—ã")
        return False
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return False

async def test_lightweight_profiler_fixed():
    """–¢–µ—Å—Ç –ø—Ä–æ—Ñ–∞–π–ª–µ—Ä–∞ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    print("\nüß™ –¢–µ—Å—Ç –ø—Ä–æ—Ñ–∞–π–ª–µ—Ä–∞ (–æ–±–ª–µ–≥—á–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)...")
    
    try:
        from src.agents.profiler_agent import ProfilerAgent
        from src.agents.base_agent import create_agent_config
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∞–π–ª–µ—Ä —Å –∫–æ—Ä–æ—Ç–∫–∏–º —Ç–∞–π–º-–∞—É—Ç–æ–º
        config = create_agent_config(
            name="quick_profiler",
            description="–ë—ã—Å—Ç—Ä—ã–π –ø—Ä–æ—Ñ–∞–π–ª–µ—Ä",
            llm_base_url="http://127.0.0.1:1234",
            llm_model="qwen3-4b",
            temperature=0.0,
            timeout_seconds=45,
            use_risk_analysis_client=False
        )
        
        profiler = ProfilerAgent(config)
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        test_file = Path("quick_test_data.txt")
        test_content = """–¢–µ—Å—Ç–æ–≤—ã–π –∞–≥–µ–Ω—Ç: QuickBot
–û–ø–∏—Å–∞–Ω–∏–µ: –ü—Ä–æ—Å—Ç–æ–π —á–∞—Ç-–±–æ—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
–¢–∏–ø: –ü–æ–º–æ—â–Ω–∏–∫
–§—É–Ω–∫—Ü–∏–∏: –û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –ø—Ä–æ—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã
–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: –¢–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        
        with open(test_file, 'w', encoding='utf-8') as f:
            f.write(test_content)
        
        try:
            test_input = {
                "source_files": [str(test_file)],
                "agent_name": "QuickTestAgent"
            }
            
            print("üîÑ –ó–∞–ø—É—Å–∫ –±—ã—Å—Ç—Ä–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è...")
            start_time = time.time()
            
            result = await asyncio.wait_for(
                profiler.run(test_input, "quick_profile_001"),
                timeout=90  # 1.5 –º–∏–Ω—É—Ç—ã –º–∞–∫—Å–∏–º—É–º
            )
            
            elapsed = time.time() - start_time
            print(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {elapsed:.1f}—Å")
            
            if result.status.value == "completed":
                agent_profile = result.result_data["agent_profile"]
                print(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω!")
                print(f"   üìù –ò–º—è: {agent_profile['name']}")
                print(f"   ü§ñ –¢–∏–ø: {agent_profile['agent_type']}")
                print(f"   üéØ –ê—É–¥–∏—Ç–æ—Ä–∏—è: {agent_profile['target_audience']}")
                print(f"   üîí –ê–≤—Ç–æ–Ω–æ–º–Ω–æ—Å—Ç—å: {agent_profile['autonomy_level']}")
                return True, agent_profile
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è: {result.error_message}")
                return False, None
                
        finally:
            # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
            if test_file.exists():
                test_file.unlink()
            
    except asyncio.TimeoutError:
        print("‚è∞ –¢–∞–π–º-–∞—É—Ç! –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–Ω—è–ª–æ –±–æ–ª—å—à–µ 1.5 –º–∏–Ω—É—Ç")
        return False, None
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return False, None

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ñ–∏–∫—Å–∞–º–∏"""
    print("üöÄ –ë–´–°–¢–†–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –° –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø–ú–ò")
    print("(–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è qwen3-4b)")
    print("=" * 50)
    
    total_start = time.time()
    
    # –¢–µ—Å—Ç 1: –ë—ã—Å—Ç—Ä—ã–π –æ—Ü–µ–Ω—â–∏–∫
    evaluator_success = await test_single_evaluator_fixed()
    
    # –¢–µ—Å—Ç 2: –ë—ã—Å—Ç—Ä—ã–π –ø—Ä–æ—Ñ–∞–π–ª–µ—Ä (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—Ü–µ–Ω—â–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç)
    profiler_success = False
    if evaluator_success:
        profiler_success, profile = await test_lightweight_profiler_fixed()
    
    total_time = time.time() - total_start
    print(f"\n‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.1f}—Å")
    
    print("\n" + "=" * 50)
    if evaluator_success and profiler_success:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("\nüìã –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:")
        print("‚úÖ –ê–≥–µ–Ω—Ç-–æ—Ü–µ–Ω—â–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("‚úÖ –ü—Ä–æ—Ñ–∞–π–ª–µ—Ä —Å–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª–∏ –∞–≥–µ–Ω—Ç–æ–≤")
        print("‚úÖ JSON –ø–∞—Ä—Å–∏–Ω–≥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω")
        print("‚úÖ LLM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç")
        print("\nüöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Å–æ–∑–¥–∞–Ω–∏—é LangGraph workflow!")
    elif evaluator_success:
        print("üéØ –ß–ê–°–¢–ò–ß–ù–´–ô –£–°–ü–ï–•!")
        print("‚úÖ –ê–≥–µ–Ω—Ç-–æ—Ü–µ–Ω—â–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("‚ö†Ô∏è –ü—Ä–æ—Ñ–∞–π–ª–µ—Ä –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
        print("\nüí° –ú–æ–∂–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ –≠—Ç–∞–ø—É 4 —Å —Ä–∞–±–æ—á–∏–º–∏ –æ—Ü–µ–Ω—â–∏–∫–∞–º–∏")
    else:
        print("‚ùå –ù–£–ñ–ù–´ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø")
        print("\nüîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ LM Studio")
        print("2. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –º–æ–¥–µ–ª—å –ø–æ–º–µ–Ω—å—à–µ (Phi-3-mini)")
        print("3. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ mock-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
    
    return evaluator_success

if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1)