# test_db_save.py
"""
–¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src
sys.path.insert(0, str(Path(__file__).parent / "src"))

from src.models.database import get_db_manager
from src.models.risk_models import RiskType, RiskLevel, AgentProfile, AgentRiskAssessment
from datetime import datetime

async def test_db_save():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î"""
    
    print("üß™ –¢–ï–°–¢ –°–û–•–†–ê–ù–ï–ù–ò–Ø –í –ë–ê–ó–£ –î–ê–ù–ù–´–•")
    print("=" * 40)
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
        db = await get_db_manager()
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        from sqlalchemy import text
        async with db.async_session() as session:
            result = await session.execute(text("SELECT COUNT(*) FROM risk_assessments"))
            before_count = result.scalar()
            print(f"üìä –ó–∞–ø–∏—Å–µ–π –î–û —Ç–µ—Å—Ç–∞: {before_count}")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∞–≥–µ–Ω—Ç–∞
        test_profile = AgentProfile(
            name="TestAgent",
            version="1.0",
            description="–¢–µ—Å—Ç–æ–≤—ã–π –∞–≥–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î",
            agent_type="chatbot",
            llm_model="qwen3-4b",
            autonomy_level="manual",
            target_audience="developers",
            analyzed_files=["test.py"]
        )
        
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        profile_id = await db.save_agent_profile(test_profile)
        print(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Å ID: {profile_id}")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –æ—Ü–µ–Ω–∫—É
        from src.models.risk_models import RiskEvaluation
        
        test_evaluation = RiskEvaluation(
            risk_type=RiskType.ETHICAL,
            evaluator_agent="test_evaluator",
            probability_score=3,
            impact_score=3,
            total_score=9,
            risk_level=RiskLevel.MEDIUM,
            probability_reasoning="–¢–µ—Å—Ç–æ–≤–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏",
            impact_reasoning="–¢–µ—Å—Ç–æ–≤–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ —Ç—è–∂–µ—Å—Ç–∏",
            key_factors=["test_factor1", "test_factor2"],
            recommendations=["test_recommendation1"],
            confidence_level=0.8
        )
        
        # –°–æ–∑–¥–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é –æ—Ü–µ–Ω–∫—É
        test_assessment = AgentRiskAssessment(
            assessment_id="test_db_save_123",
            agent_profile=test_profile,
            risk_evaluations={RiskType.ETHICAL: test_evaluation},
            overall_risk_score=9,
            overall_risk_level=RiskLevel.MEDIUM,
            highest_risk_areas=[RiskType.ETHICAL],
            priority_recommendations=["test_recommendation"],
            suggested_guardrails=["test_guardrail"],
            processing_time_seconds=1.0,
            quality_checks_passed=True
        )
        
        print("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–æ–∑–¥–∞–Ω–∞")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ü–µ–Ω–∫—É
        saved_id = await db.save_risk_assessment(test_assessment, profile_id)
        print(f"‚úÖ –û—Ü–µ–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Å ID: {saved_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å
        async with db.async_session() as session:
            result = await session.execute(text("SELECT COUNT(*) FROM risk_assessments"))
            after_count = result.scalar()
            print(f"üìä –ó–∞–ø–∏—Å–µ–π –ü–û–°–õ–ï —Ç–µ—Å—Ç–∞: {after_count}")
            
            if after_count > before_count:
                print("üéâ –£–°–ü–ï–•! –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å –≤ –ë–î")
                
                # –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å
                latest = await session.execute(text("SELECT id, overall_risk_level, overall_risk_score FROM risk_assessments ORDER BY assessment_timestamp DESC LIMIT 1"))
                row = latest.first()
                if row:
                    print(f"üìã –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å: {row[0][:8]}... | {row[1]} | {row[2]} –±–∞–ª–ª–æ–≤")
            else:
                print("‚ùå –û–®–ò–ë–ö–ê! –î–∞–Ω–Ω—ã–µ –ù–ï —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å")
        
        await db.close()
        
        return after_count > before_count
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        return False


async def test_workflow_finalization():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—é workflow"""
    
    print("\nüîß –¢–ï–°–¢ –§–ò–ù–ê–õ–ò–ó–ê–¶–ò–ò WORKFLOW")
    print("=" * 40)
    
    try:
        from src.workflow import create_workflow_from_env
        
        workflow = create_workflow_from_env()
        print("‚úÖ Workflow —Å–æ–∑–¥–∞–Ω")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        import tempfile
        with tempfile.NamedTemporaryFile(mode='w', suffix='.py', delete=False, encoding='utf-8') as f:
            f.write('''# test_agent.py
class TestAgent:
    def __init__(self):
        self.name = "Test"
        self.prompt = "You are helpful"
''')
            test_file = f.name
        
        print(f"üìÑ –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: {test_file}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º workflow
        result = await workflow.run_assessment(
            source_files=[test_file],
            agent_name="WorkflowTestAgent",
            assessment_id="workflow_test_456"
        )
        
        print(f"üìä Workflow —Ä–µ–∑—É–ª—å—Ç–∞—Ç:")
        print(f"   Success: {result.get('success')}")
        print(f"   Step: {result.get('current_step')}")
        print(f"   Assessment ID: {result.get('assessment_id')}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ë–î –ø–æ—Å–ª–µ workflow
        db = await get_db_manager()
        from sqlalchemy import text
        async with db.async_session() as session:
            result_db = await session.execute(text("SELECT COUNT(*) FROM risk_assessments WHERE id LIKE 'workflow_test_%'"))
            count = result_db.scalar()
            print(f"   –ë–î –∑–∞–ø–∏—Å–µ–π —Å workflow_test: {count}")
        
        await db.close()
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        import os
        os.unlink(test_file)
        
        return count > 0
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê WORKFLOW: {e}")
        return False


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("üöÄ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú –° –°–û–•–†–ê–ù–ï–ù–ò–ï–ú –í –ë–î")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: –ü—Ä—è–º–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    direct_save_ok = await test_db_save()
    
    # –¢–µ—Å—Ç 2: Workflow —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è
    workflow_save_ok = await test_workflow_finalization()
    
    print(f"\nüìä –ò–¢–û–ì–ò –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:")
    print(f"   –ü—Ä—è–º–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if direct_save_ok else '‚ùå –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç'}")
    print(f"   Workflow —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if workflow_save_ok else '‚ùå –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç'}")
    
    if direct_save_ok and not workflow_save_ok:
        print("\nüîç –í–´–í–û–î: –ü—Ä–æ–±–ª–µ–º–∞ –≤ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ workflow, –ë–î —Ä–∞–±–æ—Ç–∞–µ—Ç")
    elif not direct_save_ok:
        print("\nüîç –í–´–í–û–î: –ü—Ä–æ–±–ª–µ–º–∞ –≤ —Å–∞–º–æ–π –ë–î –∏–ª–∏ –º–æ–¥–µ–ª—è—Ö –¥–∞–Ω–Ω—ã—Ö")
    elif direct_save_ok and workflow_save_ok:
        print("\nüîç –í–´–í–û–î: –í—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç! –ü—Ä–æ–±–ª–µ–º–∞ –±—ã–ª–∞ –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ")
    else:
        print("\nüîç –í–´–í–û–î: –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞")


if __name__ == "__main__":
    asyncio.run(main())