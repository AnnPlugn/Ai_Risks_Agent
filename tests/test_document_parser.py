# test_document_parser.py
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –ø–∞—Ä—Å–µ—Ä–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
"""

import sys
from pathlib import Path
import tempfile
import json
from typing import List, Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src
sys.path.insert(0, str(Path(__file__).parent / "src"))

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
    
    dependencies = {
        'docx': 'python-docx',
        'openpyxl': 'openpyxl', 
        'PyPDF2': 'PyPDF2',
        'pdfplumber': 'pdfplumber'
    }
    
    missing_deps = []
    
    for module, package in dependencies.items():
        try:
            __import__(module)
            print(f"‚úÖ {module} ({package}) - —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except ImportError:
            print(f"‚ùå {module} ({package}) - –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù")
            missing_deps.append(package)
    
    if missing_deps:
        print(f"\nüö® –ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:")
        print(f"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –∫–æ–º–∞–Ω–¥–æ–π: pip install {' '.join(missing_deps)}")
        return False
    
    print("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    return True

def create_test_documents() -> Dict[str, Path]:
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    print("\nüìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
    
    test_docs = {}
    temp_dir = Path(tempfile.mkdtemp())
    
    # 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    txt_file = temp_dir / "test_agent.txt"
    txt_content = """–ê–≥–µ–Ω—Ç: TestAgent

–û–ø–∏—Å–∞–Ω–∏–µ:
–¢–µ—Å—Ç–æ–≤—ã–π –ò–ò-–∞–≥–µ–Ω—Ç –¥–ª—è –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π.

–§—É–Ω–∫—Ü–∏–∏:
- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫–ª–∏–µ–Ω—Ç–æ–≤
- –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤
- –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π

–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:
- –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±–µ–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
- –¢—Ä–µ–±—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
"""
    txt_file.write_text(txt_content, encoding='utf-8')
    test_docs['txt'] = txt_file
    
    # 2. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π JSON —Ñ–∞–π–ª
    json_file = temp_dir / "agent_config.json"
    json_content = {
        "agent_name": "TestAgent",
        "model": "gpt-4",
        "temperature": 0.1,
        "system_prompt": "–¢—ã - –±–∞–Ω–∫–æ–≤—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç",
        "guardrails": [
            "–ù–µ —Ä–∞–∑–≥–ª–∞—à–∞–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é",
            "–í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–π –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞"
        ]
    }
    json_file.write_text(json.dumps(json_content, ensure_ascii=False, indent=2), encoding='utf-8')
    test_docs['json'] = json_file
    
    # 3. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π Word –¥–æ–∫—É–º–µ–Ω—Ç (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω python-docx)
    try:
        import docx
        doc = docx.Document()
        doc.add_heading('–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è TestAgent', 0)
        doc.add_heading('–û–±—â–∏–µ —Å–≤–µ–¥–µ–Ω–∏—è', level=1)
        p = doc.add_paragraph('TestAgent - —ç—Ç–æ –ò–ò-–∞–≥–µ–Ω—Ç –¥–ª—è –±–∞–Ω–∫–æ–≤—Å–∫–æ–π —Å—Ñ–µ—Ä—ã.')
        
        doc.add_heading('–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏', level=1)
        doc.add_paragraph('–ú–æ–¥–µ–ª—å: GPT-4')
        doc.add_paragraph('–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: 0.1')
        doc.add_paragraph('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ —Ç–æ–∫–µ–Ω–æ–≤: 4096')
        
        doc.add_heading('–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏', level=1)
        doc.add_paragraph('1. –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±–µ–∑ —Å–æ–≥–ª–∞—Å–∏—è')
        doc.add_paragraph('2. –¢—Ä–µ–±—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å–≤—ã—à–µ 100,000 —Ä—É–±.')
        
        docx_file = temp_dir / "test_agent_spec.docx"
        doc.save(str(docx_file))
        test_docs['docx'] = docx_file
        print("‚úÖ Word –¥–æ–∫—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω")
        
    except ImportError:
        print("‚ö†Ô∏è python-docx –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - Word –¥–æ–∫—É–º–µ–Ω—Ç –Ω–µ —Å–æ–∑–¥–∞–Ω")
    
    # 4. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π Excel —Ñ–∞–π–ª (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω openpyxl)
    try:
        import openpyxl
        wb = openpyxl.Workbook()
        ws = wb.active
        ws.title = "–ê–≥–µ–Ω—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        ws['A1'] = '–ü–∞—Ä–∞–º–µ—Ç—Ä'
        ws['B1'] = '–ó–Ω–∞—á–µ–Ω–∏–µ'
        ws['C1'] = '–û–ø–∏—Å–∞–Ω–∏–µ'
        
        # –î–∞–Ω–Ω—ã–µ
        data = [
            ['–ò–º—è –∞–≥–µ–Ω—Ç–∞', 'TestAgent', '–£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –∞–≥–µ–Ω—Ç–∞'],
            ['–ú–æ–¥–µ–ª—å', 'GPT-4', '–ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è —è–∑—ã–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å'],
            ['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞', '0.1', '–ü–∞—Ä–∞–º–µ—Ç—Ä –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏'],
            ['–ú–∞–∫—Å —Ç–æ–∫–µ–Ω—ã', '4096', '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞'],
            ['–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ä–∏—Å–∫–∞', '–°—Ä–µ–¥–Ω–∏–π', '–û—Ü–µ–Ω–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ä–∏—Å–∫–∞']
        ]
        
        for row, (param, value, desc) in enumerate(data, 2):
            ws[f'A{row}'] = param
            ws[f'B{row}'] = value
            ws[f'C{row}'] = desc
        
        xlsx_file = temp_dir / "agent_params.xlsx"
        wb.save(str(xlsx_file))
        test_docs['xlsx'] = xlsx_file
        print("‚úÖ Excel —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω")
        
    except ImportError:
        print("‚ö†Ô∏è openpyxl –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - Excel —Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω")
    
    print(f"üìÅ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω—ã –≤: {temp_dir}")
    return test_docs

def test_document_parser(test_docs: Dict[str, Path]):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
    
    try:
        from src.tools.document_parser import create_document_parser
        
        parser = create_document_parser()
        
        results = []
        
        for doc_type, file_path in test_docs.items():
            print(f"\nüìÑ –¢–µ—Å—Ç–∏—Ä—É–µ—Ç—Å—è: {file_path.name} (—Ç–∏–ø: {doc_type})")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ø–∞—Ä—Å–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª
            can_parse = parser.can_parse(file_path)
            print(f"   –ú–æ–∂–µ—Ç –ø–∞—Ä—Å–∏—Ç—å: {can_parse}")
            
            if can_parse:
                try:
                    # –ü—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç
                    result = parser.parse_document(file_path)
                    
                    print(f"   –°—Ç–∞—Ç—É—Å: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if result.success else '‚ùå –û—à–∏–±–∫–∞'}")
                    
                    if result.success:
                        print(f"   –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {len(result.content)} —Å–∏–º–≤–æ–ª–æ–≤")
                        print(f"   –°–µ–∫—Ü–∏–∏: {len(result.sections)}")
                        print(f"   –¢–∞–±–ª–∏—Ü—ã: {len(result.tables)}")
                        print(f"   –í—Ä–µ–º—è –ø–∞—Ä—Å–∏–Ω–≥–∞: {result.parsing_time:.2f}—Å")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
                        preview = result.content[:200] + "..." if len(result.content) > 200 else result.content
                        print(f"   –ü—Ä–µ–≤—å—é: {preview}")
                        
                    else:
                        print(f"   –û—à–∏–±–∫–∞: {result.error_message}")
                    
                    results.append({
                        'file_type': doc_type,
                        'file_name': file_path.name,
                        'success': result.success,
                        'error': result.error_message if not result.success else None,
                        'content_length': len(result.content) if result.success else 0,
                        'sections_count': len(result.sections) if result.success else 0,
                        'parsing_time': result.parsing_time
                    })
                    
                except Exception as e:
                    print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")
                    results.append({
                        'file_type': doc_type,
                        'file_name': file_path.name,
                        'success': False,
                        'error': str(e),
                        'content_length': 0,
                        'sections_count': 0,
                        'parsing_time': 0
                    })
            else:
                print(f"   ‚ö†Ô∏è –ü–∞—Ä—Å–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞")
                results.append({
                    'file_type': doc_type,
                    'file_name': file_path.name,
                    'success': False,
                    'error': 'Unsupported file type',
                    'content_length': 0,
                    'sections_count': 0,
                    'parsing_time': 0
                })
        
        return results
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞: {e}")
        import traceback
        traceback.print_exc()
        return []

def test_parser_components():
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø–∞—Ä—Å–µ—Ä–∞"""
    print("\nüîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø–∞—Ä—Å–µ—Ä–∞...")
    
    try:
        from src.tools.document_parser import DocumentParser
        
        parser = DocumentParser()
        print(f"‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å DocumentParser —Å–æ–∑–¥–∞–Ω")
        print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä—Å–µ—Ä–æ–≤: {len(parser.parsers)}")
        
        for i, p in enumerate(parser.parsers):
            parser_name = p.__class__.__name__
            supported_ext = getattr(p, 'supported_extensions', [])
            print(f"   {i+1}. {parser_name}: {supported_ext}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –ø–∞—Ä—Å–µ—Ä –Ω–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
            test_extensions = ['.txt', '.py', '.docx', '.xlsx', '.pdf', '.json']
            for ext in test_extensions:
                if ext in supported_ext:
                    print(f"      ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç {ext}")
                    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
        import traceback
        traceback.print_exc()

def fix_parser_issues():
    """–ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—ã—è–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º"""
    print("\nüõ†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º...")
    
    # –ü—Ä–æ–≤–µ—Ä–∏–º –∏–º–ø–æ—Ä—Ç—ã –≤ –º–æ–¥—É–ª–µ –ø–∞—Ä—Å–µ—Ä–∞
    try:
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ –≤ document_parser.py...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É –æ—Ç–¥–µ–ª—å–Ω–æ
        libraries = ['docx', 'openpyxl', 'PyPDF2', 'pdfplumber']
        
        for lib in libraries:
            try:
                module = __import__(lib)
                print(f"‚úÖ {lib}: –î–æ—Å—Ç—É–ø–µ–Ω (–≤–µ—Ä—Å–∏—è: {getattr(module, '__version__', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞')})")
            except ImportError as e:
                print(f"‚ùå {lib}: –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω - {e}")
                print(f"   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install {lib}")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∞—Å—Å—ã –ø–∞—Ä—Å–µ—Ä–∞
        from src.tools.document_parser import (
            WordDocumentParser, 
            ExcelDocumentParser, 
            PDFDocumentParser, 
            TextDocumentParser
        )
        print("‚úÖ –í—Å–µ –∫–ª–∞—Å—Å—ã –ø–∞—Ä—Å–µ—Ä–æ–≤ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∞—Ä—Å–µ—Ä–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

def generate_test_report(results: List[Dict[str, Any]]):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
    print("\nüìä –û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò –ü–ê–†–°–ï–†–ê")
    print("=" * 50)
    
    total_tests = len(results)
    successful_tests = sum(1 for r in results if r['success'])
    failed_tests = total_tests - successful_tests
    
    print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
    print(f"–£—Å–ø–µ—à–Ω—ã—Ö: {successful_tests}")
    print(f"–ù–µ—É–¥–∞—á–Ω—ã—Ö: {failed_tests}")
    print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {successful_tests/total_tests*100:.1f}%" if total_tests > 0 else "N/A")
    
    print("\n–î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    for result in results:
        status = "‚úÖ" if result['success'] else "‚ùå"
        print(f"{status} {result['file_type'].upper()}: {result['file_name']}")
        if not result['success']:
            print(f"    –û—à–∏–±–∫–∞: {result['error']}")
        else:
            print(f"    –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {result['content_length']} —Å–∏–º–≤–æ–ª–æ–≤, {result['sections_count']} —Å–µ–∫—Ü–∏–π")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é
    print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    
    failed_types = [r['file_type'] for r in results if not r['success']]
    
    if 'docx' in failed_types:
        print("- –î–ª—è Word —Ñ–∞–π–ª–æ–≤: pip install python-docx")
    if 'xlsx' in failed_types:
        print("- –î–ª—è Excel —Ñ–∞–π–ª–æ–≤: pip install openpyxl")
    if 'pdf' in failed_types:
        print("- –î–ª—è PDF —Ñ–∞–π–ª–æ–≤: pip install PyPDF2 pdfplumber")
    
    if failed_tests == 0:
        print("üéâ –í—Å–µ –ø–∞—Ä—Å–µ—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞"""
    print("üöÄ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    print("=" * 60)
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    deps_ok = check_dependencies()
    
    # 2. –î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    test_parser_components()
    
    # 3. –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã
    fix_parser_issues()
    
    # 4. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
    test_docs = create_test_documents()
    
    # 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä
    if test_docs:
        results = test_document_parser(test_docs)
        
        # 6. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        if results:
            generate_test_report(results)
    
    print("\n" + "=" * 60)
    print("üèÅ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    if not deps_ok:
        print("\nüö® –ö–†–ò–¢–ò–ß–ù–û: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –ø–∞—Ä—Å–µ—Ä–∞!")
        return False
    
    return True

if __name__ == "__main__":
    main()