# test_database.py
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –ë–î
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src
sys.path.insert(0, str(Path(__file__).parent / "src"))

from src.models.database import get_db_manager
from rich.console import Console
from rich.table import Table
from rich.panel import Panel

console = Console()


async def test_database():
    """–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    console.print(Panel.fit(
        "[bold blue]üóÑÔ∏è –¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö[/bold blue]",
        border_style="blue"
    ))
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î (get_db_manager —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç)
        db_manager = await get_db_manager()
        console.print("[green]‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ[/green]")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
        async with db_manager.async_session() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å–∏ –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
            from sqlalchemy import text
            
            tables = ['agent_profiles', 'risk_assessments', 'risk_evaluations', 'critic_evaluations']
            
            stats_table = Table(title="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞–±–ª–∏—Ü")
            stats_table.add_column("–¢–∞–±–ª–∏—Ü–∞", style="cyan")
            stats_table.add_column("–ó–∞–ø–∏—Å–µ–π", style="white")
            
            for table in tables:
                try:
                    result = await session.execute(text(f"SELECT COUNT(*) FROM {table}"))
                    count = result.scalar()
                    stats_table.add_row(table, str(count))
                except Exception as e:
                    stats_table.add_row(table, f"–û—à–∏–±–∫–∞: {str(e)[:50]}")
            
            console.print(stats_table)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –æ—Ü–µ–Ω–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        try:
            from sqlalchemy import select, desc
            from src.models.database import RiskAssessmentDB
            
            async with db_manager.async_session() as session:
                stmt = select(RiskAssessmentDB).order_by(desc(RiskAssessmentDB.assessment_timestamp)).limit(3)
                result = await session.execute(stmt)
                assessments = result.scalars().all()
                
                if assessments:
                    console.print(f"\n[green]üìã –ù–∞–π–¥–µ–Ω–æ {len(assessments)} –Ω–µ–¥–∞–≤–Ω–∏—Ö –æ—Ü–µ–Ω–æ–∫:[/green]")
                    
                    recent_table = Table()
                    recent_table.add_column("ID", style="cyan")
                    recent_table.add_column("–†–∏—Å–∫", style="white")
                    recent_table.add_column("–î–∞—Ç–∞", style="green")
                    
                    for assessment in assessments:
                        recent_table.add_row(
                            assessment.id[:8] + "...",
                            f"{assessment.overall_risk_level} ({assessment.overall_risk_score})",
                            str(assessment.assessment_timestamp)[:19]
                        )
                    
                    console.print(recent_table)
                else:
                    console.print("[yellow]üì≠ –ü–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫[/yellow]")
                    console.print("[dim]–ó–∞–ø—É—Å—Ç–∏—Ç–µ: python main.py assess <files> —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é –æ—Ü–µ–Ω–∫—É[/dim]")
        
        except Exception as e:
            console.print(f"[yellow]‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ü–µ–Ω–æ–∫: {e}[/yellow]")
        
        await db_manager.close()
        console.print("\n[green]‚úÖ –¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ[/green]")
        
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –ë–î: {e}[/red]")
        import traceback
        console.print(f"[dim]{traceback.format_exc()}[/dim]")


if __name__ == "__main__":
    asyncio.run(test_database())