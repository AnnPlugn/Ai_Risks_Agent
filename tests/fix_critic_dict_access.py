# fix_critic_dict_access.py
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ 'dict' object has no attribute 'result_data' –≤ –∫—Ä–∏—Ç–∏–∫–µ
"""

import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src
sys.path.insert(0, str(Path(__file__).parent / "src"))

def apply_critic_dict_fix():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—É —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –¥–∞–Ω–Ω—ã–º –≤ –∫—Ä–∏—Ç–∏–∫–µ"""
    
    try:
        print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º –≤ –∫—Ä–∏—Ç–∏–∫–µ...")
        
        from src.agents.critic_agent import CriticAgent
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
        if not hasattr(CriticAgent, '_original_critique_multiple_evaluations'):
            CriticAgent._original_critique_multiple_evaluations = CriticAgent.critique_multiple_evaluations
        
        async def fixed_critique_multiple_evaluations(
            self,
            evaluation_results,  # Dict[str, Any] –∏–∑ get_evaluation_results()
            agent_profile,
            assessment_id
        ):
            """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è critique_multiple_evaluations —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º –∫ –¥–∞–Ω–Ω—ã–º"""
            
            critic_results = {}
            
            self.logger.bind_context(assessment_id, self.name).info(
                f"üîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –∫—Ä–∏—Ç–∏–∫–∞: –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {len(evaluation_results)} –æ—Ü–µ–Ω–æ–∫"
            )
            
            for risk_type, eval_result in evaluation_results.items():
                try:
                    # üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
                    if not eval_result or not isinstance(eval_result, dict):
                        self.logger.bind_context(assessment_id, self.name).warning(
                            f"üîß {risk_type}: eval_result –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ dict"
                        )
                        critic_results[risk_type] = self._create_default_critic_result(
                            risk_type, "–ü—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ü–µ–Ω–∫–∏"
                        )
                        continue
                    
                    # üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∫ –∑–Ω–∞—á–µ–Ω–∏–µ dict
                    status = eval_result.get("status")
                    if status != "completed":
                        self.logger.bind_context(assessment_id, self.name).warning(
                            f"üîß {risk_type}: —Å—Ç–∞—Ç—É—Å –Ω–µ 'completed', –ø–æ–ª—É—á–µ–Ω: {status}"
                        )
                        critic_results[risk_type] = self._create_default_critic_result(
                            risk_type, f"–û—Ü–µ–Ω–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Å—Ç–∞—Ç—É—Å: {status}"
                        )
                        continue
                    
                    # üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ—Å—Ç—É–ø –∫ result_data –∫–∞–∫ –∫ –∫–ª—é—á—É dict
                    result_data = eval_result.get("result_data")
                    if not result_data:
                        self.logger.bind_context(assessment_id, self.name).warning(
                            f"üîß {risk_type}: result_data –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
                        )
                        critic_results[risk_type] = self._create_default_critic_result(
                            risk_type, "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ—Ü–µ–Ω–∫–∏"
                        )
                        continue
                    
                    # üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ—Å—Ç—É–ø –∫ risk_evaluation
                    risk_evaluation = result_data.get("risk_evaluation")
                    if not risk_evaluation:
                        self.logger.bind_context(assessment_id, self.name).warning(
                            f"üîß {risk_type}: risk_evaluation –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ result_data"
                        )
                        critic_results[risk_type] = self._create_default_critic_result(
                            risk_type, "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–∞"
                        )
                        continue
                    
                    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫—Ä–∏—Ç–∏–∫–∏
                    input_data = {
                        "risk_type": risk_type,
                        "risk_evaluation": risk_evaluation,
                        "agent_profile": agent_profile,
                        "evaluator_name": eval_result.get("agent_name", "Unknown")
                    }
                    
                    self.logger.bind_context(assessment_id, self.name).info(
                        f"üîß {risk_type}: –∑–∞–ø—É—Å–∫–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑"
                    )
                    
                    # –í—ã–ø–æ–ª–Ω—è–µ–º –∫—Ä–∏—Ç–∏–∫—É
                    critic_result = await self.run(input_data, assessment_id)
                    critic_results[risk_type] = critic_result
                    
                    self.logger.bind_context(assessment_id, self.name).info(
                        f"üîß {risk_type}: –∫—Ä–∏—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
                    )
                    
                except Exception as e:
                    # –ï—Å–ª–∏ –∫—Ä–∏—Ç–∏–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, —Å–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    self.logger.bind_context(assessment_id, self.name).error(
                        f"üîß ‚ùå –û—à–∏–±–∫–∞ –∫—Ä–∏—Ç–∏–∫–∏ {risk_type}: {e}"
                    )
                    
                    critic_results[risk_type] = self._create_default_critic_result(
                        risk_type, f"–û—à–∏–±–∫–∞ –∫—Ä–∏—Ç–∏–∫–∏: {str(e)}"
                    )
            
            self.logger.bind_context(assessment_id, self.name).info(
                f"üîß –ö—Ä–∏—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(critic_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
            )
            
            return critic_results
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        CriticAgent.critique_multiple_evaluations = fixed_critique_multiple_evaluations
        
        print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º –≤ –∫—Ä–∏—Ç–∏–∫–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—Ä–∏—Ç–∏–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_fixed_critic():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫—Ä–∏—Ç–∏–∫–∞"""
    
    import asyncio
    import tempfile
    
    async def run_test():
        try:
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            print("üîß –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è...")
            
            # 1. –ü–∞—Ç—á confidence
            from src.utils.risk_validation_patch import apply_confidence_and_factors_patch
            apply_confidence_and_factors_patch()
            
            # 2. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏–∫–∞
            if not apply_critic_dict_fix():
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∫—Ä–∏—Ç–∏–∫–∞")
                return False
            
            # 3. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ (–∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞)
            from src.workflow.graph_builder import RiskAssessmentWorkflow
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
            if not hasattr(RiskAssessmentWorkflow, '_original_quality_check_node'):
                RiskAssessmentWorkflow._original_quality_check_node = RiskAssessmentWorkflow._quality_check_node
            
            async def simple_fixed_quality_check(self, state):
                """–ü—Ä–æ—Å—Ç–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ + –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫—Ä–∏—Ç–∏–∫–∞"""
                
                assessment_id = state["assessment_id"]
                
                # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                try:
                    all_results = state.get_evaluation_results()
                    evaluation_results = {}
                    
                    for risk_type, result in all_results.items():
                        if not result:
                            continue
                            
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
                        status = None
                        if isinstance(result, dict):
                            status = result.get("status")
                        elif hasattr(result, 'status'):
                            status = result.status
                            
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ü–µ–Ω–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ
                        is_completed = False
                        if hasattr(status, 'value'):
                            is_completed = status.value == "completed"
                        elif str(status) == "ProcessingStatus.COMPLETED":
                            is_completed = True  
                        elif status == "completed":
                            is_completed = True
                        
                        if not is_completed:
                            continue
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ result_data
                        result_data = None
                        if isinstance(result, dict):
                            result_data = result.get("result_data")
                        elif hasattr(result, 'result_data'):
                            result_data = result.result_data
                            
                        if result_data is None:
                            continue
                        
                        evaluation_results[risk_type] = result
                    
                except Exception as e:
                    evaluation_results = {}

                # –ï—Å–ª–∏ –Ω–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫
                if not evaluation_results:
                    state["current_step"] = "error"
                    state["error_message"] = "–ù–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫ —Ä–∏—Å–∫–æ–≤"
                    state["retry_needed"] = []
                    return state
                
                # –ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç –∫–∞—á–µ—Å—Ç–≤–∞
                success_rate = len(evaluation_results) / 6
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫—Ä–∏—Ç–∏–∫–∞
                critic_results = state.get("critic_results", {})
                has_critic_results = bool(critic_results)
                
                if has_critic_results:
                    # –ï—Å–ª–∏ –∫—Ä–∏—Ç–∏–∫ —É–∂–µ —Ä–∞–±–æ—Ç–∞–ª
                    avg_quality = 7.0  # –°—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ –∫—Ä–∏—Ç–∏–∫–∞
                    retry_needed = []
                else:
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫—Ä–∏—Ç–∏–∫–∞
                    avg_quality = self.quality_threshold - 0.5  # –ß—É—Ç—å –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞
                    retry_needed = []
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                self.graph_logger.log_quality_check(
                    assessment_id, 
                    "overall", 
                    avg_quality, 
                    self.quality_threshold
                )
                
                # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ
                state["average_quality"] = avg_quality
                
                if avg_quality < self.quality_threshold and not has_critic_results:
                    state["current_step"] = "needs_critic"
                    state["retry_needed"] = []
                    
                    self.graph_logger.log_workflow_step(
                        assessment_id, "quality_check_needs_critic",
                        f"üîß ‚úÖ –ö–†–ò–¢–ò–ö –ê–ö–¢–ò–í–ò–†–û–í–ê–ù! (–∫–∞—á–µ—Å—Ç–≤–æ {avg_quality:.1f} < {self.quality_threshold})"
                    )
                else:
                    state["current_step"] = "ready_for_finalization"
                    state["retry_needed"] = []
                
                return state
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞
            RiskAssessmentWorkflow._quality_check_node = simple_fixed_quality_check
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
            temp_dir = Path(tempfile.mkdtemp())
            test_file = temp_dir / "fixed_test_agent.py"
            test_file.write_text("""
# –¢–µ—Å—Ç–æ–≤—ã–π –∞–≥–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫—Ä–∏—Ç–∏–∫–∞
class FixedTestAgent:
    def __init__(self):
        self.model = "test-model"
        
    def process(self, data):
        return "test output"
        """, encoding='utf-8')
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            from src.utils.logger import setup_logging
            setup_logging(log_level="INFO")
            
            # –°–æ–∑–¥–∞–µ–º workflow
            from src.workflow import create_workflow_from_env
            workflow = create_workflow_from_env()
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ä–æ–≥
            workflow.quality_threshold = 6.0
            print(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Ä–æ–≥ –∫–∞—á–µ—Å—Ç–≤–∞: {workflow.quality_threshold}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ü–µ–Ω–∫—É
            print("\nüèÉ‚Äç‚ôÇÔ∏è –ó–∞–ø—É—Å–∫ —Å –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ú –∫—Ä–∏—Ç–∏–∫–æ–º...")
            
            result = await workflow.run_assessment(
                source_files=[str(temp_dir)],
                agent_name="FixedCriticTest"
            )
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –° –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ú –ö–†–ò–¢–ò–ö–û–ú:")
            print("=" * 50)
            
            if result.get("success"):
                print("‚úÖ –û—Ü–µ–Ω–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                
                processing_time = result.get("processing_time", 0)
                print(f"‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.1f}—Å")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—É—Å–∫–∞–ª—Å—è –ª–∏ –∫—Ä–∏—Ç–∏–∫
                if processing_time > 60:
                    print("üéâ –ö–†–ò–¢–ò–ö –ó–ê–ü–£–°–ö–ê–õ–°–Ø –ò –†–ê–ë–û–¢–ê–ï–¢! (–≤—Ä–µ–º—è > 60 —Å–µ–∫)")
                    print("‚úÖ –í–°–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –†–ê–ë–û–¢–ê–Æ–¢!")
                else:
                    print("‚ö†Ô∏è –í—Ä–µ–º—è < 60 —Å–µ–∫")
                    print("üí° –ù–æ –∫—Ä–∏—Ç–∏–∫ –º–æ–≥ –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è –∏ –±—ã—Å—Ç—Ä–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è")
                
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞: {result.get('error', 'Unknown')}")
                return False
                
        except Exception as e:
            print(f"üí• –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            import traceback
            traceback.print_exc()
            return False
    
    return asyncio.run(run_test())

if __name__ == "__main__":
    print("üöÄ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–†–ò–¢–ò–ö–ê")
    print("=" * 50)
    print("üéØ –¶–ï–õ–¨: –ò—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É 'dict' object has no attribute 'result_data'")
    print("üîß –ú–ï–¢–û–î: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º –≤ dict —Å—Ç—Ä—É–∫—Ç—É—Ä–µ")
    
    success = test_fixed_critic()
    
    print(f"\nüèÅ –†–ï–ó–£–õ–¨–¢–ê–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ö–†–ò–¢–ò–ö–ê:")
    if success:
        print("‚úÖ –ö–†–ò–¢–ò–ö –ò–°–ü–†–ê–í–õ–ï–ù –ò –†–ê–ë–û–¢–ê–ï–¢!")
        print("üéâ –ü—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é!")
    else:
        print("‚ùå –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´ –° –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï–ú")