# ultimate_critic_complete_fix.py
"""
–û–ö–û–ù–ß–ê–¢–ï–õ–¨–ù–û–ï –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏–∫–∞ - —Ä–µ—à–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –ø—Ä–æ–±–ª–µ–º—ã:
1. JSON serialization datetime
2. Pydantic validation AgentTaskResult -> dict
"""

import sys
import asyncio
import tempfile
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src
sys.path.insert(0, str(Path(__file__).parent / "src"))

def apply_ultimate_critic_fix():
    """–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏–∫–∞"""
    
    try:
        print("üîß –û–ö–û–ù–ß–ê–¢–ï–õ–¨–ù–û–ï –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏–∫–∞...")
        
        from src.agents.critic_agent import CriticAgent
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
        if not hasattr(CriticAgent, '_original_critique_multiple_evaluations'):
            CriticAgent._original_critique_multiple_evaluations = CriticAgent.critique_multiple_evaluations
        
        async def ultimate_fixed_critique_multiple_evaluations(
            self,
            evaluation_results,
            agent_profile,
            assessment_id
        ):
            """–û–ö–û–ù–ß–ê–¢–ï–õ–¨–ù–ê–Ø –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –∫—Ä–∏—Ç–∏–∫–∞"""
            
            critic_results = {}
            
            self.logger.bind_context(assessment_id, self.name).info(
                f"üîß –û–ö–û–ù–ß–ê–¢–ï–õ–¨–ù–ê–Ø –∫—Ä–∏—Ç–∏–∫–∞: –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {len(evaluation_results)} –æ—Ü–µ–Ω–æ–∫"
            )
            
            for risk_type, eval_result in evaluation_results.items():
                try:
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
                    if not eval_result or not isinstance(eval_result, dict):
                        critic_results[risk_type] = self._create_default_critic_result(
                            risk_type, "–ü—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ü–µ–Ω–∫–∏"
                        )
                        continue
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
                    status = eval_result.get("status")
                    is_completed = False
                    
                    if hasattr(status, 'value'):
                        is_completed = status.value == "completed"
                    elif str(status) == "ProcessingStatus.COMPLETED":
                        is_completed = True
                    elif status == "completed":
                        is_completed = True
                    
                    if not is_completed:
                        critic_results[risk_type] = self._create_default_critic_result(
                            risk_type, f"–û—Ü–µ–Ω–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Å—Ç–∞—Ç—É—Å: {status}"
                        )
                        continue
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ result_data
                    result_data = eval_result.get("result_data")
                    if not result_data:
                        critic_results[risk_type] = self._create_default_critic_result(
                            risk_type, "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ—Ü–µ–Ω–∫–∏"
                        )
                        continue
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ risk_evaluation
                    risk_evaluation = result_data.get("risk_evaluation")
                    if not risk_evaluation:
                        critic_results[risk_type] = self._create_default_critic_result(
                            risk_type, "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–∞"
                        )
                        continue
                    
                    # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 1: –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º datetime –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è JSON
                    if isinstance(risk_evaluation, dict):
                        risk_evaluation_safe = {}
                        for key, value in risk_evaluation.items():
                            if hasattr(value, 'isoformat'):  # datetime –æ–±—ä–µ–∫—Ç
                                risk_evaluation_safe[key] = value.isoformat()
                            else:
                                risk_evaluation_safe[key] = value
                    else:
                        risk_evaluation_safe = risk_evaluation
                    
                    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫—Ä–∏—Ç–∏–∫–∏
                    input_data = {
                        "risk_type": risk_type,
                        "risk_evaluation": risk_evaluation_safe,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –≤–µ—Ä—Å–∏—é
                        "agent_profile": agent_profile,
                        "evaluator_name": eval_result.get("agent_name", "Unknown")
                    }
                    
                    self.logger.bind_context(assessment_id, self.name).info(
                        f"üîß {risk_type}: –∑–∞–ø—É—Å–∫–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑"
                    )
                    
                    # –í—ã–ø–æ–ª–Ω—è–µ–º –∫—Ä–∏—Ç–∏–∫—É
                    critic_result = await self.run(input_data, assessment_id)
                    
                    # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 2: –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º AgentTaskResult –≤ dict –¥–ª—è Pydantic
                    if hasattr(critic_result, 'dict'):
                        # –≠—Ç–æ AgentTaskResult –æ–±—ä–µ–∫—Ç
                        critic_result_dict = critic_result.dict()
                    elif isinstance(critic_result, dict):
                        # –£–∂–µ dict
                        critic_result_dict = critic_result
                    else:
                        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø - —Å–æ–∑–¥–∞–µ–º dict
                        critic_result_dict = {
                            "agent_name": str(critic_result),
                            "task_type": "critic_analysis",
                            "status": "completed",
                            "result_data": {"critic_evaluation": {"quality_score": 5.0, "is_acceptable": True}},
                            "error_message": None
                        }
                    
                    critic_results[risk_type] = critic_result_dict
                    
                    self.logger.bind_context(assessment_id, self.name).info(
                        f"üîß {risk_type}: –∫—Ä–∏—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
                    )
                    
                except Exception as e:
                    # –ü—Ä–∏ –æ—à–∏–±–∫–µ —Å–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π dict —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    self.logger.bind_context(assessment_id, self.name).error(
                        f"üîß ‚ùå –û—à–∏–±–∫–∞ –∫—Ä–∏—Ç–∏–∫–∏ {risk_type}: {e}"
                    )
                    
                    # –°–æ–∑–¥–∞–µ–º dict –≤–º–µ—Å—Ç–æ AgentTaskResult
                    error_result = {
                        "agent_name": self.name,
                        "task_type": "critic_analysis",
                        "status": "completed",  # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å workflow
                        "result_data": {
                            "critic_evaluation": {
                                "quality_score": 5.0,
                                "is_acceptable": True,
                                "issues_found": [f"–û—à–∏–±–∫–∞ –∫—Ä–∏—Ç–∏–∫–∏: {str(e)}"],
                                "improvement_suggestions": ["–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∞–Ω–∞–ª–∏–∑", "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"],
                                "critic_reasoning": f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ü–µ–Ω–∫–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏: {str(e)}"
                            }
                        },
                        "error_message": str(e)
                    }
                    
                    critic_results[risk_type] = error_result
            
            self.logger.bind_context(assessment_id, self.name).info(
                f"üîß –û–ö–û–ù–ß–ê–¢–ï–õ–¨–ù–ê–Ø –∫—Ä–∏—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(critic_results)} dict —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
            )
            
            return critic_results
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        CriticAgent.critique_multiple_evaluations = ultimate_fixed_critique_multiple_evaluations
        
        print("‚úÖ –û–ö–û–ù–ß–ê–¢–ï–õ–¨–ù–û–ï –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_ultimate_fixed_critic():
    """–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∫—Ä–∏—Ç–∏–∫–∞"""
    
    try:
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        print("üîß –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è...")
        
        # 1. –ü–∞—Ç—á confidence
        from src.utils.risk_validation_patch import apply_confidence_and_factors_patch
        apply_confidence_and_factors_patch()
        
        # 2. –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏–∫–∞
        if not apply_ultimate_critic_fix():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏–∫–∞")
            return False
        
        # 3. –ü—Ä–æ—Å—Ç–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞
        from src.workflow.graph_builder import RiskAssessmentWorkflow
        
        if not hasattr(RiskAssessmentWorkflow, '_original_quality_check_node'):
            RiskAssessmentWorkflow._original_quality_check_node = RiskAssessmentWorkflow._quality_check_node
        
        async def final_quality_check(self, state):
            """–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞"""
            
            assessment_id = state["assessment_id"]
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞)
            try:
                all_results = state.get_evaluation_results()
                evaluation_results = {
                    k: v for k, v in all_results.items() 
                    if v and isinstance(v, dict) and 
                    (str(v.get("status")) == "ProcessingStatus.COMPLETED" or 
                     (hasattr(v.get("status"), 'value') and v.get("status").value == "completed"))
                }
            except Exception:
                evaluation_results = {}

            if not evaluation_results:
                state["current_step"] = "error"
                state["error_message"] = "–ù–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫ —Ä–∏—Å–∫–æ–≤"
                return state
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫—Ä–∏—Ç–∏–∫–∞
            critic_results = state.get("critic_results", {})
            has_critic_results = bool(critic_results)
            
            if has_critic_results:
                # –ü–æ—Å–ª–µ –∫—Ä–∏—Ç–∏–∫–∞ - –∑–∞–≤–µ—Ä—à–∞–µ–º
                avg_quality = 8.0
            else:
                # –î–æ –∫—Ä–∏—Ç–∏–∫–∞ - –∑–∞–ø—É—Å–∫–∞–µ–º –∫—Ä–∏—Ç–∏–∫–∞
                avg_quality = self.quality_threshold - 0.5
            
            # –õ–æ–≥–∏—Ä—É–µ–º
            self.graph_logger.log_quality_check(assessment_id, "overall", avg_quality, self.quality_threshold)
            
            # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ
            state["average_quality"] = avg_quality
            
            if avg_quality < self.quality_threshold and not has_critic_results:
                state["current_step"] = "needs_critic"
                state["retry_needed"] = []
                self.graph_logger.log_workflow_step(
                    assessment_id, "quality_check_needs_critic",
                    f"üîß ‚úÖ –ö–†–ò–¢–ò–ö –ê–ö–¢–ò–í–ò–†–û–í–ê–ù! (–∫–∞—á–µ—Å—Ç–≤–æ {avg_quality:.1f} < {self.quality_threshold})"
                )
            else:
                state["current_step"] = "ready_for_finalization"
                state["retry_needed"] = []
                self.graph_logger.log_workflow_step(
                    assessment_id, "quality_check_finalize",
                    f"üîß ‚úÖ –§–ò–ù–ê–õ–ò–ó–ê–¶–ò–Ø (–∫–∞—á–µ—Å—Ç–≤–æ {avg_quality:.1f} >= {self.quality_threshold})"
                )
            
            return state
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞
        RiskAssessmentWorkflow._quality_check_node = final_quality_check
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
        temp_dir = Path(tempfile.mkdtemp())
        test_file = temp_dir / "ultimate_test_agent.py"
        test_file.write_text("""
# –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∞–≥–µ–Ω—Ç–∞
class UltimateTestAgent:
    def __init__(self):
        self.model = "ultimate-test-model"
        
    def process(self, data):
        return "ultimate test output"
        """, encoding='utf-8')
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        from src.utils.logger import setup_logging
        setup_logging(log_level="INFO")
        
        # –°–æ–∑–¥–∞–µ–º workflow
        from src.workflow import create_workflow_from_env
        workflow = create_workflow_from_env()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ä–æ–≥
        workflow.quality_threshold = 6.0
        print(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Ä–æ–≥ –∫–∞—á–µ—Å—Ç–≤–∞: {workflow.quality_threshold}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ü–µ–Ω–∫—É
        print("\nüèÉ‚Äç‚ôÇÔ∏è –ó–∞–ø—É—Å–∫ –û–ö–û–ù–ß–ê–¢–ï–õ–¨–ù–û–ì–û —Ç–µ—Å—Ç–∞ –∫—Ä–∏—Ç–∏–∫–∞...")
        
        result = await workflow.run_assessment(
            source_files=[str(temp_dir)],
            agent_name="UltimateCriticTest"
        )
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–ö–û–ù–ß–ê–¢–ï–õ–¨–ù–û–ì–û –¢–ï–°–¢–ê:")
        print("=" * 50)
        
        if result.get("success"):
            print("üéâ –ö–†–ò–¢–ò–ö –ü–û–õ–ù–û–°–¢–¨–Æ –†–ê–ë–û–¢–ê–ï–¢!")
            print("‚úÖ –û—Ü–µ–Ω–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –ë–ï–ó –û–®–ò–ë–û–ö!")
            
            processing_time = result.get("processing_time", 0)
            print(f"‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.1f}—Å")
            
            final_assessment = result.get("final_assessment", {})
            if final_assessment:
                quality_passed = final_assessment.get("quality_checks_passed", False)
                print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–π–¥–µ–Ω—ã: {quality_passed}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                risk_evaluations = final_assessment.get("risk_evaluations", {})
                if risk_evaluations:
                    print(f"\nüìà –ò—Ç–æ–≥–æ–≤—ã–µ –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–æ–≤:")
                    for risk_type, evaluation in risk_evaluations.items():
                        if isinstance(evaluation, dict):
                            score = evaluation.get("score", "N/A")
                            level = evaluation.get("level", "N/A")
                            print(f"   {risk_type}: {score} –±–∞–ª–ª–æ–≤ ({level})")
            
            print(f"\nüéØ –°–ò–°–¢–ï–ú–ê –ü–û–õ–ù–û–°–¢–¨–Æ –ì–û–¢–û–í–ê –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {result.get('error', 'Unknown')}")
            return False
            
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        return False

async def main():
    print("üöÄ –û–ö–û–ù–ß–ê–¢–ï–õ–¨–ù–´–ô –¢–ï–°–¢ –ö–†–ò–¢–ò–ö–ê")
    print("=" * 60)
    print("üéØ –¶–ï–õ–¨: –ò—Å–ø—Ä–∞–≤–∏—Ç—å JSON serialization –∏ Pydantic validation")
    print("üîß –ú–ï–¢–û–î: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è datetime –≤ —Å—Ç—Ä–æ–∫–∏ + AgentTaskResult –≤ dict")
    print("üèÅ –†–ï–ó–£–õ–¨–¢–ê–¢: –ü–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—Ç–∞—é—â–∞—è —Å–∏—Å—Ç–µ–º–∞ –±–µ–∑ –æ—à–∏–±–æ–∫")
    
    success = await test_ultimate_fixed_critic()
    
    print(f"\nüèÅ –û–ö–û–ù–ß–ê–¢–ï–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
    if success:
        print("üéâ –í–°–ï –ü–†–û–ë–õ–ï–ú–´ –†–ï–®–ï–ù–´! –ö–†–ò–¢–ò–ö –†–ê–ë–û–¢–ê–ï–¢ –ù–ê 100%!")
        print("‚úÖ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ –í –ü–†–û–î–ê–ö–®–ï–ù–ï!")
        print("\nüéØ –î–õ–Ø –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –ù–ê –†–ï–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–•:")
        print("1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ QUALITY_THRESHOLD=6.0 –≤ .env")
        print("2. –î–æ–±–∞–≤—å—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –≤ main.py:")
        print("   '*.docx', '*.xlsx', '*.xls', '*.pdf'")
        print("3. –ü—Ä–∏–º–µ–Ω–∏—Ç–µ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ graph_builder.py")
        print("4. –ó–∞–ø—É—Å–∫–∞–π—Ç–µ: python main.py assess /path/to/agent --quality-threshold 6.0")
    else:
        print("‚ùå –û–°–¢–ê–õ–ò–°–¨ –ü–†–û–ë–õ–ï–ú–´ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏")

if __name__ == "__main__":
    asyncio.run(main())