# simple_test.py
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
"""

import asyncio
import tempfile
import os
from pathlib import Path

async def simple_test():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å –æ–¥–Ω–∏–º —Ñ–∞–π–ª–æ–º"""
    
    print("üß™ –ü–†–û–°–¢–û–ô –¢–ï–°–¢ –° –ú–ò–ù–ò–ú–ê–õ–¨–ù–´–ú–ò –î–ê–ù–ù–´–ú–ò")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω –ø—Ä–æ—Å—Ç–æ–π —Ñ–∞–π–ª –±–µ–∑ –∫–∏—Ç–∞–π—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
    with tempfile.NamedTemporaryFile(mode='w', suffix='.py', delete=False, encoding='utf-8') as f:
        f.write('''# simple_agent.py
class SimpleAgent:
    def __init__(self):
        self.name = "SimpleAgent"
        self.prompt = "You are a helpful assistant"
    
    def process(self, text):
        return f"Processed: {text}"
''')
        test_file = f.name
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º workflow
        import sys
        sys.path.insert(0, str(Path(__file__).parent / "src"))
        
        from src.workflow import create_workflow_from_env
        
        print("‚úÖ –ò–º–ø–æ—Ä—Ç—ã —É—Å–ø–µ—à–Ω—ã")
        
        # –°–æ–∑–¥–∞–µ–º workflow
        workflow = create_workflow_from_env()
        print("‚úÖ Workflow —Å–æ–∑–¥–∞–Ω")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ
        print(f"üìÑ –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: {test_file}")
        
        result = await workflow.run_assessment(
            source_files=[test_file],
            agent_name="SimpleTestAgent",
            assessment_id="simple_test_123"
        )
        
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢:")
        print(f"   Success: {result.get('success')}")
        print(f"   Assessment ID: {result.get('assessment_id')}")
        print(f"   Current Step: {result.get('current_step')}")
        print(f"   Processing Time: {result.get('processing_time', 0):.2f}—Å")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ë–î
        from src.models.database import get_db_manager
        
        db = await get_db_manager()
        
        # –°–º–æ—Ç—Ä–∏–º —á—Ç–æ –≤ –ë–î
        from sqlalchemy import text
        async with db.async_session() as session:
            result_count = await session.execute(text("SELECT COUNT(*) FROM risk_assessments"))
            count = result_count.scalar()
            
            print(f"\nüóÑÔ∏è –ë–ê–ó–ê –î–ê–ù–ù–´–•:")
            print(f"   –ó–∞–ø–∏—Å–µ–π –≤ risk_assessments: {count}")
            
            if count > 0:
                latest = await session.execute(text("SELECT id, overall_risk_level FROM risk_assessments ORDER BY assessment_timestamp DESC LIMIT 1"))
                row = latest.first()
                if row:
                    print(f"   –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å: {row[0][:8]}... - {row[1]}")
        
        await db.close()
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        try:
            os.unlink(test_file)
            print("üóëÔ∏è –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω")
        except:
            pass


if __name__ == "__main__":
    asyncio.run(simple_test())