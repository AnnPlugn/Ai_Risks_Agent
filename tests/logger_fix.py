# logger_fix.py
"""
–ë—ã—Å—Ç—Ä–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ LangGraphLogger
–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–π –º–µ—Ç–æ–¥ log_workflow_step
"""

import sys
from pathlib import Path

def fix_langgraph_logger():
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ LangGraphLogger –≤ logger.py"""
    print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ LangGraphLogger...")
    
    logger_file = Path("src/utils/logger.py")
    
    if logger_file.exists():
        content = logger_file.read_text(encoding='utf-8')
        
        # –ò—â–µ–º –∫–ª–∞—Å—Å LangGraphLogger
        if "class LangGraphLogger:" in content:
            # –ò—â–µ–º –º–µ—Ç–æ–¥ log_quality_check –∏ –¥–æ–±–∞–≤–ª—è–µ–º log_workflow_step –ø–æ—Å–ª–µ –Ω–µ–≥–æ
            quality_check_method = '''    def log_quality_check(self, assessment_id: str, risk_type: str, quality_score: float, threshold: float):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∫—Ä–∏—Ç–∏–∫–æ–º"""
        bound_logger = self.logger.bind_context(assessment_id, "quality_check")
        status = "‚úÖ –ø—Ä–æ–π–¥–µ–Ω–∞" if quality_score >= threshold else "‚ùå –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞"
        bound_logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ {risk_type}: {quality_score:.1f}/{threshold} - {status}")'''
            
            new_method = '''    def log_quality_check(self, assessment_id: str, risk_type: str, quality_score: float, threshold: float):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∫—Ä–∏—Ç–∏–∫–æ–º"""
        bound_logger = self.logger.bind_context(assessment_id, "quality_check")
        status = "‚úÖ –ø—Ä–æ–π–¥–µ–Ω–∞" if quality_score >= threshold else "‚ùå –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞"
        bound_logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ {risk_type}: {quality_score:.1f}/{threshold} - {status}")
    
    def log_workflow_step(self, assessment_id: str, step_name: str, details: str = ""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–≥–∞ workflow"""
        bound_logger = self.logger.bind_context(assessment_id, "workflow")
        message = f"‚öôÔ∏è Workflow —à–∞–≥: {step_name}"
        if details:
            message += f" - {details}"
        bound_logger.info(message)'''
            
            if quality_check_method in content and "def log_workflow_step" not in content:
                content = content.replace(quality_check_method, new_method)
                logger_file.write_text(content, encoding='utf-8')
                print("‚úÖ –ú–µ—Ç–æ–¥ log_workflow_step –¥–æ–±–∞–≤–ª–µ–Ω –≤ LangGraphLogger")
                return True
            elif "def log_workflow_step" in content:
                print("‚úÖ –ú–µ—Ç–æ–¥ log_workflow_step —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return True
            else:
                print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–µ—Å—Ç–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Ç–æ–¥–∞")
                return False
        else:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∫–ª–∞—Å—Å LangGraphLogger")
            return False
    else:
        print("‚ùå –§–∞–π–ª logger.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    print("üöÄ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï LOGGER")
    print("=" * 30)
    
    success = fix_langgraph_logger()
    
    if success:
        print("\n‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–ò–ú–ï–ù–ï–ù–û!")
        print("üöÄ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç:")
        print("   python quick_test_workflow.py")
    else:
        print("\n‚ùå –û–®–ò–ë–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø")
        print("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
    
    return success

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)