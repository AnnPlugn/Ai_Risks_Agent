# test_all_agents.py
"""
–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–æ–≤ (–≠—Ç–∞–ø 3)
–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ñ–∞–π–ª–µ—Ä, 6 –∞–≥–µ–Ω—Ç–æ–≤-–æ—Ü–µ–Ω—â–∏–∫–æ–≤ –∏ –∫—Ä–∏—Ç–∏–∫–∞
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src
sys.path.insert(0, str(Path(__file__).parent / "src"))

async def test_agent_imports():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤ –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤...")
    
    try:
        # –ë–∞–∑–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã
        from src.agents.base_agent import BaseAgent, AgentConfig, create_agent_config
        print("‚úÖ –ë–∞–∑–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã –∞–≥–µ–Ω—Ç–æ–≤ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –ü—Ä–æ—Ñ–∞–π–ª–µ—Ä
        from src.agents.profiler_agent import ProfilerAgent, create_profiler_agent
        print("‚úÖ –ü—Ä–æ—Ñ–∞–π–ª–µ—Ä-–∞–≥–µ–Ω—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        # –ê–≥–µ–Ω—Ç—ã-–æ—Ü–µ–Ω—â–∏–∫–∏
        from src.agents.evaluator_agents import (
            EthicalRiskEvaluator, StabilityRiskEvaluator, SecurityRiskEvaluator,
            AutonomyRiskEvaluator, RegulatoryRiskEvaluator, SocialRiskEvaluator,
            create_all_evaluator_agents
        )
        print("‚úÖ –í—Å–µ 6 –∞–≥–µ–Ω—Ç–æ–≤-–æ—Ü–µ–Ω—â–∏–∫–æ–≤ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –ö—Ä–∏—Ç–∏–∫
        from src.agents.critic_agent import CriticAgent, create_critic_agent
        print("‚úÖ –ö—Ä–∏—Ç–∏–∫-–∞–≥–µ–Ω—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∞–≥–µ–Ω—Ç–æ–≤: {e}")
        return False

async def test_agent_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤...")
    
    try:
        from src.agents.profiler_agent import create_profiler_agent
        from src.agents.evaluator_agents import create_all_evaluator_agents
        from src.agents.critic_agent import create_critic_agent
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∞–π–ª–µ—Ä
        profiler = create_profiler_agent()
        print(f"‚úÖ –ü—Ä–æ—Ñ–∞–π–ª–µ—Ä —Å–æ–∑–¥–∞–Ω: {profiler.name}")
        
        # –°–æ–∑–¥–∞–µ–º –≤—Å–µ—Ö –æ—Ü–µ–Ω—â–∏–∫–æ–≤
        evaluators = create_all_evaluator_agents()
        print(f"‚úÖ –ê–≥–µ–Ω—Ç—ã-–æ—Ü–µ–Ω—â–∏–∫–∏ —Å–æ–∑–¥–∞–Ω—ã: {len(evaluators)} —à—Ç—É–∫")
        
        for risk_type, evaluator in evaluators.items():
            print(f"   - {risk_type.value}: {evaluator.name}")
        
        # –°–æ–∑–¥–∞–µ–º –∫—Ä–∏—Ç–∏–∫–∞
        critic = create_critic_agent(quality_threshold=7.0)
        print(f"‚úÖ –ö—Ä–∏—Ç–∏–∫ —Å–æ–∑–¥–∞–Ω: {critic.name}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º health check (–µ—Å–ª–∏ LM Studio –¥–æ—Å—Ç—É–ø–µ–Ω)
        print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ LLM...")
        profiler_health = await profiler.health_check()
        print(f"‚úÖ –ü—Ä–æ—Ñ–∞–π–ª–µ—Ä health check: {'‚úÖ OK' if profiler_health else '‚ö†Ô∏è LM Studio –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}")
        
        return True, (profiler, evaluators, critic)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤: {e}")
        return False, None

async def test_profiler_workflow():
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ workflow –ø—Ä–æ—Ñ–∞–π–ª–µ—Ä–∞"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ workflow –ø—Ä–æ—Ñ–∞–π–ª–µ—Ä–∞...")
    
    try:
        from src.agents.profiler_agent import create_profiler_agent
        
        profiler = create_profiler_agent()
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ - –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∞–º –ø—Ä–æ–µ–∫—Ç
        test_input = {
            "source_files": [
                str(Path(__file__).parent / "src"),  # –ü–∞–ø–∫–∞ —Å –∫–æ–¥–æ–º
                "requirements.txt",  # –§–∞–π–ª –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
                "test_stage1.py"  # –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
            ],
            "agent_name": "AI_Risk_Assessment_System"
        }
        
        assessment_id = "test_full_workflow_001"
        
        print(f"üìÅ –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ: {len(test_input['source_files'])} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ñ–∞–π–ª–µ—Ä
        result = await profiler.run(test_input, assessment_id)
        
        if result.status.value == "completed":
            agent_profile = result.result_data["agent_profile"]
            print(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω: {agent_profile['name']}")
            print(f"‚úÖ –¢–∏–ø –∞–≥–µ–Ω—Ç–∞: {agent_profile['agent_type']}")
            print(f"‚úÖ –ê–≤—Ç–æ–Ω–æ–º–Ω–æ—Å—Ç—å: {agent_profile['autonomy_level']}")
            print(f"‚úÖ –î–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º: {agent_profile['data_access']}")
            
            return True, agent_profile
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è: {result.error_message}")
            return False, None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ workflow –ø—Ä–æ—Ñ–∞–π–ª–µ—Ä–∞: {e}")
        return False, None

async def test_evaluator_workflow(agent_profile):
    """–¢–µ—Å—Ç workflow –∞–≥–µ–Ω—Ç–æ–≤-–æ—Ü–µ–Ω—â–∏–∫–æ–≤"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ workflow –∞–≥–µ–Ω—Ç–æ–≤-–æ—Ü–µ–Ω—â–∏–∫–æ–≤...")
    
    try:
        from src.agents.evaluator_agents import create_all_evaluator_agents
        from src.models.risk_models import RiskType
        
        evaluators = create_all_evaluator_agents()
        assessment_id = "test_evaluators_001"
        
        evaluation_results = {}
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–≥–æ –æ—Ü–µ–Ω—â–∏–∫–∞
        for risk_type, evaluator in evaluators.items():
            print(f"üîç –û—Ü–µ–Ω–∫–∞ {risk_type.value}...")
            
            input_data = {"agent_profile": agent_profile}
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ü–µ–Ω—â–∏–∫–∞
            result = await evaluator.run(input_data, assessment_id)
            evaluation_results[risk_type] = result
            
            if result.status.value == "completed":
                risk_eval = result.result_data["risk_evaluation"]
                print(f"   ‚úÖ {risk_type.value}: {risk_eval['total_score']} –±–∞–ª–ª–æ–≤ ({risk_eval['risk_level']})")
            else:
                print(f"   ‚ùå {risk_type.value}: {result.error_message}")
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        successful = sum(1 for r in evaluation_results.values() if r.status.value == "completed")
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ü–µ–Ω–∫–∏: {successful}/{len(evaluators)} —É—Å–ø–µ—à–Ω–æ")
        
        return successful > 0, evaluation_results
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ workflow –æ—Ü–µ–Ω—â–∏–∫–æ–≤: {e}")
        return False, None

async def test_critic_workflow(evaluation_results, agent_profile):
    """–¢–µ—Å—Ç workflow –∫—Ä–∏—Ç–∏–∫-–∞–≥–µ–Ω—Ç–∞"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ workflow –∫—Ä–∏—Ç–∏–∫-–∞–≥–µ–Ω—Ç–∞...")
    
    try:
        from src.agents.critic_agent import create_critic_agent
        
        critic = create_critic_agent(quality_threshold=6.0)  # –ü–æ–Ω–∏–∂–µ–Ω–Ω—ã–π –ø–æ—Ä–æ–≥ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        assessment_id = "test_critic_001"
        
        # –ö—Ä–∏—Ç–∏–∫—É–µ–º –≤—Å–µ –æ—Ü–µ–Ω–∫–∏
        critic_results = await critic.critique_multiple_evaluations(
            evaluation_results=evaluation_results,
            agent_profile=agent_profile,
            assessment_id=assessment_id
        )
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫—Ä–∏—Ç–∏–∫–∏
        print(f"üîç –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ {len(critic_results)} –æ—Ü–µ–Ω–æ–∫...")
        
        acceptable_count = 0
        for risk_type, critic_result in critic_results.items():
            if critic_result.status.value == "completed":
                critic_eval = critic_result.result_data["critic_evaluation"]
                is_acceptable = critic_eval["is_acceptable"]
                quality_score = critic_eval["quality_score"]
                
                status = "‚úÖ –ø—Ä–∏–Ω—è—Ç–æ" if is_acceptable else "‚ùå –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ"
                print(f"   {risk_type.value}: {quality_score:.1f}/10 - {status}")
                
                if is_acceptable:
                    acceptable_count += 1
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–≤—Ç–æ—Ä–∞–º
        retry_needed = critic.get_retry_recommendations(critic_results)
        print(f"\nüìã –¢—Ä–µ–±—É—é—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ü–µ–Ω–∫–∏: {len(retry_needed)} –∏–∑ {len(critic_results)}")
        
        if retry_needed:
            print(f"   –†–∏—Å–∫–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞: {[rt.value for rt in retry_needed]}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –ø–æ –∫–∞—á–µ—Å—Ç–≤—É
        quality_report = critic.generate_improvement_report(critic_results)
        avg_quality = quality_report["assessment_summary"]["average_quality"]
        print(f"\nüìà –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: {avg_quality:.1f}/10")
        
        return True, critic_results
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ workflow –∫—Ä–∏—Ç–∏–∫–∞: {e}")
        return False, None

async def test_langgraph_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å LangGraph"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å LangGraph...")
    
    try:
        from src.agents.profiler_agent import create_profiler_node_function, create_profiler_agent
        from src.agents.evaluator_agents import create_evaluator_nodes_for_langgraph, create_all_evaluator_agents
        from src.agents.critic_agent import create_critic_node_function, create_quality_check_router, create_critic_agent
        
        # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–æ–≤
        profiler = create_profiler_agent()
        evaluators = create_all_evaluator_agents()
        critic = create_critic_agent()
        
        # –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ —É–∑–ª–æ–≤ –¥–ª—è LangGraph
        profiler_node = create_profiler_node_function(profiler)
        evaluator_nodes = create_evaluator_nodes_for_langgraph(evaluators)
        critic_node = create_critic_node_function(critic)
        quality_router = create_quality_check_router(quality_threshold=6.0)
        
        print(f"‚úÖ –£–∑–ª—ã LangGraph —Å–æ–∑–¥–∞–Ω—ã:")
        print(f"   - –ü—Ä–æ—Ñ–∞–π–ª–µ—Ä: {profiler_node.__name__}")
        print(f"   - –û—Ü–µ–Ω—â–∏–∫–∏: {len(evaluator_nodes)} —É–∑–ª–æ–≤")
        print(f"   - –ö—Ä–∏—Ç–∏–∫: {critic_node.__name__}")
        print(f"   - –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä: {quality_router.__name__}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ workflow
        test_state = {
            "assessment_id": "test_langgraph_001",
            "source_files": ["test_stage1.py"],
            "preliminary_agent_name": "TestAgent",
            "max_retries": 2,
            "retry_count": {}
        }
        
        print(f"\nüîÑ –°–∏–º—É–ª—è—Ü–∏—è workflow —Å–æ—Å—Ç–æ—è–Ω–∏—è...")
        
        # –≠–º—É–ª–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ö–æ–¥ —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–µ—Ä–µ–∑ –ø—Ä–æ—Ñ–∞–π–ª–µ—Ä
        state_after_profiler = await profiler_node(test_state)
        print(f"   ‚úÖ –ü–æ—Å–ª–µ –ø—Ä–æ—Ñ–∞–π–ª–µ—Ä–∞: —à–∞–≥ = {state_after_profiler.get('current_step')}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é
        if "agent_profile" in state_after_profiler:
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫—Ä–∏—Ç–∏–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
            state_after_profiler["retry_needed"] = []
            route = quality_router(state_after_profiler)
            print(f"   ‚úÖ –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è: {route}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ LangGraph: {e}")
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ü–û–õ–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–ì–ï–ù–¢–û–í –°–ò–°–¢–ï–ú–´ –û–¶–ï–ù–ö–ò –†–ò–°–ö–û–í")
    print("=" * 70)
    
    success = True
    
    # 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã
    success &= await test_agent_imports()
    
    # 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤
    creation_success, agents = await test_agent_creation()
    success &= creation_success
    
    if not creation_success:
        print("\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞–≥–µ–Ω—Ç–æ–≤")
        return False
    
    # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º workflow –ø—Ä–æ—Ñ–∞–π–ª–µ—Ä–∞
    profiler_success, agent_profile = await test_profiler_workflow()
    success &= profiler_success
    
    if not profiler_success:
        print("\n‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –ø—Ä–æ—Ñ–∞–π–ª–µ—Ä–∞")
        return False
    
    # 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º workflow –æ—Ü–µ–Ω—â–∏–∫–æ–≤
    evaluator_success, evaluation_results = await test_evaluator_workflow(agent_profile)
    success &= evaluator_success
    
    if evaluator_success and evaluation_results:
        # 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º workflow –∫—Ä–∏—Ç–∏–∫–∞
        critic_success, critic_results = await test_critic_workflow(evaluation_results, agent_profile)
        success &= critic_success
    
    # 6. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å LangGraph
    success &= await test_langgraph_integration()
    
    print("\n" + "=" * 70)
    if success:
        print("üéâ –í–°–ï –ê–ì–ï–ù–¢–´ –†–ê–ë–û–¢–ê–Æ–¢ –£–°–ü–ï–®–ù–û!")
        print("\nüìã –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ:")
        print("‚úÖ –ë–∞–∑–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã –∞–≥–µ–Ω—Ç–æ–≤")
        print("‚úÖ –ü—Ä–æ—Ñ–∞–π–ª–µ—Ä-–∞–≥–µ–Ω—Ç (—Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö)")
        print("‚úÖ 6 –∞–≥–µ–Ω—Ç–æ–≤-–æ—Ü–µ–Ω—â–∏–∫–æ–≤ —Ä–∏—Å–∫–æ–≤")
        print("‚úÖ –ö—Ä–∏—Ç–∏–∫-–∞–≥–µ–Ω—Ç (–∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞)")
        print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å LangGraph")
        print("\nüöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Å–æ–∑–¥–∞–Ω–∏—é workflow!")
    else:
        print("‚ùå –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´ –° –ê–ì–ï–ù–¢–ê–ú–ò")
        print("\nüîß –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("- LM Studio –Ω–µ –∑–∞–ø—É—â–µ–Ω –Ω–∞ localhost:1234")
        print("- –ú–æ–¥–µ–ª—å qwen3-4b –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        print("- –û—à–∏–±–∫–∏ –≤ –ø—Ä–æ–º–ø—Ç–∞—Ö –∏–ª–∏ –ª–æ–≥–∏–∫–µ –∞–≥–µ–Ω—Ç–æ–≤")
        print("- –ü—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏")
    
    return success

if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1)