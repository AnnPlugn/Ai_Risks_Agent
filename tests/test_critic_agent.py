# test_critic_agent.py
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–∞-–∫—Ä–∏—Ç–∏–∫–∞
–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫—Ä–∏—Ç–∏–∫–∞ —Å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
"""

import sys
import asyncio
import json
import tempfile
from pathlib import Path
from typing import Dict, Any, Optional
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src
sys.path.insert(0, str(Path(__file__).parent / "src"))

def create_test_agent_files() -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏"""
    print("üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –∞–≥–µ–Ω—Ç–∞...")
    
    temp_dir = Path(tempfile.mkdtemp())
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –∞–≥–µ–Ω—Ç–∞ —Å —É–º–µ—Ä–µ–Ω–Ω—ã–º–∏ —Ä–∏—Å–∫–∞–º–∏
    agent_file = temp_dir / "test_agent.py"
    agent_code = '''"""
–¢–µ—Å—Ç–æ–≤—ã–π –±–∞–Ω–∫–æ–≤—Å–∫–∏–π –ò–ò-–∞–≥–µ–Ω—Ç
"""

class BankingAssistant:
    def __init__(self):
        self.model = "gpt-4"
        self.temperature = 0.1
        self.system_prompt = """
        –¢—ã - –±–∞–Ω–∫–æ–≤—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. 
        –ü–æ–º–æ–≥–∞–µ—à—å –∫–ª–∏–µ–Ω—Ç–∞–º —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –±–∞–Ω–∫–æ–≤—Å–∫–∏–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏.
        –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:
        - –ù–µ —Ä–∞–∑–≥–ª–∞—à–∞–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        - –¢—Ä–µ–±—É–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å–≤—ã—à–µ 10,000 —Ä—É–±
        """
    
    def handle_request(self, user_input: str) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –ë–∞–∑–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–æ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        if "–±–∞–ª–∞–Ω—Å" in user_input.lower():
            return "–í–∞—à –±–∞–ª–∞–Ω—Å: 50,000 —Ä—É–±"
        elif "–ø–µ—Ä–µ–≤–æ–¥" in user_input.lower():
            return "–ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω"
        else:
            return "–ö–∞–∫ –º–æ–≥—É –ø–æ–º–æ—á—å?"
    
    def access_customer_data(self, customer_id: str):
        """–î–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞ - –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫"""
        # –í–ù–ò–ú–ê–ù–ò–ï: –Ω–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        return {"balance": 50000, "name": "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤"}
'''
    
    agent_file.write_text(agent_code, encoding='utf-8')
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config_file = temp_dir / "config.json"
    config_data = {
        "agent_name": "TestBankingAssistant",
        "model": "gpt-4",
        "temperature": 0.1,
        "max_tokens": 2048,
        "system_prompt": "–¢—ã –±–∞–Ω–∫–æ–≤—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç",
        "guardrails": [
            "–ù–µ —Ä–∞–∑–≥–ª–∞—à–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
            "–¢—Ä–µ–±—É–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π"
        ],
        "data_access": ["customer_profiles", "account_balances"],
        "autonomy_level": "semi_autonomous"
    }
    
    config_file.write_text(json.dumps(config_data, ensure_ascii=False, indent=2), encoding='utf-8')
    
    # –°–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ä–∏—Å–∫–æ–≤
    doc_file = temp_dir / "agent_description.txt"
    doc_content = """–ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ò–ò-–∞–≥–µ–Ω—Ç TestBankingAssistant

–û–ü–ò–°–ê–ù–ò–ï:
–ê–≥–µ–Ω—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ø–æ–º–æ—â–∏ –∫–ª–∏–µ–Ω—Ç–∞–º –±–∞–Ω–∫–∞ –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–∑–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π.
–ò–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏.

–§–£–ù–ö–¶–ò–ò:
- –ü–æ–∫–∞–∑ –±–∞–ª–∞–Ω—Å–∞ —Å—á–µ—Ç–∞
- –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –º–µ–∂–¥—É —Å—á–µ—Ç–∞–º–∏
- –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ –±–∞–Ω–∫–æ–≤—Å–∫–∏–º –ø—Ä–æ–¥—É–∫—Ç–∞–º
- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∂–∞–ª–æ–± –∫–ª–∏–µ–Ω—Ç–æ–≤

–¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò:
- –ú–æ–¥–µ–ª—å: GPT-4
- –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: 0.1
- –ú–∞–∫—Å–∏–º—É–º —Ç–æ–∫–µ–Ω–æ–≤: 2048
- –î–æ—Å—Ç—É–ø –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: –î–ê
- –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π: –î–ê

–ú–ï–†–´ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò:
- –¢—Ä–µ–±—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å–≤—ã—à–µ 10,000 —Ä—É–±
- –ù–µ –¥–æ–ª–∂–µ–Ω —Ä–∞–∑–≥–ª–∞—à–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
- –í–µ–¥–µ—Ç –ª–æ–≥–∏ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π

–ò–ó–í–ï–°–¢–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:
- –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç—Ä–æ–≥–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
- –ù–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–æ–≤
- –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
"""
    
    doc_file.write_text(doc_content, encoding='utf-8')
    
    print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã –≤: {temp_dir}")
    print(f"   - {agent_file.name}")
    print(f"   - {config_file.name}")
    print(f"   - {doc_file.name}")
    
    return str(temp_dir)

async def test_full_workflow_with_critic(
    agent_path: str, 
    quality_threshold: float = 5.0,
    force_critic: bool = True
) -> Dict[str, Any]:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ workflow —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º –∑–∞–ø—É—Å–∫–æ–º –∫—Ä–∏—Ç–∏–∫–∞"""
    
    print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ workflow —Å –ø–æ—Ä–æ–≥–æ–º –∫–∞—á–µ—Å—Ç–≤–∞: {quality_threshold}")
    print(f"üîç –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –∫—Ä–∏—Ç–∏–∫–∞: {force_critic}")
    
    try:
        from src.workflow import create_workflow_from_env
        from src.utils.logger import setup_logging
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        setup_logging()
        
        # –°–æ–∑–¥–∞–µ–º workflow
        workflow = create_workflow_from_env()
        
        # –í–ê–ñ–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∏–∑–∫–∏–π –ø–æ—Ä–æ–≥ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∫—Ä–∏—Ç–∏–∫–∞
        if force_critic:
            workflow.quality_threshold = quality_threshold
            print(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Ä–æ–≥ –∫–∞—á–µ—Å—Ç–≤–∞: {workflow.quality_threshold}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ü–µ–Ω–∫—É
        result = await workflow.run_assessment(
            source_files=[agent_path],
            agent_name="TestBankingAssistant"
        )
        
        return result
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ workflow: {e}")
        import traceback
        traceback.print_exc()
        return {"error": str(e)}

async def test_critic_agent_directly():
    """–ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞-–∫—Ä–∏—Ç–∏–∫–∞"""
    print("\nü§ñ –ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞-–∫—Ä–∏—Ç–∏–∫–∞...")
    
    try:
        from src.agents.critic_agent import create_critic_agent
        from src.models.risk_models import RiskType
        
        # –°–æ–∑–¥–∞–µ–º –∫—Ä–∏—Ç–∏–∫–∞ —Å –Ω–∏–∑–∫–∏–º –ø–æ—Ä–æ–≥–æ–º –∫–∞—á–µ—Å—Ç–≤–∞
        critic = create_critic_agent(quality_threshold=5.0)
        print(f"‚úÖ –ö—Ä–∏—Ç–∏–∫ —Å–æ–∑–¥–∞–Ω —Å –ø–æ—Ä–æ–≥–æ–º –∫–∞—á–µ—Å—Ç–≤–∞: {critic.quality_threshold}")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –æ—Ü–µ–Ω–∫—É —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏ –∫–∞—á–µ—Å—Ç–≤–∞
        test_evaluation = {
            "probability_score": 3,
            "impact_score": 3,
            "total_score": 9,
            "risk_level": "medium",
            "probability_reasoning": "–ö–æ—Ä–æ—Ç–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ",  # –ü–ª–æ—Ö–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
            "impact_reasoning": "–û—á–µ–Ω—å –∫—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ",  # –ü–ª–æ—Ö–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ  
            "key_factors": ["–æ–±—â–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã"],  # –ù–µ–∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ
            "recommendations": ["—É–ª—É—á—à–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å"],  # –°–ª–∏—à–∫–æ–º –æ–±—â–µ–µ
            "confidence_level": 0.6
        }
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–≥–µ–Ω—Ç–∞
        agent_data = {
            "agent_name": "TestBankingAssistant",
            "description": "–ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç",
            "technical_specs": {"model": "gpt-4"},
            "data_access": ["customer_data"],
            "autonomy_level": "semi_autonomous"
        }
        
        print("üîç –ó–∞–ø—É—Å–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—Ü–µ–Ω–∫–∏...")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
        critic_result = await critic.evaluate_quality(
            risk_type=RiskType.SECURITY,
            original_evaluation=test_evaluation,
            agent_data=agent_data,
            quality_threshold=5.0
        )
        
        print(f"‚úÖ –ö—Ä–∏—Ç–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª –∞–Ω–∞–ª–∏–∑")
        print(f"   –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: {critic_result.get('quality_score', 'N/A')}/10")
        print(f"   –ü—Ä–∏–µ–º–ª–µ–º–æ: {critic_result.get('is_acceptable', 'N/A')}")
        print(f"   –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {len(critic_result.get('issues_found', []))}")
        print(f"   –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {len(critic_result.get('improvement_suggestions', []))}")
        
        return critic_result
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫—Ä–∏—Ç–∏–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return None

async def test_confidence_manipulation():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏ —É—Ä–æ–≤–Ω—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫—Ä–∏—Ç–∏–∫–∞"""
    print("\n‚öôÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫—Ä–∏—Ç–∏–∫–∞...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ç—á –¥–ª—è –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏ confidence_level
        from src.utils.risk_validation_patch import apply_confidence_and_factors_patch
        
        print("üîß –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—á –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏...")
        apply_confidence_and_factors_patch()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        agent_path = create_test_agent_files()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º workflow —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –Ω–∏–∑–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é
        result = await test_full_workflow_with_critic(
            agent_path, 
            quality_threshold=6.0,  # –°—Ä–µ–¥–Ω–∏–π –ø–æ—Ä–æ–≥
            force_critic=True
        )
        
        return result
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: {e}")
        import traceback
        traceback.print_exc()
        return None

def analyze_critic_activation_logic():
    """–ê–Ω–∞–ª–∏–∑ –ª–æ–≥–∏–∫–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫—Ä–∏—Ç–∏–∫–∞"""
    print("\nüîç –ê–ù–ê–õ–ò–ó –õ–û–ì–ò–ö–ò –ê–ö–¢–ò–í–ê–¶–ò–ò –ö–†–ò–¢–ò–ö–ê")
    print("=" * 50)
    
    print("–ö—Ä–∏—Ç–∏–∫ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö:")
    print("1. average_quality < quality_threshold")
    print("2. quality_threshold –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é = 7.0")
    print("3. –ï—Å–ª–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∞–≥–µ–Ω—Ç–æ–≤ >= 75%, —Ç–æ average_quality >= 7.5")
    print("4. –ó–Ω–∞—á–∏—Ç, –∫—Ä–∏—Ç–∏–∫ –ù–ï –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏")
    
    print("\n–°–ü–û–°–û–ë–´ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ì–û –ó–ê–ü–£–°–ö–ê –ö–†–ò–¢–ò–ö–ê:")
    print("A) –°–Ω–∏–∑–∏—Ç—å QUALITY_THRESHOLD –≤ .env –¥–æ 6.0 –∏–ª–∏ –Ω–∏–∂–µ")
    print("B) –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–∞—Ç—á –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–Ω–∏–∂–µ–Ω–∏—è confidence_level")
    print("C) –ü–µ—Ä–µ–¥–∞—Ç—å --quality-threshold –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ")
    print("D) –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –≤ graph_builder.py")
    
    print("\n–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å QUALITY_THRESHOLD=5.0 –≤ .env")
    print("2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å --quality-threshold 5.0 –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ")
    print("3. –°–æ–∑–¥–∞—Ç—å –∞–≥–µ–Ω—Ç–∞ —Å –∑–∞–≤–µ–¥–æ–º–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–º–∏ –æ—Ü–µ–Ω–∫–∞–º–∏")

def modify_env_for_critic_testing():
    """–í—Ä–µ–º–µ–Ω–Ω–∞—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫—Ä–∏—Ç–∏–∫–∞"""
    print("\n‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫—Ä–∏—Ç–∏–∫–∞...")
    
    env_file = Path(".env")
    backup_file = Path(".env.backup")
    
    # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø .env —Ñ–∞–π–ª–∞
    if env_file.exists():
        import shutil
        shutil.copy2(env_file, backup_file)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø: {backup_file}")
    
    # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    new_settings = {
        "QUALITY_THRESHOLD": "5.0",  # –ù–∏–∑–∫–∏–π –ø–æ—Ä–æ–≥ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∫—Ä–∏—Ç–∏–∫–∞
        "MAX_RETRY_COUNT": "2",
        "LLM_TEMPERATURE": "0.2"  # –ß—É—Ç—å –±–æ–ª—å—à–µ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏
    }
    
    try:
        # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π .env
        env_content = {}
        if env_file.exists():
            with open(env_file, 'r', encoding='utf-8') as f:
                for line in f:
                    line = line.strip()
                    if line and not line.startswith('#') and '=' in line:
                        key, value = line.split('=', 1)
                        env_content[key.strip()] = value.strip()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        env_content.update(new_settings)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π .env
        with open(env_file, 'w', encoding='utf-8') as f:
            f.write("# –í—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫—Ä–∏—Ç–∏–∫–∞\n")
            for key, value in env_content.items():
                f.write(f"{key}={value}\n")
        
        print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫—Ä–∏—Ç–∏–∫–∞:")
        for key, value in new_settings.items():
            print(f"   {key}={value}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ .env: {e}")
        return False

def restore_env_backup():
    """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±—ç–∫–∞–ø–∞ .env —Ñ–∞–π–ª–∞"""
    env_file = Path(".env")
    backup_file = Path(".env.backup")
    
    if backup_file.exists():
        import shutil
        shutil.copy2(backup_file, env_file)
        backup_file.unlink()  # –£–¥–∞–ª—è–µ–º –±—ç–∫–∞–ø
        print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ .env –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ –±—ç–∫–∞–ø–∞")
        return True
    else:
        print("‚ö†Ô∏è –ë—ç–∫–∞–ø .env –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False

async def comprehensive_critic_test():
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏–∫–∞"""
    print("\nüéØ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–ì–ï–ù–¢–ê-–ö–†–ò–¢–ò–ö–ê")
    print("=" * 60)
    
    results = {}
    
    try:
        # 1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        analyze_critic_activation_logic()
        
        # 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏–∫–∞ –Ω–∞–ø—Ä—è–º—É—é
        print("\n" + "="*30)
        direct_result = await test_critic_agent_directly()
        results['direct_test'] = direct_result
        
        # 3. –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
        print("\n" + "="*30)
        env_modified = modify_env_for_critic_testing()
        
        if env_modified:
            # 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–µ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            print("\n" + "="*30)
            confidence_result = await test_confidence_manipulation()
            results['confidence_test'] = confidence_result
            
            # 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π workflow
            print("\n" + "="*30)
            agent_path = create_test_agent_files()
            workflow_result = await test_full_workflow_with_critic(
                agent_path,
                quality_threshold=5.0,
                force_critic=True
            )
            results['workflow_test'] = workflow_result
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            restore_env_backup()
        
        return results
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        
        # –í—Å–µ–≥–¥–∞ –ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        restore_env_backup()
        
        return {"error": str(e)}

def generate_critic_test_report(results: Dict[str, Any]):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫—Ä–∏—Ç–∏–∫–∞"""
    print("\nüìä –û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò –ê–ì–ï–ù–¢–ê-–ö–†–ò–¢–ò–ö–ê")
    print("=" * 60)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä—è–º–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    direct_test = results.get('direct_test')
    if direct_test:
        print("‚úÖ –ü–†–Ø–ú–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–†–ò–¢–ò–ö–ê:")
        print(f"   –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: {direct_test.get('quality_score', 'N/A')}/10")
        print(f"   –ü—Ä–∏–µ–º–ª–µ–º–æ—Å—Ç—å: {direct_test.get('is_acceptable', 'N/A')}")
        
        issues = direct_test.get('issues_found', [])
        print(f"   –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {len(issues)}")
        for i, issue in enumerate(issues[:3], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
            print(f"     {i}. {issue}")
        
        suggestions = direct_test.get('improvement_suggestions', [])
        print(f"   –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {len(suggestions)}")
        for i, suggestion in enumerate(suggestions[:3], 1):
            print(f"     {i}. {suggestion}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã workflow
    workflow_test = results.get('workflow_test')
    if workflow_test and not workflow_test.get('error'):
        print("\n‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ß–ï–†–ï–ó WORKFLOW:")
        print(f"   –£—Å–ø–µ—Ö: {workflow_test.get('success', False)}")
        
        final_assessment = workflow_test.get('final_assessment', {})
        if final_assessment:
            quality_passed = final_assessment.get('quality_checks_passed', False)
            print(f"   –ü—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–π–¥–µ–Ω—ã: {quality_passed}")
            
            processing_time = workflow_test.get('processing_time', 0)
            print(f"   –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.1f}—Å")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –ü–†–û–î–ê–ö–®–ï–ù–ê:")
    
    critic_worked = bool(direct_test and direct_test.get('quality_score') is not None)
    
    if critic_worked:
        print("‚úÖ –ö—Ä–∏—Ç–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("üìã –î–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∫—Ä–∏—Ç–∏–∫–∞ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ:")
        print("   1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ QUALITY_THRESHOLD=6.0 –≤ .env")
        print("   2. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ --quality-threshold 6.0 –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ")
        print("   3. –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –ª–æ–≥–∏ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –∫—Ä–∏—Ç–∏–∫–∞")
    else:
        print("‚ùå –ö—Ä–∏—Ç–∏–∫ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –æ–∂–∏–¥–∞–µ—Ç—Å—è")
        print("üîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
        print("   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ LLM")
        print("   2. –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–æ–º–ø—Ç–æ–≤ –∫—Ä–∏—Ç–∏–∫–∞")
        print("   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–∫—É –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤ graph_builder.py")
    
    print("\nüìà –ù–ê–°–¢–†–û–ô–ö–ò –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ù–ê –†–ï–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–•:")
    print("   python main.py assess /path/to/agent --quality-threshold 6.0")
    print("   python main.py assess /path/to/agent --quality-threshold 5.0")
    print("   python main.py assess /path/to/agent --quality-threshold 4.0")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫—Ä–∏—Ç–∏–∫–∞"""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–ì–ï–ù–¢–ê-–ö–†–ò–¢–ò–ö–ê")
    print("=" * 50)
    print("–¶–µ–ª—å: –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –∫—Ä–∏—Ç–∏–∫ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    print("–ü—Ä–æ–±–ª–µ–º–∞: –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∞–≥–µ–Ω—Ç–æ–≤ –Ω–µ –ø–∞–¥–∞–µ—Ç –Ω–∏–∂–µ 75%, –∫—Ä–∏—Ç–∏–∫ –Ω–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç")
    print("–†–µ—à–µ–Ω–∏–µ: –ü–æ–Ω–∏–∑–∏—Ç—å –ø–æ—Ä–æ–≥ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        results = await comprehensive_critic_test()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        generate_critic_test_report(results)
        
        print("\nüèÅ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å
        direct_success = results.get('direct_test') is not None
        workflow_success = (results.get('workflow_test', {}).get('success', False) and 
                          not results.get('workflow_test', {}).get('error'))
        
        if direct_success and workflow_success:
            print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
            return True
        elif direct_success:
            print("‚ö†Ô∏è –ö—Ä–∏—Ç–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å workflow")
            return True
        else:
            print("‚ùå –ö–†–ò–¢–ò–ö –ù–ï –†–ê–ë–û–¢–ê–ï–¢ –ö–û–†–†–ï–ö–¢–ù–û")
            return False
            
    except Exception as e:
        print(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = asyncio.run(main())