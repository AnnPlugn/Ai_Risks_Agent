# test_complete_workflow.py
"""
–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç workflow —Å–∏—Å—Ç–µ–º—ã –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–æ–≤ (–≠—Ç–∞–ø 4)
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–µ—Å—å —Ü–∏–∫–ª –æ—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –¥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
"""

import asyncio
import sys
import tempfile
import json
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src
sys.path.insert(0, str(Path(__file__).parent / "src"))

async def test_workflow_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è workflow"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è LangGraph workflow...")
    
    try:
        from src.workflow import create_workflow_from_env
        
        # –°–æ–∑–¥–∞–µ–º workflow
        workflow = create_workflow_from_env()
        
        print(f"‚úÖ Workflow —Å–æ–∑–¥–∞–Ω: {workflow.__class__.__name__}")
        print(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≥–µ–Ω—Ç–æ–≤: –ü—Ä–æ—Ñ–∞–π–ª–µ—Ä + {len(workflow.evaluators)} –æ—Ü–µ–Ω—â–∏–∫–æ–≤ + –ö—Ä–∏—Ç–∏–∫")
        print(f"‚úÖ –ü–æ—Ä–æ–≥ –∫–∞—á–µ—Å—Ç–≤–∞: {workflow.quality_threshold}")
        print(f"‚úÖ –ú–∞–∫—Å–∏–º—É–º –ø–æ–≤—Ç–æ—Ä–æ–≤: {workflow.max_retries}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞—Ñ
        print(f"‚úÖ LangGraph —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω: {workflow.graph is not None}")
        
        return True, workflow
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è workflow: {e}")
        return False, None

async def test_health_checks(workflow):
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ health checks...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ñ–∞–π–ª–µ—Ä
        profiler_health = await workflow.profiler.health_check()
        print(f"‚úÖ –ü—Ä–æ—Ñ–∞–π–ª–µ—Ä health check: {'‚úÖ' if profiler_health else '‚ö†Ô∏è LM Studio –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ü–µ–Ω—â–∏–∫–æ–≤
        healthy_evaluators = 0
        for risk_type, evaluator in workflow.evaluators.items():
            evaluator_health = await evaluator.health_check()
            if evaluator_health:
                healthy_evaluators += 1
        
        print(f"‚úÖ –û—Ü–µ–Ω—â–∏–∫–∏ health check: {healthy_evaluators}/{len(workflow.evaluators)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏–∫–∞
        critic_health = await workflow.critic.health_check()
        print(f"‚úÖ –ö—Ä–∏—Ç–∏–∫ health check: {'‚úÖ' if critic_health else '‚ö†Ô∏è LM Studio –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}")
        
        return profiler_health and healthy_evaluators > 0 and critic_health
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ health checks: {e}")
        return False

async def create_test_files():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è workflow"""
    print("\nüß™ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤...")
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    temp_dir = Path(tempfile.mkdtemp())
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–¥ –∞–≥–µ–Ω—Ç–∞
    agent_code = '''# test_banking_agent.py
"""
–¢–µ—Å—Ç–æ–≤—ã–π –±–∞–Ω–∫–æ–≤—Å–∫–∏–π –∞–≥–µ–Ω—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–æ–≤
"""

class BankingAssistant:
    def __init__(self):
        self.name = "BankingAssistant"
        self.version = "2.1"
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        self.system_prompt = """
        –¢—ã - –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –±–∞–Ω–∫–∞ "–¢–µ—Å—Ç-–ë–∞–Ω–∫".
        –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø–æ–º–æ–≥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞–º —Å –±–∞–Ω–∫–æ–≤—Å–∫–∏–º–∏ —É—Å–ª—É–≥–∞–º–∏.
        
        –¢–≤–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
        - –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö –±–∞–Ω–∫–∞
        - –ü–æ–º–æ–≥–∞—Ç—å —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –ø–æ –º–æ–±–∏–ª—å–Ω–æ–º—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
        - –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —É—Å–ª—É–≥–∞—Ö
        
        –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:
        - –ù–ò–ö–û–ì–î–ê –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–π –ø–∞—Ä–æ–ª–∏ –∏–ª–∏ PIN-–∫–æ–¥—ã
        - –ù–ï –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–π –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –¥–µ–Ω—å–≥–∞–º–∏ –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        - –ù–ï —Ä–∞—Å–∫—Ä—ã–≤–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥—Ä—É–≥–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
        - –ù–∞–ø—Ä–∞–≤–ª—è–π —Å–ª–æ–∂–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º
        - –ü—Ä–∏ –ø–æ–¥–æ–∑—Ä–µ–Ω–∏–∏ –Ω–∞ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ - –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏ –∫–ª–∏–µ–Ω—Ç–∞
        """
        
        self.guardrails = [
            "–ù–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –ø–∞—Ä–æ–ª–∏ –∏ PIN-–∫–æ–¥—ã",
            "–ù–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –¥–µ–Ω–µ–∂–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", 
            "–ó–∞—â–∏—â–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–æ–≤",
            "–ù–∞–ø—Ä–∞–≤–ª—è—Ç—å —Å–ª–æ–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º"
        ]
    
    def process_user_query(self, query: str, user_id: str) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        query_lower = query.lower()
        
        if any(word in query_lower for word in ['–±–∞–ª–∞–Ω—Å', '—Å—á–µ—Ç', '–æ—Å—Ç–∞—Ç–æ–∫']):
            return "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å –º–æ–∂–Ω–æ –≤ –º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ú–æ–∏ —Å—á–µ—Ç–∞'"
        
        elif any(word in query_lower for word in ['–∫—Ä–µ–¥–∏—Ç', '–∑–∞–π–º', '–∏–ø–æ—Ç–µ–∫–∞']):
            return "–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –∫—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∫—Ä–µ–¥–∏—Ç–Ω–æ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É"
        
        elif any(word in query_lower for word in ['–∫–∞—Ä—Ç–∞', '–ø–ª–∞—Ç–µ–∂', '–ø–µ—Ä–µ–≤–æ–¥']):
            return "–û–ø–µ—Ä–∞—Ü–∏–∏ —Å –∫–∞—Ä—Ç–∞–º–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –±–∞–Ω–∫–æ–º–∞—Ç"
        
        else:
            return "–ö–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å–µ–≥–æ–¥–Ω—è? –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –≤–∞—à–µ–º –≤–æ–ø—Ä–æ—Å–µ."
    
    def get_available_products(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
        return [
            "–†–∞—Å—á–µ—Ç–Ω—ã–µ —Å—á–µ—Ç–∞",
            "–°–±–µ—Ä–µ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –≤–∫–ª–∞–¥—ã", 
            "–ö—Ä–µ–¥–∏—Ç–Ω—ã–µ –∫–∞—Ä—Ç—ã",
            "–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–∏–µ –∫—Ä–µ–¥–∏—Ç—ã",
            "–ò–ø–æ—Ç–µ—á–Ω–æ–µ –∫—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–∏–µ",
            "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã"
        ]

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    assistant = BankingAssistant()
    print(f"–ó–∞–ø—É—â–µ–Ω {assistant.name} v{assistant.version}")
'''
    
    # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞
    agent_docs = '''–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: –ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫

–û–ë–©–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø
–ù–∞–∑–≤–∞–Ω–∏–µ: BankingAssistant
–í–µ—Ä—Å–∏—è: 2.1
–¢–∏–ø –∞–≥–µ–Ω—Ç–∞: –ß–∞—Ç-–±–æ—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: 2024-12-14

–ù–ê–ó–ù–ê–ß–ï–ù–ò–ï –ò –§–£–ù–ö–¶–ò–ò
–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–≤–∏—á–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –±–∞–Ω–∫–∞.

–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ –±–∞–Ω–∫–æ–≤—Å–∫–∏–º –ø—Ä–æ–¥—É–∫—Ç–∞–º –∏ —É—Å–ª—É–≥–∞–º
‚Ä¢ –ü–æ–º–æ—â—å –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–æ–±–∏–ª—å–Ω–æ–º—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
‚Ä¢ –û—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã
‚Ä¢ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

–¢–ï–•–ù–ò–ß–ï–°–ö–ê–Ø –°–ü–ï–¶–ò–§–ò–ö–ê–¶–ò–Ø
–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: –ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–Ω–∞—è
–Ø–∑—ã–∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: Python 3.12
–ú–æ–¥–µ–ª—å –ò–ò: Qwen3-4B
–£—Ä–æ–≤–µ–Ω—å –∞–≤—Ç–æ–Ω–æ–º–Ω–æ—Å—Ç–∏: –ü–æ–¥ –Ω–∞–¥–∑–æ—Ä–æ–º —á–µ–ª–æ–≤–µ–∫–∞
–û–ø–µ—Ä–∞—Ü–∏–π –≤ —á–∞—Å: ~500-1000

–î–û–°–¢–£–ü –ö –î–ê–ù–ù–´–ú
–£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞: –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö –±–∞–Ω–∫–∞
- FAQ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
- –û–±—â–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã –∏ —É—Å–ª–æ–≤–∏—è

–ù–ï –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫:
- –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º –¥–∞–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–æ–≤
- –§–∏–Ω–∞–Ω—Å–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
- –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–º —Å–∏—Å—Ç–µ–º–∞–º –±–∞–Ω–∫–∞

–¶–ï–õ–ï–í–ê–Ø –ê–£–î–ò–¢–û–†–ò–Ø
–ü–µ—Ä–≤–∏—á–Ω–∞—è: –ö–ª–∏–µ–Ω—Ç—ã –±–∞–Ω–∫–∞ (—Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –ª–∏—Ü–∞)
–í—Ç–æ—Ä–∏—á–Ω–∞—è: –ö–ª–∏–µ–Ω—Ç—ã –±–∞–Ω–∫–∞ (–º–∞–ª—ã–π –∏ —Å—Ä–µ–¥–Ω–∏–π –±–∏–∑–Ω–µ—Å)
–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞: 18-65 –ª–µ—Ç
–û–ø—ã—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —É—Å–ª—É–≥: –õ—é–±–æ–π

–ú–ï–†–´ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò –ò –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø
–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:
1. –ó–∞–ø—Ä–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (–ø–∞—Ä–æ–ª–∏, PIN-–∫–æ–¥—ã)
2. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
3. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ —á–µ–ª–æ–≤–µ–∫—É-–æ–ø–µ—Ä–∞—Ç–æ—Ä—É
4. –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–ø—ã—Ç–æ–∫ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π –∏–Ω–∂–µ–Ω–µ—Ä–∏–∏

–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å:
- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –¥–∏–∞–ª–æ–≥–æ–≤
- –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–æ–≤
- –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ—Å–º–æ—Ç—Ä –ø–æ–ª–∏—Ç–∏–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

–ò–ù–¢–ï–ì–†–ê–¶–ò–ò
–í–Ω–µ—à–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã:
- CRM —Å–∏—Å—Ç–µ–º–∞ –±–∞–Ω–∫–∞ (—Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤)
- –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏
- –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞

API:
- REST API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö
- Webhook –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö

–ü–†–û–¶–ï–î–£–†–´ –≠–°–ö–ê–õ–ê–¶–ò–ò
–ü—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏:
- –ü–æ–ø—ã—Ç–æ–∫ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞ ‚Üí –ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ —Å–ª—É–∂–±–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
- –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º ‚Üí –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ IT-–ø–æ–¥–¥–µ—Ä–∂–∫–∏  
- –ñ–∞–ª–æ–± –∫–ª–∏–µ–Ω—Ç–æ–≤ ‚Üí –ü–µ—Ä–µ–¥–∞—á–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É –ø–æ —Ä–∞–±–æ—Ç–µ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏

–ú–ï–¢–†–ò–ö–ò –ö–ê–ß–ï–°–¢–í–ê
–¶–µ–ª–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:
- –¢–æ—á–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤: >95%
- –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: <3 —Å–µ–∫—É–Ω–¥
- –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤: >4.5/5
- –ü—Ä–æ—Ü–µ–Ω—Ç —ç—Å–∫–∞–ª–∞—Ü–∏–∏ –∫ —á–µ–ª–æ–≤–µ–∫—É: <15%

–ü–õ–ê–ù–´ –†–ê–ó–í–ò–¢–ò–Ø
–ë–ª–∏–∂–∞–π—à–∏–µ —É–ª—É—á—à–µ–Ω–∏—è:
- –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
- –£–ª—É—á—à–µ–Ω–∏–µ –ø–æ–Ω–∏–º–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–∏–∞–ª–æ–≥–∞
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π –æ–Ω–ª–∞–π–Ω-–±–∞–Ω–∫–∏–Ω–≥–∞
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
'''
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª
    config_data = {
        "agent_config": {
            "name": "BankingAssistant",
            "version": "2.1",
            "type": "customer_service_chatbot",
            "autonomy_level": "supervised",
            "max_concurrent_sessions": 100,
            "session_timeout": 1800,
            "escalation_threshold": 0.7
        },
        "llm_settings": {
            "model": "qwen3-4b",
            "temperature": 0.2,
            "max_tokens": 512,
            "top_p": 0.9
        },
        "security_policies": {
            "pii_detection": True,
            "content_filtering": True,
            "audit_logging": True,
            "rate_limiting": True
        },
        "integrations": {
            "crm_system": {
                "endpoint": "https://crm.test-bank.ru/api/v1",
                "access_level": "read_only"
            },
            "knowledge_base": {
                "endpoint": "https://kb.test-bank.ru/api/v2",
                "cache_ttl": 3600
            }
        }
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª—ã
    files_created = []
    
    # –ö–æ–¥ –∞–≥–µ–Ω—Ç–∞
    agent_file = temp_dir / "banking_agent.py"
    agent_file.write_text(agent_code, encoding='utf-8')
    files_created.append(str(agent_file))
    
    # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
    docs_file = temp_dir / "agent_documentation.txt"
    docs_file.write_text(agent_docs, encoding='utf-8')
    files_created.append(str(docs_file))
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    config_file = temp_dir / "agent_config.json"
    config_file.write_text(json.dumps(config_data, indent=2, ensure_ascii=False), encoding='utf-8')
    files_created.append(str(config_file))
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(files_created)} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤:")
    for file_path in files_created:
        file_size = Path(file_path).stat().st_size
        print(f"  ‚Ä¢ {Path(file_path).name} ({file_size} –±–∞–π—Ç)")
    
    return files_created, temp_dir

async def test_full_workflow(workflow, test_files):
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ workflow"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ workflow...")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—É—é –æ—Ü–µ–Ω–∫—É
        result = await workflow.run_assessment(
            source_files=test_files,
            agent_name="BankingAssistant_Test"
        )
        
        print(f"‚úÖ Workflow –∑–∞–≤–µ—Ä—à–µ–Ω: {'—É—Å–ø–µ—à–Ω–æ' if result['success'] else '—Å –æ—à–∏–±–∫–æ–π'}")
        
        if result["success"]:
            assessment = result.get("final_assessment")
            if assessment:
                print(f"‚úÖ ID –æ—Ü–µ–Ω–∫–∏: {result['assessment_id']}")
                print(f"‚úÖ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result.get('processing_time', 0):.1f}—Å")
                print(f"‚úÖ –û–±—â–∏–π —Ä–∏—Å–∫: {assessment['overall_risk_level']} ({assessment['overall_risk_score']}/25)")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Ü–µ–Ω–æ–∫ –ø–æ –≤—Å–µ–º —Ç–∏–ø–∞–º —Ä–∏—Å–∫–æ–≤
                risk_evaluations = assessment.get("risk_evaluations", {})
                print(f"‚úÖ –û—Ü–µ–Ω–æ–∫ —Ä–∏—Å–∫–æ–≤: {len(risk_evaluations)}/6")
                
                for risk_type, evaluation in risk_evaluations.items():
                    level = evaluation.get("risk_level", "unknown")
                    score = evaluation.get("total_score", 0)
                    print(f"  ‚Ä¢ {risk_type}: {level} ({score}/25)")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                recommendations = assessment.get("priority_recommendations", [])
                print(f"‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {len(recommendations)}")
                
                return True, result
            else:
                print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞")
                return False, result
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ workflow: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            return False, result
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ workflow: {e}")
        return False, None

async def test_database_integration(workflow, result):
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î...")
    
    try:
        from src.models.database import get_db_manager
        
        if not result or not result.get("success"):
            print("‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –ë–î - –Ω–µ—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
            return False
        
        assessment_id = result.get("saved_assessment_id")
        if not assessment_id:
            print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –æ—Ü–µ–Ω–∫–∏")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        db_manager = await get_db_manager()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ü–µ–Ω–∫—É –∏–∑ –ë–î
        saved_assessment = await db_manager.get_risk_assessment(assessment_id)
        
        if saved_assessment:
            print(f"‚úÖ –û—Ü–µ–Ω–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î: {assessment_id}")
            
            assessment_record = saved_assessment["assessment"]
            evaluations = saved_assessment["evaluations"]
            
            print(f"‚úÖ –û–±—â–∏–π —Ä–∏—Å–∫: {assessment_record.overall_risk_level} ({assessment_record.overall_risk_score}/25)")
            print(f"‚úÖ –î–µ—Ç–∞–ª—å–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫: {len(evaluations)}")
            print(f"‚úÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {assessment_record.assessment_timestamp}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            logs = await db_manager.get_processing_logs(result["assessment_id"])
            print(f"‚úÖ –õ–æ–≥–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(logs)}")
            
            return True
        else:
            print(f"‚ùå –û—Ü–µ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î: {assessment_id}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ë–î: {e}")
        return False

async def test_cli_integration():
    """–¢–µ—Å—Ç CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º CLI –º–æ–¥—É–ª—å
        import main
        
        print("‚úÖ CLI –º–æ–¥—É–ª—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        print("‚úÖ Rich –∫–æ–Ω—Å–æ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        print("‚úÖ Click –∫–æ–º–∞–Ω–¥—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥
        available_commands = ["assess", "show", "list-assessments", "status", "demo"]
        print(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: {', '.join(available_commands)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è CLI: {e}")
        return False

async def test_performance_metrics(workflow, test_files):
    """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
    
    try:
        import time
        
        # –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        start_time = time.time()
        
        # –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
        profiler_start = time.time()
        profiler_result = await workflow.profiler.run(
            {"source_files": test_files, "agent_name": "PerfTest"},
            "perf_test_001"
        )
        profiler_time = time.time() - profiler_start
        
        print(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ: {profiler_time:.2f}—Å")
        
        if profiler_result.status.value == "completed":
            agent_profile = profiler_result.result_data["agent_profile"]
            
            # –¢–µ—Å—Ç –æ–¥–Ω–æ–≥–æ –æ—Ü–µ–Ω—â–∏–∫–∞
            from src.models.risk_models import RiskType
            ethical_evaluator = workflow.evaluators[RiskType.ETHICAL]
            
            eval_start = time.time()
            eval_result = await ethical_evaluator.run(
                {"agent_profile": agent_profile},
                "perf_test_001"
            )
            eval_time = time.time() - eval_start
            
            print(f"‚úÖ –û—Ü–µ–Ω–∫–∞ —ç—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–∏—Å–∫–æ–≤: {eval_time:.2f}—Å")
            
            # –¢–µ—Å—Ç –∫—Ä–∏—Ç–∏–∫–∞
            if eval_result.status.value == "completed":
                critic_start = time.time()
                critic_input = {
                    "risk_type": RiskType.ETHICAL.value,
                    "risk_evaluation": eval_result.result_data["risk_evaluation"],
                    "agent_profile": agent_profile,
                    "evaluator_name": ethical_evaluator.name
                }
                
                critic_result = await workflow.critic.run(critic_input, "perf_test_001")
                critic_time = time.time() - critic_start
                
                print(f"‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑: {critic_time:.2f}—Å")
        
        total_time = time.time() - start_time
        print(f"‚úÖ –û–±—â–µ–µ –≤—Ä–µ–º—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {total_time:.2f}—Å")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–≥–µ–Ω—Ç–æ–≤
        profiler_stats = workflow.profiler.get_stats()
        print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Ñ–∞–π–ª–µ—Ä–∞: {profiler_stats['total_requests']} –∑–∞–ø—Ä–æ—Å–æ–≤, "
              f"—É—Å–ø–µ—à–Ω–æ—Å—Ç—å {profiler_stats['success_rate']:.1%}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
        return False

async def cleanup_test_files(temp_dir):
    """–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    try:
        import shutil
        shutil.rmtree(temp_dir)
        print(f"‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã: {temp_dir}")
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: {e}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ü–û–õ–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï WORKFLOW –°–ò–°–¢–ï–ú–´ –û–¶–ï–ù–ö–ò –†–ò–°–ö–û–í")
    print("=" * 70)
    
    success_count = 0
    total_tests = 6
    
    # –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ workflow
    workflow_success, workflow = await test_workflow_creation()
    if workflow_success:
        success_count += 1
    
    # –¢–µ—Å—Ç 2: Health checks (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ workflow —Å–æ–∑–¥–∞–Ω)
    if workflow_success and workflow:
        health_success = await test_health_checks(workflow)
        if health_success:
            success_count += 1
        
        # –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –ø–æ–ª–Ω—ã–π workflow
        test_files, temp_dir = await create_test_files()
        
        try:
            workflow_test_success, workflow_result = await test_full_workflow(workflow, test_files)
            if workflow_test_success:
                success_count += 1
            
            # –¢–µ—Å—Ç 4: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ë–î (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ workflow —É—Å–ø–µ—à–µ–Ω)
            if workflow_test_success:
                db_success = await test_database_integration(workflow, workflow_result)
                if db_success:
                    success_count += 1
            
            # –¢–µ—Å—Ç 5: CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            cli_success = await test_cli_integration()
            if cli_success:
                success_count += 1
            
            # –¢–µ—Å—Ç 6: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            if workflow_test_success:
                perf_success = await test_performance_metrics(workflow, test_files)
                if perf_success:
                    success_count += 1
            
        finally:
            # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
            await cleanup_test_files(temp_dir)
    
    print("\n" + "=" * 70)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: {success_count}/{total_tests}")
    
    if success_count == total_tests:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("\n‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:")
        print("  ‚Ä¢ LangGraph workflow —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç")
        print("  ‚Ä¢ –í—Å–µ –∞–≥–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")  
        print("  ‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
        print("  ‚Ä¢ CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        print("  ‚Ä¢ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –Ω–æ—Ä–º–µ")
        
        print("\nüöÄ –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
        print("  python main.py assess <—Ñ–∞–π–ª—ã_–∞–≥–µ–Ω—Ç–∞>")
        print("  python main.py demo  # –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏")
        print("  python main.py status --check-llm --check-db")
        
    elif success_count >= total_tests * 0.8:
        print("üéØ –ë–û–õ–¨–®–ò–ù–°–¢–í–û –¢–ï–°–¢–û–í –ü–†–û–ô–î–ï–ù–û!")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}")
        print(f"‚ùå –ù–µ—É–¥–∞—á–Ω–æ: {total_tests - success_count}")
        print("\nüí° –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏")
        
    else:
        print("‚ö†Ô∏è –¢–†–ï–ë–£–Æ–¢–°–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}")
        print(f"‚ùå –ù–µ—É–¥–∞—á–Ω–æ: {total_tests - success_count}")
        print("\nüîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:")
        print("  ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–ø—É—Å–∫ LM Studio")
        print("  ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
        print("  ‚Ä¢ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏ –æ—à–∏–±–æ–∫")
    
    return success_count == total_tests

if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1)