# final_critic_status_fix.py
"""
–§–ò–ù–ê–õ–¨–ù–û–ï –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏–∫–∞ - –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ ProcessingStatus.COMPLETED
"""

import sys
import asyncio
import tempfile
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src
sys.path.insert(0, str(Path(__file__).parent / "src"))

def apply_final_critic_fix():
    """–§–∏–Ω–∞–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏–∫–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—Ç–∞—Ç—É—Å–∞"""
    
    try:
        print("üîß –§–ò–ù–ê–õ–¨–ù–û–ï –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏–∫–∞...")
        
        from src.agents.critic_agent import CriticAgent
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
        if not hasattr(CriticAgent, '_original_critique_multiple_evaluations'):
            CriticAgent._original_critique_multiple_evaluations = CriticAgent.critique_multiple_evaluations
        
        async def final_fixed_critique_multiple_evaluations(
            self,
            evaluation_results,  # Dict[str, Any] –∏–∑ get_evaluation_results()
            agent_profile,
            assessment_id
        ):
            """–§–ò–ù–ê–õ–¨–ù–ê–Ø –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—Ç–∞—Ç—É—Å–∞"""
            
            critic_results = {}
            
            self.logger.bind_context(assessment_id, self.name).info(
                f"üîß –§–ò–ù–ê–õ–¨–ù–ê–Ø –∫—Ä–∏—Ç–∏–∫–∞: –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {len(evaluation_results)} –æ—Ü–µ–Ω–æ–∫"
            )
            
            for risk_type, eval_result in evaluation_results.items():
                try:
                    # üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
                    if not eval_result or not isinstance(eval_result, dict):
                        self.logger.bind_context(assessment_id, self.name).warning(
                            f"üîß {risk_type}: eval_result –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ dict"
                        )
                        critic_results[risk_type] = self._create_default_critic_result(
                            risk_type, "–ü—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ü–µ–Ω–∫–∏"
                        )
                        continue
                    
                    # üîß –§–ò–ù–ê–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
                    status = eval_result.get("status")
                    is_completed = False
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å—Ç–∞—Ç—É—Å–∞
                    if hasattr(status, 'value'):
                        # –ï—Å–ª–∏ —ç—Ç–æ enum ProcessingStatus
                        is_completed = status.value == "completed"
                        self.logger.bind_context(assessment_id, self.name).info(
                            f"üîß {risk_type}: enum —Å—Ç–∞—Ç—É—Å = {status.value}"
                        )
                    elif str(status) == "ProcessingStatus.COMPLETED":
                        # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ enum
                        is_completed = True
                        self.logger.bind_context(assessment_id, self.name).info(
                            f"üîß {risk_type}: —Å—Ç—Ä–æ–∫–æ–≤—ã–π enum —Å—Ç–∞—Ç—É—Å = {status}"
                        )
                    elif status == "completed":
                        # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
                        is_completed = True
                        self.logger.bind_context(assessment_id, self.name).info(
                            f"üîß {risk_type}: —Å—Ç—Ä–æ–∫–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å = {status}"
                        )
                    else:
                        self.logger.bind_context(assessment_id, self.name).warning(
                            f"üîß {risk_type}: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å = {status} (—Ç–∏–ø: {type(status)})"
                        )
                    
                    if not is_completed:
                        self.logger.bind_context(assessment_id, self.name).warning(
                            f"üîß {risk_type}: –æ—Ü–µ–Ω–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Å—Ç–∞—Ç—É—Å: {status}"
                        )
                        critic_results[risk_type] = self._create_default_critic_result(
                            risk_type, f"–û—Ü–µ–Ω–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Å—Ç–∞—Ç—É—Å: {status}"
                        )
                        continue
                    
                    # üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ—Å—Ç—É–ø –∫ result_data –∫–∞–∫ –∫ –∫–ª—é—á—É dict
                    result_data = eval_result.get("result_data")
                    if not result_data:
                        self.logger.bind_context(assessment_id, self.name).warning(
                            f"üîß {risk_type}: result_data –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
                        )
                        critic_results[risk_type] = self._create_default_critic_result(
                            risk_type, "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ—Ü–µ–Ω–∫–∏"
                        )
                        continue
                    
                    # üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ—Å—Ç—É–ø –∫ risk_evaluation
                    risk_evaluation = result_data.get("risk_evaluation")
                    if not risk_evaluation:
                        self.logger.bind_context(assessment_id, self.name).warning(
                            f"üîß {risk_type}: risk_evaluation –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ result_data"
                        )
                        critic_results[risk_type] = self._create_default_critic_result(
                            risk_type, "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–∞"
                        )
                        continue
                    
                    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫—Ä–∏—Ç–∏–∫–∏
                    input_data = {
                        "risk_type": risk_type,
                        "risk_evaluation": risk_evaluation,
                        "agent_profile": agent_profile,
                        "evaluator_name": eval_result.get("agent_name", "Unknown")
                    }
                    
                    self.logger.bind_context(assessment_id, self.name).info(
                        f"üîß {risk_type}: –∑–∞–ø—É—Å–∫–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑"
                    )
                    
                    # –í—ã–ø–æ–ª–Ω—è–µ–º –∫—Ä–∏—Ç–∏–∫—É
                    critic_result = await self.run(input_data, assessment_id)
                    critic_results[risk_type] = critic_result
                    
                    self.logger.bind_context(assessment_id, self.name).info(
                        f"üîß {risk_type}: –∫—Ä–∏—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
                    )
                    
                except Exception as e:
                    # –ï—Å–ª–∏ –∫—Ä–∏—Ç–∏–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, —Å–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    self.logger.bind_context(assessment_id, self.name).error(
                        f"üîß ‚ùå –û—à–∏–±–∫–∞ –∫—Ä–∏—Ç–∏–∫–∏ {risk_type}: {e}"
                    )
                    
                    import traceback
                    self.logger.bind_context(assessment_id, self.name).error(
                        f"üîß Traceback: {traceback.format_exc()}"
                    )
                    
                    critic_results[risk_type] = self._create_default_critic_result(
                        risk_type, f"–û—à–∏–±–∫–∞ –∫—Ä–∏—Ç–∏–∫–∏: {str(e)}"
                    )
            
            self.logger.bind_context(assessment_id, self.name).info(
                f"üîß –§–ò–ù–ê–õ–¨–ù–ê–Ø –∫—Ä–∏—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(critic_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
            )
            
            return critic_results
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        CriticAgent.critique_multiple_evaluations = final_fixed_critique_multiple_evaluations
        
        print("‚úÖ –§–ò–ù–ê–õ–¨–ù–û–ï –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_final_fixed_critic():
    """–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∫—Ä–∏—Ç–∏–∫–∞"""
    
    try:
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        print("üîß –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è...")
        
        # 1. –ü–∞—Ç—á confidence
        from src.utils.risk_validation_patch import apply_confidence_and_factors_patch
        apply_confidence_and_factors_patch()
        
        # 2. –§–∏–Ω–∞–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏–∫–∞
        if not apply_final_critic_fix():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏–∫–∞")
            return False
        
        # 3. –ü—Ä–æ—Å—Ç–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞
        from src.workflow.graph_builder import RiskAssessmentWorkflow
        
        if not hasattr(RiskAssessmentWorkflow, '_original_quality_check_node'):
            RiskAssessmentWorkflow._original_quality_check_node = RiskAssessmentWorkflow._quality_check_node
        
        async def simple_quality_for_critic_test(self, state):
            """–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫—Ä–∏—Ç–∏–∫–∞"""
            
            assessment_id = state["assessment_id"]
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            try:
                all_results = state.get_evaluation_results()
                evaluation_results = {}
                
                for risk_type, result in all_results.items():
                    if not result:
                        continue
                        
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å (–ª—é–±–æ–π –≤–∞—Ä–∏–∞–Ω—Ç)
                    status = None
                    if isinstance(result, dict):
                        status = result.get("status")
                    elif hasattr(result, 'status'):
                        status = result.status
                        
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ü–µ–Ω–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ
                    is_completed = False
                    if hasattr(status, 'value'):
                        is_completed = status.value == "completed"
                    elif str(status) == "ProcessingStatus.COMPLETED":
                        is_completed = True  
                    elif status == "completed":
                        is_completed = True
                    
                    if not is_completed:
                        continue
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ result_data
                    result_data = None
                    if isinstance(result, dict):
                        result_data = result.get("result_data")
                    elif hasattr(result, 'result_data'):
                        result_data = result.result_data
                        
                    if result_data is None:
                        continue
                    
                    evaluation_results[risk_type] = result
                
            except Exception as e:
                evaluation_results = {}

            # –ï—Å–ª–∏ –Ω–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫
            if not evaluation_results:
                state["current_step"] = "error"
                state["error_message"] = "–ù–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫ —Ä–∏—Å–∫–æ–≤"
                state["retry_needed"] = []
                return state
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫—Ä–∏—Ç–∏–∫–∞
            critic_results = state.get("critic_results", {})
            has_critic_results = bool(critic_results)
            
            if has_critic_results:
                # –ü–æ—Å–ª–µ –∫—Ä–∏—Ç–∏–∫–∞ - –∑–∞–≤–µ—Ä—à–∞–µ–º
                avg_quality = 8.0  # –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ –∫—Ä–∏—Ç–∏–∫–∞
                retry_needed = []
            else:
                # –î–æ –∫—Ä–∏—Ç–∏–∫–∞ - –∑–∞–ø—É—Å–∫–∞–µ–º –∫—Ä–∏—Ç–∏–∫–∞
                avg_quality = self.quality_threshold - 0.5  # –ß—É—Ç—å –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞
                retry_needed = []
            
            # –õ–æ–≥–∏—Ä—É–µ–º
            self.graph_logger.log_quality_check(
                assessment_id, 
                "overall", 
                avg_quality, 
                self.quality_threshold
            )
            
            # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ
            state["average_quality"] = avg_quality
            
            if avg_quality < self.quality_threshold and not has_critic_results:
                state["current_step"] = "needs_critic"
                state["retry_needed"] = []
                
                self.graph_logger.log_workflow_step(
                    assessment_id, "quality_check_needs_critic",
                    f"üîß ‚úÖ –ö–†–ò–¢–ò–ö –ê–ö–¢–ò–í–ò–†–û–í–ê–ù! (–∫–∞—á–µ—Å—Ç–≤–æ {avg_quality:.1f} < {self.quality_threshold})"
                )
            else:
                state["current_step"] = "ready_for_finalization"
                state["retry_needed"] = []
                
                self.graph_logger.log_workflow_step(
                    assessment_id, "quality_check_finalize",
                    f"üîß ‚úÖ –§–ò–ù–ê–õ–ò–ó–ê–¶–ò–Ø (–∫–∞—á–µ—Å—Ç–≤–æ {avg_quality:.1f} >= {self.quality_threshold})"
                )
            
            return state
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞
        RiskAssessmentWorkflow._quality_check_node = simple_quality_for_critic_test
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
        temp_dir = Path(tempfile.mkdtemp())
        test_file = temp_dir / "final_test_agent.py"
        test_file.write_text("""
# –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—Ä–∏—Ç–∏–∫–∞
class FinalTestAgent:
    def __init__(self):
        self.model = "final-test-model"
        
    def process(self, data):
        return "final test output"
        """, encoding='utf-8')
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        from src.utils.logger import setup_logging
        setup_logging(log_level="INFO")
        
        # –°–æ–∑–¥–∞–µ–º workflow
        from src.workflow import create_workflow_from_env
        workflow = create_workflow_from_env()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ä–æ–≥
        workflow.quality_threshold = 6.0
        print(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Ä–æ–≥ –∫–∞—á–µ—Å—Ç–≤–∞: {workflow.quality_threshold}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ü–µ–Ω–∫—É
        print("\nüèÉ‚Äç‚ôÇÔ∏è –ó–∞–ø—É—Å–∫ –§–ò–ù–ê–õ–¨–ù–û–ì–û —Ç–µ—Å—Ç–∞ –∫—Ä–∏—Ç–∏–∫–∞...")
        
        result = await workflow.run_assessment(
            source_files=[str(temp_dir)],
            agent_name="FinalCriticTest"
        )
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –§–ò–ù–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–ê:")
        print("=" * 50)
        
        if result.get("success"):
            print("‚úÖ –û—Ü–µ–Ω–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            
            processing_time = result.get("processing_time", 0)
            print(f"‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.1f}—Å")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—É—Å–∫–∞–ª—Å—è –ª–∏ –∫—Ä–∏—Ç–∏–∫
            if processing_time > 60:
                print("üéâ –ö–†–ò–¢–ò–ö –ó–ê–ü–£–°–ö–ê–õ–°–Ø –ò –†–ê–ë–û–¢–ê–ï–¢ –ü–û–õ–ù–û–°–¢–¨–Æ! (–≤—Ä–µ–º—è > 60 —Å–µ–∫)")
                print("‚úÖ –í–°–ï –ü–†–û–ë–õ–ï–ú–´ –†–ï–®–ï–ù–´!")
                print("üéØ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
            else:
                print("‚ö†Ô∏è –í—Ä–µ–º—è < 60 —Å–µ–∫")
                print("üí° –ù–æ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞")
                print("üîç –ì–ª–∞–≤–Ω–æ–µ - –Ω–µ—Ç –æ—à–∏–±–æ–∫!")
            
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {result.get('error', 'Unknown')}")
            return False
            
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        return False

async def main():
    print("üöÄ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ö–†–ò–¢–ò–ö–ê")
    print("=" * 50)
    print("üéØ –¶–ï–õ–¨: –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ ProcessingStatus.COMPLETED")
    print("üîß –ú–ï–¢–û–î: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ enum —Å—Ç–∞—Ç—É—Å–∞")
    print("üèÅ –†–ï–ó–£–õ–¨–¢–ê–¢: –ü–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—Ç–∞—é—â–∏–π –∫—Ä–∏—Ç–∏–∫")
    
    success = await test_final_fixed_critic()
    
    print(f"\nüèÅ –†–ï–ó–£–õ–¨–¢–ê–¢ –§–ò–ù–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–ê:")
    if success:
        print("‚úÖ –ö–†–ò–¢–ò–ö –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù –ò –†–ê–ë–û–¢–ê–ï–¢!")
        print("üéâ –í–°–ï –ü–†–û–ë–õ–ï–ú–´ –†–ï–®–ï–ù–´!")
        print("\nüí° –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ:")
        print("1. –ü—Ä–∏–º–µ–Ω–∏—Ç–µ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ–¥–µ")
        print("2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ QUALITY_THRESHOLD=6.0 –≤ .env")
        print("3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: python main.py assess /path --quality-threshold 6.0")
    else:
        print("‚ùå –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´ –° –§–ò–ù–ê–õ–¨–ù–´–ú –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï–ú")

if __name__ == "__main__":
    asyncio.run(main())