# test_stage1.py
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã (–≠—Ç–∞–ø 1)
–ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–µ–ª–∏, –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, LLM –∫–ª–∏–µ–Ω—Ç –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
"""

import asyncio
import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
project_root = Path(__file__).parent
src_path = project_root / "src"
sys.path.insert(0, str(src_path))

try:
    from src.models.risk_models import (
        AgentProfile, RiskEvaluation, AgentRiskAssessment,
        RiskType, RiskLevel, AgentType, AutonomyLevel, DataSensitivity
    )
    from src.models.database import DatabaseManager
    from src.utils.llm_client import LLMClient, LLMConfig, LLMMessage
    from src.utils.logger import setup_logging, get_logger, LogContext
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("üîß –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã –≤ –ø–∞–ø–∫–µ src/")
    sys.exit(1)


async def test_models():
    """–¢–µ—Å—Ç Pydantic –º–æ–¥–µ–ª–µ–π"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –¥–∞–Ω–Ω—ã—Ö...")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∞–≥–µ–Ω—Ç–∞
    profile = AgentProfile(
        name="TestChatBot",
        version="1.0",
        description="–¢–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç-–±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã",
        agent_type=AgentType.CHATBOT,
        llm_model="qwen3-8b",
        autonomy_level=AutonomyLevel.SUPERVISED,
        data_access=[DataSensitivity.INTERNAL],
        target_audience="–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –±–∞–Ω–∫–∞",
        system_prompts=["–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"],
        guardrails=["–ù–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–æ–≤"]
    )
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ü–µ–Ω–∫—É —Ä–∏—Å–∫–∞
    evaluation = RiskEvaluation(
        risk_type=RiskType.ETHICAL,
        probability_score=2,
        impact_score=3,
        probability_reasoning="–ù–∏–∑–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º",
        impact_reasoning="–°—Ä–µ–¥–Ω–∏–π —É—â–µ—Ä–± –≤ —Å–ª—É—á–∞–µ –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ü–∏–∏",
        evaluator_agent="test_evaluator",
        confidence_level=0.8
    )
    
    print(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω: {profile.name}")
    print(f"‚úÖ –û—Ü–µ–Ω–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {evaluation.risk_type} = {evaluation.total_score} –±–∞–ª–ª–æ–≤ ({evaluation.risk_level})")
    
    return profile, evaluation


async def test_database():
    """–¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    profile, evaluation = await test_models()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
    db = DatabaseManager("sqlite+aiosqlite:///./test_ai_risk.db")
    await db.initialize()
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        profile_id = await db.save_agent_profile(profile)
        print(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Å ID: {profile_id[:8]}...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        loaded_profile = await db.get_agent_profile(profile_id)
        assert loaded_profile is not None
        assert loaded_profile.name == profile.name
        print(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω: {loaded_profile.name}")
        
        # –°–æ–∑–¥–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é –æ—Ü–µ–Ω–∫—É
        assessment = AgentRiskAssessment(
            agent_profile=profile,
            assessment_id="test_assessment",
            risk_evaluations={RiskType.ETHICAL: evaluation},
            overall_risk_score=evaluation.total_score,
            overall_risk_level=evaluation.risk_level,
            priority_recommendations=["–í–Ω–µ–¥—Ä–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —ç—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–∏—Å–∫–æ–≤"]
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ü–µ–Ω–∫—É
        assessment_id = await db.save_risk_assessment(assessment, profile_id)
        print(f"‚úÖ –û—Ü–µ–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Å ID: {assessment_id[:8]}...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ü–µ–Ω–∫—É
        loaded_assessment = await db.get_risk_assessment(assessment_id)
        assert loaded_assessment is not None
        print(f"‚úÖ –û—Ü–µ–Ω–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {loaded_assessment['assessment'].overall_risk_level}")
        
    finally:
        await db.close()
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ë–î
        test_db_path = Path("test_ai_risk.db")
        if test_db_path.exists():
            test_db_path.unlink()
    
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")


async def test_llm_client():
    """–¢–µ—Å—Ç LLM –∫–ª–∏–µ–Ω—Ç–∞"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ LLM –∫–ª–∏–µ–Ω—Ç–∞...")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
    config = LLMConfig(
        base_url="http://127.0.0.1:1234",
        model="qwen3-8b",
        temperature=0.1,
        timeout=30
    )
    
    client = LLMClient(config)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
        is_available = await client.health_check()
        
        if not is_available:
            print("‚ö†Ô∏è LM Studio –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ localhost:1234")
            print("   –ó–∞–ø—É—Å—Ç–∏—Ç–µ LM Studio —Å –º–æ–¥–µ–ª—å—é qwen3-8b –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        print("‚úÖ LM Studio –¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
        try:
            models = await client.get_available_models()
            print(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏: {models}")
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π: {e}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
        messages = [
            LLMMessage(role="system", content="–¢—ã - –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã."),
            LLMMessage(role="user", content="–°–∫–∞–∂–∏ '–¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ' –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.")
        ]
        
        response = await client.complete_chat(messages)
        print(f"‚úÖ LLM –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: {response.content[:50]}...")
        print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {response.usage.get('total_tokens', 'N/A')}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–∏—Å–∫–æ–≤
        from src.utils.llm_client import RiskAnalysisLLMClient
        
        risk_client = RiskAnalysisLLMClient(config)
        
        test_agent_data = """
        –ê–≥–µ–Ω—Ç: TestBot
        –¢–∏–ø: –ß–∞—Ç-–±–æ—Ç
        –ê–≤—Ç–æ–Ω–æ–º–Ω–æ—Å—Ç—å: –ü–æ–¥ –Ω–∞–¥–∑–æ—Ä–æ–º
        –î–∞–Ω–Ω—ã–µ: –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
        """
        
        test_criteria = """
        –û—Ü–µ–Ω–∏ —ç—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∏—Å–∫–∏:
        1 –±–∞–ª–ª - –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º –¥–∞–Ω–Ω—ã–º
        5 –±–∞–ª–ª–æ–≤ - –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º –¥–∞–Ω–Ω—ã–º
        """
        
        risk_evaluation = await risk_client.evaluate_risk(
            risk_type="—ç—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∏—Å–∫–∏",
            agent_data=test_agent_data,
            evaluation_criteria=test_criteria
        )
        
        print(f"‚úÖ –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞: {risk_evaluation['total_score']} –±–∞–ª–ª–æ–≤")
        
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ LLM –∫–ª–∏–µ–Ω—Ç–∞: {e}")
    finally:
        await client.close()


def test_logging():
    """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è...")
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    logger_instance = setup_logging(
        log_level="INFO",
        log_file="logs/test_stage1.log",
        enable_console=True,
        enable_rich=True
    )
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    test_logger = logger_instance.bind_context("test_assessment_123", "test_agent")
    test_logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    logger_instance.log_agent_start("test_agent", "unit_test", "test_assessment_123")
    logger_instance.log_risk_evaluation("test_agent", "test_assessment_123", "ethical", 6, "medium")
    logger_instance.log_agent_success("test_agent", "unit_test", "test_assessment_123", 1.5)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
    with LogContext("test_operation", "test_assessment_123", "test_agent"):
        import time
        time.sleep(0.1)  # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É
    
    print("‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    print(f"‚úÖ –õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: logs/test_stage1.log")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã (–≠—Ç–∞–ø 1)")
    print("=" * 60)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        Path("logs").mkdir(exist_ok=True)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
        await test_models()
        await test_database()
        await test_llm_client()
        test_logging()
        
        print("\n" + "=" * 60)
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –≠–¢–ê–ü–ê 1 –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("\nüìã –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ:")
        print("‚úÖ Pydantic –º–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö")
        print("‚úÖ SQLite –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö")
        print("‚úÖ LLM –∫–ª–∏–µ–Ω—Ç (qwen3-8b)")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")
        print("\nüöÄ –ì–æ—Ç–æ–≤—ã –∫ –≠—Ç–∞–ø—É 2: –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ê–•: {e}")
        print("\nüîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("- –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ª–∏ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏?")
        print("- –ó–∞–ø—É—â–µ–Ω –ª–∏ LM Studio –Ω–∞ localhost:1234?")
        print("- –ï—Å—Ç—å –ª–∏ –ø—Ä–∞–≤–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤?")
        return False
    
    return True


if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1)