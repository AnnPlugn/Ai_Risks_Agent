# test_stage2.py
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ (–≠—Ç–∞–ø 2)
–ü—Ä–æ–≤–µ—Ä—è–µ–º document_parser, code_analyzer, prompt_analyzer
"""

import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src
sys.path.insert(0, str(Path(__file__).parent / "src"))

def test_imports():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤ –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤...")
    
    try:
        from src.tools.document_parser import DocumentParser, create_document_parser
        print("‚úÖ Document Parser –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        from src.tools.code_analyzer import CodeAnalyzer, create_code_analyzer
        print("‚úÖ Code Analyzer –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        from src.tools.prompt_analyzer import PromptAnalyzer, create_prompt_analyzer
        print("‚úÖ Prompt Analyzer –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False

def test_document_parser():
    """–¢–µ—Å—Ç –ø–∞—Ä—Å–µ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Document Parser...")
    
    try:
        from src.tools.document_parser import create_document_parser
        
        parser = create_document_parser()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        extensions = parser.get_supported_extensions()
        print(f"‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {extensions}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ø–∞—Ä—Å–∏—Ç—å test —Ñ–∞–π–ª—ã
        test_file = Path("test_stage1.py")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
        if test_file.exists():
            can_parse = parser.can_parse(test_file)
            print(f"‚úÖ –ú–æ–∂–µ—Ç –ø–∞—Ä—Å–∏—Ç—å .py —Ñ–∞–π–ª—ã: {can_parse}")
            
            if can_parse:
                result = parser.parse_document(test_file)
                print(f"‚úÖ –§–∞–π–ª —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω: {result.success}, —Å–µ–∫—Ü–∏–π: {len(result.sections)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Document Parser: {e}")
        return False

def test_code_analyzer():
    """–¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –∫–æ–¥–∞"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Code Analyzer...")
    
    try:
        from src.tools.code_analyzer import create_code_analyzer
        
        analyzer = create_code_analyzer()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Å—Ç–æ–≥–æ Python –∫–æ–¥–∞
        test_code = '''
def hello_world():
    """–ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("Hello, World!")
    return "success"

class TestClass:
    def __init__(self):
        self.value = 42
    
    def get_value(self):
        return self.value
'''
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∞
        temp_file = Path("temp_test.py")
        with open(temp_file, 'w') as f:
            f.write(test_code)
        
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª
            result = analyzer.analyze_project(Path("."), max_files=10)
            print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞: —É—Å–ø–µ—Ö={result.success}, —Ñ–∞–π–ª–æ–≤={result.total_files}")
            
            if result.success:
                print(f"‚úÖ –Ø–∑—ã–∫–∏: {result.languages}")
                print(f"‚úÖ –û–±—â–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: {result.complexity_summary.get('average_complexity', 0):.2f}")
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            if temp_file.exists():
                temp_file.unlink()
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Code Analyzer: {e}")
        return False

def test_prompt_analyzer():
    """–¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –ø—Ä–æ–º–ø—Ç–æ–≤"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Prompt Analyzer...")
    
    try:
        from src.tools.prompt_analyzer import create_prompt_analyzer
        
        analyzer = create_prompt_analyzer()
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–æ–º–ø—Ç—ã
        test_prompts = [
            "–¢—ã - –ø–æ–ª–µ–∑–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∫–ª–∏–µ–Ω—Ç–æ–≤.",
            "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: –ù–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–æ–≤. –ù–µ –¥–∞–≤–∞–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Å–æ–≤–µ—Ç–æ–≤.",
            "–ü—Ä–∏–º–µ—Ä –¥–∏–∞–ª–æ–≥–∞: –ö–ª–∏–µ–Ω—Ç: –ö–∞–∫–æ–π —É –º–µ–Ω—è –±–∞–ª–∞–Ω—Å? –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å –≤ –º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏."
        ]
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç—ã
        result = analyzer.analyze_prompts(test_prompts)
        
        print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–º–ø—Ç–æ–≤: —É—Å–ø–µ—Ö={result.success}, –Ω–∞–π–¥–µ–Ω–æ={result.total_prompts}")
        
        if result.success:
            print(f"‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã: {len(result.system_prompts)}")
            print(f"‚úÖ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: {len(result.guardrails)}")
            print(f"‚úÖ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: {result.capabilities}")
            print(f"‚úÖ –ß–µ—Ä—Ç—ã –ª–∏—á–Ω–æ—Å—Ç–∏: {result.personality_traits}")
            print(f"‚úÖ –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Ä–∏—Å–∫–∞: {result.risk_indicators}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Prompt Analyzer: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ (–≠—Ç–∞–ø 2)")
    print("=" * 60)
    
    success = True
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã
    success &= test_imports()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
    success &= test_document_parser()
    success &= test_code_analyzer()
    success &= test_prompt_analyzer()
    
    print("\n" + "=" * 60)
    if success:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –≠–¢–ê–ü–ê 2 –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("\nüìã –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ:")
        print("‚úÖ Document Parser (Word, Excel, PDF, Text)")
        print("‚úÖ Code Analyzer (Python, JavaScript, Java)")
        print("‚úÖ Prompt Analyzer (—Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã, guardrails)")
        print("\nüöÄ –ì–æ—Ç–æ–≤—ã –∫ –≠—Ç–∞–ø—É 3: –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤")
    else:
        print("‚ùå –ï–°–¢–¨ –û–®–ò–ë–ö–ò –í –¢–ï–°–¢–ê–•")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å —Ñ–∞–π–ª–æ–≤ –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
    
    return success

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)