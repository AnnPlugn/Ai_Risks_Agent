# test_db_absolutely_final.py
"""
–ê–ë–°–û–õ–Æ–¢–ù–û –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ - —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º –∫ –¥–∞–Ω–Ω—ã–º –ë–î
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src
sys.path.insert(0, str(Path(__file__).parent / "src"))

from src.models.database import get_db_manager
from src.models.risk_models import (
    RiskType, RiskLevel, AgentProfile, AgentRiskAssessment, 
    AgentType, AutonomyLevel, DataSensitivity, RiskEvaluation,
    create_agent_risk_assessment
)
from datetime import datetime

async def test_db_absolutely_final():
    """–ê–ë–°–û–õ–Æ–¢–ù–û –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ - –≤—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã"""
    
    print("üß™ –ê–ë–°–û–õ–Æ–¢–ù–û –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –°–û–•–†–ê–ù–ï–ù–ò–Ø –í –ë–ê–ó–£ –î–ê–ù–ù–´–•")
    print("=" * 65)
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
        db = await get_db_manager()
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        from sqlalchemy import text
        async with db.async_session() as session:
            result = await session.execute(text("SELECT COUNT(*) FROM risk_assessments"))
            before_count = result.scalar()
            print(f"üìä –ó–∞–ø–∏—Å–µ–π –î–û —Ç–µ—Å—Ç–∞: {before_count}")
        
        # 1. –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∞–≥–µ–Ω—Ç–∞ —Å –í–°–ï–ú–ò –ø–æ–ª—è–º–∏
        test_profile = AgentProfile(
            name="TestAgent_AbsolutelyFinal",
            version="1.0",
            description="–ê–±—Å–æ–ª—é—Ç–Ω–æ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º –∫ –¥–∞–Ω–Ω—ã–º",
            agent_type=AgentType.CHATBOT,
            llm_model="qwen3-4b",
            autonomy_level=AutonomyLevel.SUPERVISED,
            data_access=[DataSensitivity.INTERNAL],
            external_apis=["test_api_final", "working_api"],
            target_audience="developers",
            operations_per_hour=50,
            revenue_per_operation=5.0,
            system_prompts=["–¢—ã - –∞–±—Å–æ–ª—é—Ç–Ω–æ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –∞–≥–µ–Ω—Ç"],
            guardrails=["–ù–µ —Ä–∞–∑–≥–ª–∞—à–∞–π –¥–∞–Ω–Ω—ã–µ", "–°–æ–±–ª—é–¥–∞–π —ç—Ç–∏–∫—É"],
            source_files=["test_absolutely_final.py"]
        )
        
        print("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω —Å external_apis:", test_profile.external_apis)
        
        # 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        profile_id = await db.save_agent_profile(test_profile)
        print(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Å ID: {profile_id}")
        
        # 3. –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É —Ä–∏—Å–∫–∞
        test_evaluation = RiskEvaluation(
            risk_type=RiskType.ETHICAL,
            evaluator_agent="test_evaluator_absolutely_final",
            probability_score=2,
            impact_score=3,
            total_score=6,
            risk_level=RiskLevel.LOW,
            probability_reasoning="–ù–∏–∑–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —ç—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º –≤ –∞–±—Å–æ–ª—é—Ç–Ω–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º —Ç–µ—Å—Ç–µ",
            impact_reasoning="–£–º–µ—Ä–µ–Ω–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ –ø—Ä–æ–±–ª–µ–º",
            key_factors=["–∞–±—Å–æ–ª—é—Ç–Ω–æ —Ñ–∏–Ω–∞–ª—å–Ω–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è —Å—Ä–µ–¥–∞", "–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø"],
            recommendations=["–¥–æ–±–∞–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", "–ø—Ä–æ–≤–µ—Å—Ç–∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∞—É–¥–∏—Ç"],
            confidence_level=0.95
        )
        
        print("‚úÖ –û—Ü–µ–Ω–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å key_factors:", test_evaluation.key_factors)
        
        # 4. –°–æ–∑–¥–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é –æ—Ü–µ–Ω–∫—É
        assessment_id = "test_absolutely_final_" + datetime.now().strftime("%Y%m%d_%H%M%S")
        
        test_assessment = create_agent_risk_assessment(
            assessment_id=assessment_id,
            agent_profile=test_profile,
            risk_evaluations={"ethical": test_evaluation},
            processing_time_seconds=1.5,
            quality_checks_passed=True
        )
        
        print("‚úÖ –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–æ–∑–¥–∞–Ω–∞")
        print(f"   assessment_id: {test_assessment.assessment_id}")
        
        # 5. –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ü–µ–Ω–∫—É –≤ –ë–î
        print("\nüìä –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—É—é –æ—Ü–µ–Ω–∫—É —Ä–∏—Å–∫–æ–≤...")
        saved_assessment_id = await db.save_risk_assessment(test_assessment, profile_id)
        print(f"‚úÖ –û—Ü–µ–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Å ID: {saved_assessment_id}")
        
        # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        async with db.async_session() as session:
            result = await session.execute(text("SELECT COUNT(*) FROM risk_assessments"))
            after_count = result.scalar()
            print(f"üìä –ó–∞–ø–∏—Å–µ–π –ü–û–°–õ–ï —Ç–µ—Å—Ç–∞: {after_count}")
            
            result = await session.execute(text("SELECT COUNT(*) FROM agent_profiles"))
            profiles_count = result.scalar()
            print(f"üìä –ü—Ä–æ—Ñ–∏–ª–µ–π –≤ –ë–î: {profiles_count}")
            
            result = await session.execute(text("SELECT COUNT(*) FROM risk_evaluations"))
            evaluations_count = result.scalar()
            print(f"üìä –û—Ç–¥–µ–ª—å–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫: {evaluations_count}")
        
        if after_count > before_count:
            print(f"\nüéâ –ê–ë–°–û–õ–Æ–¢–ù–´–ô –£–°–ü–ï–•! –î–æ–±–∞–≤–ª–µ–Ω–æ {after_count - before_count} –∑–∞–ø–∏—Å–µ–π")
            
            # 7. –¢–µ—Å—Ç–∏—Ä—É–µ–º —á—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö (–ò–°–ü–†–ê–í–õ–ï–ù–û!)
            print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —á—Ç–µ–Ω–∏–µ –∏–∑ –ë–î...")
            
            retrieved_profile = await db.get_agent_profile(profile_id)
            if retrieved_profile:
                print("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—É—á–µ–Ω –∏–∑ –ë–î:")
                print(f"   –ò–º—è: {retrieved_profile.name}")
                print(f"   –í–Ω–µ—à–Ω–∏–µ API: {retrieved_profile.external_apis}")
                print(f"   –¢–∏–ø: {retrieved_profile.agent_type}")
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: get_risk_assessment –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å, –Ω–µ –æ–±—ä–µ–∫—Ç!
            retrieved_assessment_data = await db.get_risk_assessment(saved_assessment_id)
            if retrieved_assessment_data:
                assessment_obj = retrieved_assessment_data["assessment"]  # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç assessment
                evaluations_list = retrieved_assessment_data["evaluations"]
                critic_evals_list = retrieved_assessment_data["critic_evaluations"]
                
                print("‚úÖ –û—Ü–µ–Ω–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞ –∏–∑ –ë–î:")
                print(f"   ID: {assessment_obj.id}")
                print(f"   –û–±—â–∏–π –±–∞–ª–ª: {assessment_obj.overall_risk_score}")
                print(f"   –£—Ä–æ–≤–µ–Ω—å: {assessment_obj.overall_risk_level}")
                print(f"   –û–±–ª–∞—Å—Ç–∏ —Ä–∏—Å–∫–∞: {assessment_obj.highest_risk_areas}")
                print(f"   –í—Ä–µ–º—è: {assessment_obj.processing_time_seconds}—Å")
                print(f"   –ö–∞—á–µ—Å—Ç–≤–æ: {assessment_obj.quality_checks_passed}")
                print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫: {len(evaluations_list)}")
                print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ü–µ–Ω–æ–∫: {len(critic_evals_list)}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–µ—Ä–≤–æ–π –æ—Ü–µ–Ω–∫–∏
                if evaluations_list:
                    eval_obj = evaluations_list[0]
                    print(f"   –ü–µ—Ä–≤–∞—è –æ—Ü–µ–Ω–∫–∞ - —Ç–∏–ø: {eval_obj.risk_type}")
                    print(f"   –ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã: {eval_obj.key_factors}")
                    print(f"   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {eval_obj.recommendations}")
            
            # 8. –ü—Ä—è–º–æ–π SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            print("\nüîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ SQL:")
            async with db.async_session() as session:
                result = await session.execute(text(
                    "SELECT risk_type, key_factors, recommendations, confidence_level "
                    "FROM risk_evaluations WHERE assessment_id = :assessment_id LIMIT 1"
                ), {"assessment_id": saved_assessment_id})
                row = result.first()
                if row:
                    print(f"‚úÖ SQL –¥–∞–Ω–Ω—ã–µ:")
                    print(f"   –¢–∏–ø —Ä–∏—Å–∫–∞: {row[0]}")
                    print(f"   –ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã: {row[1]}")
                    print(f"   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {row[2]}")
                    print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {row[3]}")
            
            print("\nüéØ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –ê–ë–°–û–õ–Æ–¢–ù–û –£–°–ü–ï–®–ù–û!")
            print("‚úÖ –ë–î —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –≤—Å–µ –ø–æ–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Å—Ö–µ–º–µ!")
            print("‚úÖ –ß—Ç–µ–Ω–∏–µ –∏ –∑–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
            
        else:
            print("‚ùå –û–®–ò–ë–ö–ê! –î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å")
            
    except Exception as e:
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(test_db_absolutely_final())