from src.workflow.graph_builder import create_workflow_from_env, create_risk_assessment_workflow

# –¢–µ—Å—Ç 1: Workflow –∏–∑ env
workflow1 = create_workflow_from_env()
print("‚úÖ Workflow from env –º–æ–¥–µ–ª—å:", workflow1.llm_model)

# –¢–µ—Å—Ç 2: Workflow —Å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã)
workflow2 = create_risk_assessment_workflow(quality_threshold=8.0, max_retries=5)
print("‚úÖ Workflow custom –º–æ–¥–µ–ª—å:", workflow2.llm_model)
print("‚úÖ Workflow custom quality_threshold:", workflow2.quality_threshold)
print("‚úÖ Workflow custom max_retries:", workflow2.max_retries)

print("üéØ Graph Builder –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é!")

# –¢–µ—Å—Ç 3: Workflow —Å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –º–æ–¥–µ–ª–∏
workflow3 = create_risk_assessment_workflow(llm_model="custom-model-test")
print("‚úÖ Workflow custom model:", workflow3.llm_model)

# –¢–µ—Å—Ç 4: –ó–∞–ø—É—Å–∫ main.py (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
try:
    import subprocess
    result = subprocess.run(["python", "main.py", "--help"], capture_output=True, text=True, timeout=10)
    print("‚úÖ Main.py –¥–æ—Å—Ç—É–ø–µ–Ω:", "assess" in result.stdout)
except Exception as e:
    print("‚ö†Ô∏è Main.py —Ç–µ—Å—Ç –ø—Ä–æ–ø—É—â–µ–Ω:", str(e))

print("\nüéâ –í–°–ï –ò–¢–ï–†–ê–¶–ò–ò –ó–ê–í–ï–†–®–ï–ù–´ –£–°–ü–ï–®–ù–û!")
print("üî• –£–ù–ò–§–ò–ö–ê–¶–ò–Ø LLM –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò –í–´–ü–û–õ–ù–ï–ù–ê!")
print("üöÄ –¢–µ–ø–µ—Ä—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ—Ä—É—Ç—Å—è –∏–∑ –æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞!")