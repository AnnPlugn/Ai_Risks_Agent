
"""
–°–∫—Ä–∏–ø—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–∞ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π LLM –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã –ø–æ—Å–ª–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π.
"""

import sys
import asyncio
import warnings
from pathlib import Path
from typing import Dict, List, Any


def test_imports():
    """–¢–µ—Å—Ç: –í—Å–µ –∏–º–ø–æ—Ä—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã...")
    
    tests = []
    
    # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä
    try:
        from src.config import get_global_llm_config, LLMConfigManager
        tests.append(("–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä", True, None))
    except Exception as e:
        tests.append(("–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä", False, str(e)))
    
    # –ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã
    try:
        from src.config.providers import LMStudioProvider, GigaChatProvider, AVAILABLE_PROVIDERS
        tests.append(("–ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã LLM", True, None))
    except Exception as e:
        tests.append(("–ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã LLM", False, str(e)))
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã
    try:
        from src.agents.base_agent import create_agent_config
        from src.agents.profiler_agent import create_profiler_agent
        from src.agents.critic_agent import create_critic_agent
        from src.agents.evaluator_agents import create_all_evaluator_agents
        tests.append(("–ê–≥–µ–Ω—Ç—ã", True, None))
    except Exception as e:
        tests.append(("–ê–≥–µ–Ω—Ç—ã", False, str(e)))
    
    # Workflow
    try:
        from src.workflow.graph_builder import create_risk_assessment_workflow
        tests.append(("Workflow", True, None))
    except Exception as e:
        tests.append(("Workflow", False, str(e)))
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    for test_name, success, error in tests:
        status = "‚úÖ" if success else "‚ùå"
        print(f"  {status} {test_name}")
        if error:
            print(f"      –û—à–∏–±–∫–∞: {error}")
    
    return all(test[1] for test in tests)


def test_central_config():
    """–¢–µ—Å—Ç: –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä...")
    
    try:
        from src.config import get_global_llm_config
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä
        config_manager = get_global_llm_config()
        print(f"  ‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ–∑–¥–∞–Ω: {type(config_manager).__name__}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = config_manager.get_config()
        print(f"  ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞: {config.model}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
        is_valid = config_manager.validate_configuration()
        print(f"  {'‚úÖ' if is_valid else '‚ö†Ô∏è'} –í–∞–ª–∏–¥–∞—Ü–∏—è: {is_valid}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        status = config_manager.get_status_info()
        print(f"  ‚úÖ –°—Ç–∞—Ç—É—Å: {status['provider']}")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False


def test_agents_creation():
    """–¢–µ—Å—Ç: –ê–≥–µ–Ω—Ç—ã —Å–æ–∑–¥–∞—é—Ç—Å—è –±–µ–∑ LLM –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤...")
    
    tests = []
    
    # –ü—Ä–æ—Ñ–∞–π–ª–µ—Ä
    try:
        from src.agents.profiler_agent import create_profiler_agent
        profiler = create_profiler_agent()
        tests.append(("–ü—Ä–æ—Ñ–∞–π–ª–µ—Ä", True, profiler.name))
    except Exception as e:
        tests.append(("–ü—Ä–æ—Ñ–∞–π–ª–µ—Ä", False, str(e)))
    
    # –ö—Ä–∏—Ç–∏–∫
    try:
        from src.agents.critic_agent import create_critic_agent
        critic = create_critic_agent()
        tests.append(("–ö—Ä–∏—Ç–∏–∫", True, critic.name))
    except Exception as e:
        tests.append(("–ö—Ä–∏—Ç–∏–∫", False, str(e)))
    
    # –û—Ü–µ–Ω—â–∏–∫–∏
    try:
        from src.agents.evaluator_agents import create_all_evaluator_agents
        evaluators = create_all_evaluator_agents()
        tests.append(("–û—Ü–µ–Ω—â–∏–∫–∏", True, f"{len(evaluators)} –∞–≥–µ–Ω—Ç–æ–≤"))
    except Exception as e:
        tests.append(("–û—Ü–µ–Ω—â–∏–∫–∏", False, str(e)))
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    for test_name, success, info in tests:
        status = "‚úÖ" if success else "‚ùå"
        print(f"  {status} {test_name}: {info}")
    
    return all(test[1] for test in tests)


def test_workflow_creation():
    """–¢–µ—Å—Ç: Workflow —Å–æ–∑–¥–∞–µ—Ç—Å—è –±–µ–∑ LLM –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ workflow...")
    
    try:
        from src.workflow.graph_builder import create_risk_assessment_workflow
        
        # –°–æ–∑–¥–∞–µ–º workflow
        workflow = create_risk_assessment_workflow()
        print(f"  ‚úÖ Workflow —Å–æ–∑–¥–∞–Ω: {type(workflow).__name__}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        status = workflow.get_workflow_status()
        print(f"  ‚úÖ –°—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω: {status['agents_ready']}")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False


def test_critical_methods():
    """–¢–µ—Å—Ç: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –º–µ—Ç–æ–¥—ã...")
    
    tests = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã BaseAgent
    try:
        from src.agents.base_agent import BaseAgent
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∞–≥–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ—Ç–æ–¥–æ–≤
        class TestAgent(BaseAgent):
            def get_system_prompt(self):
                return "test"
            async def process(self, input_data, assessment_id="test"):
                return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –º–µ—Ç–æ–¥–æ–≤
        critical_methods = [
            '_parse_llm_response',
            '_ensure_required_fields', 
            '_validate_and_fix_field_types',
            '_validate_business_logic',
            '_get_default_evaluation_data',
            '_get_required_result_fields'
        ]
        
        missing_methods = []
        for method_name in critical_methods:
            if not hasattr(BaseAgent, method_name):
                missing_methods.append(method_name)
        
        if missing_methods:
            tests.append((f"BaseAgent –º–µ—Ç–æ–¥—ã", False, f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {missing_methods}"))
        else:
            tests.append((f"BaseAgent –º–µ—Ç–æ–¥—ã", True, f"–í—Å–µ {len(critical_methods)} –º–µ—Ç–æ–¥–æ–≤ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç"))
            
    except Exception as e:
        tests.append((f"BaseAgent –º–µ—Ç–æ–¥—ã", False, str(e)))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã EvaluationAgent
    try:
        from src.agents.base_agent import EvaluationAgent, AgentConfig
        
        config = AgentConfig("test", "test")
        evaluator = EvaluationAgent(config, "test_risk")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–µ—Ç–æ–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã
        evaluation_methods = ['evaluate_risk', 'create_fallback_result', 'validate_result']
        
        missing_methods = []
        for method_name in evaluation_methods:
            if not hasattr(evaluator, method_name):
                missing_methods.append(method_name)
        
        if missing_methods:
            tests.append((f"EvaluationAgent –º–µ—Ç–æ–¥—ã", False, f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {missing_methods}"))
        else:
            tests.append((f"EvaluationAgent –º–µ—Ç–æ–¥—ã", True, f"–í—Å–µ {len(evaluation_methods)} –º–µ—Ç–æ–¥–æ–≤ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç"))
            
    except Exception as e:
        tests.append((f"EvaluationAgent –º–µ—Ç–æ–¥—ã", False, str(e)))
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    for test_name, success, info in tests:
        status = "‚úÖ" if success else "‚ùå"
        print(f"  {status} {test_name}: {info}")
    
    return all(test[1] for test in tests)

def test_backward_compatibility():
    """–¢–µ—Å—Ç: –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å (deprecated —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç)"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å...")
    
    # –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º warnings –¥–ª—è deprecated —Ñ—É–Ω–∫—Ü–∏–π
    with warnings.catch_warnings(record=True) as w:
        warnings.simplefilter("always")
        
        tests = []
        
        # Legacy —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞
        try:
            from src.agents.base_agent import create_agent_config_legacy
            config = create_agent_config_legacy("test", "test")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±—ã–ª–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            has_warning = any("deprecated" in str(warning.message) for warning in w)
            tests.append(("Legacy create_agent_config", True, f"Warning: {has_warning}"))
        except Exception as e:
            tests.append(("Legacy create_agent_config", False, str(e)))
        
        # Legacy —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Ñ–∞–π–ª–µ—Ä–∞
        try:
            from src.agents.profiler_agent import create_profiler_agent_legacy
            profiler = create_profiler_agent_legacy()
            tests.append(("Legacy profiler", True, profiler.name))
        except Exception as e:
            tests.append(("Legacy profiler", False, str(e)))
        
        # Legacy —Ñ—É–Ω–∫—Ü–∏—è –∫—Ä–∏—Ç–∏–∫–∞
        try:
            from src.agents.critic_agent import create_critic_agent_legacy
            critic = create_critic_agent_legacy()
            tests.append(("Legacy critic", True, critic.name))
        except Exception as e:
            tests.append(("Legacy critic", False, str(e)))
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    for test_name, success, info in tests:
        status = "‚úÖ" if success else "‚ùå"
        print(f"  {status} {test_name}: {info}")
    
    return all(test[1] for test in tests)#!/usr/bin/env python3
def test_provider_switching():
    """–¢–µ—Å—Ç: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤...")
    
    try:
        from src.config import get_global_llm_config, set_global_llm_config, LLMConfigManager
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä
        original_manager = get_global_llm_config()
        original_provider = original_manager.get_provider().config.provider_name
        print(f"  üìã –¢–µ–∫—É—â–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {original_provider}")
        
        # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å LM Studio –ø—Ä–æ–≤–∞–π–¥–µ—Ä
        try:
            lm_studio_manager = LLMConfigManager.create_with_provider_type("lm_studio")
            print("  ‚úÖ LM Studio –ø—Ä–æ–≤–∞–π–¥–µ—Ä —Å–æ–∑–¥–∞–Ω")
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ LM Studio: {e}")
            return False
        
        # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å GigaChat –ø—Ä–æ–≤–∞–π–¥–µ—Ä (–∑–∞–≥–ª—É—à–∫–∞)
        try:
            gigachat_manager = LLMConfigManager.create_with_provider_type("gigachat")
            print("  ‚úÖ GigaChat –ø—Ä–æ–≤–∞–π–¥–µ—Ä —Å–æ–∑–¥–∞–Ω (–∑–∞–≥–ª—É—à–∫–∞)")
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ GigaChat: {e}")
            return False
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä
        set_global_llm_config(original_manager)
        print("  ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False


async def test_workflow_execution():
    """–¢–µ—Å—Ç: Workflow –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ workflow...")
    
    try:
        from src.workflow.graph_builder import test_workflow_execution
        
        print("  ‚è≥ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ workflow...")
        result = await test_workflow_execution()
        
        status = "‚úÖ" if result else "‚ùå"
        print(f"  {status} –¢–µ—Å—Ç–æ–≤–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {result}")
        
        return result
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
        return False


def test_cli_integration():
    """–¢–µ—Å—Ç: CLI —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º CLI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ main.py –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è
        import main
        print("  ‚úÖ main.py –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ CLI –∫–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã
        from click.testing import CliRunner
        runner = CliRunner()
        
        # –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã status
        result = runner.invoke(main.cli, ['status', '--check-llm'])
        if result.exit_code == 0:
            print("  ‚úÖ –ö–æ–º–∞–Ω–¥–∞ status —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print(f"  ‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ status: –∫–æ–¥ {result.exit_code}")
        
        # –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã config
        result = runner.invoke(main.cli, ['config', '--show-config'])
        if result.exit_code == 0:
            print("  ‚úÖ –ö–æ–º–∞–Ω–¥–∞ config —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print(f"  ‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ config: –∫–æ–¥ {result.exit_code}")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ CLI: {e}")
        return False


def print_summary(results: Dict[str, bool]):
    """–í—ã–≤–æ–¥ —Å–≤–æ–¥–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    print("\n" + "üìä –°–í–û–î–ö–ê –í–ê–õ–ò–î–ê–¶–ò–ò".center(60, "="))
    
    passed = sum(results.values())
    total = len(results)
    
    for test_name, result in results.items():
        status = "‚úÖ" if result else "‚ùå"
        print(f"{status} {test_name}")
    
    print("=" * 60)
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–∞ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        print("üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—é –Ω–∞ GigaChat")
    else:
        print(f"‚ö†Ô∏è  –ü–†–û–ô–î–ï–ù–û {passed}/{total} –¢–ï–°–¢–û–í")
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—É–¥–∞–≤—à–∏–µ—Å—è —Ç–µ—Å—Ç—ã
        failed_tests = [name for name, result in results.items() if not result]
        print(f"\nüîß –ò—Å–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:")
        for test in failed_tests:
            print(f"   - {test}")
    
    return passed == total


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    print("üöÄ –í–ê–õ–ò–î–ê–¶–ò–Ø –ú–ò–ì–†–ê–¶–ò–ò –ù–ê –¶–ï–ù–¢–†–ê–õ–¨–ù–´–ô LLM –ö–û–ù–§–ò–ì–£–†–ê–¢–û–†")
    print("=" * 60)
    print("üéØ –¶–µ–ª—å: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π")
    print("üìã –°—Ç–∞—Ç—É—Å: –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å—Å—è")
    print("=" * 60)
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
    results = {}
    
    results["–ò–º–ø–æ—Ä—Ç—ã"] = test_imports()
    results["–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä"] = test_central_config()
    results["–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã"] = test_critical_methods()
    results["–°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤"] = test_agents_creation()
    results["–°–æ–∑–¥–∞–Ω–∏–µ workflow"] = test_workflow_creation()
    results["–û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å"] = test_backward_compatibility()
    results["–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"] = test_provider_switching()
    results["CLI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è"] = test_cli_integration()
    
    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ workflow...")
    try:
        results["–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ workflow"] = asyncio.run(test_workflow_execution())
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ async —Ç–µ—Å—Ç–∞: {e}")
        results["–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ workflow"] = False
    
    # –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É
    success = print_summary(results)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if success:
        print(f"\nüí° –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
        print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python main.py demo")
        print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ: python main.py status --detailed")
        print("3. –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å: MIGRATION_GUIDE.md")
        print("4. –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—é –Ω–∞ GigaChat")
    else:
        print(f"\nüîß –£–°–¢–†–ê–ù–ï–ù–ò–ï –û–®–ò–ë–û–ö:")
        print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å–µ —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        print("2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ .env —Ñ–∞–π–ª –æ–±–Ω–æ–≤–ª–µ–Ω")
        print("3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ LM Studio –µ—Å–ª–∏ –Ω—É–∂–Ω–æ")
        print("4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
    
    return 0 if success else 1


if __name__ == "__main__":
    sys.exit(main())