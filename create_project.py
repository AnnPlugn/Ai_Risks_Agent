# create_project.py
"""
–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
"""

import os
import subprocess
import sys
from pathlib import Path

def check_python_version():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python"""
    import sys
    
    version = sys.version_info
    required_version = (3, 12, 4)
    
    print(f"üêç –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è Python: {version.major}.{version.minor}.{version.micro}")
    
    if version < required_version:
        print(f"‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python {required_version[0]}.{required_version[1]}.{required_version[2]}+")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Python 3.12.4 –∏–ª–∏ –Ω–æ–≤–µ–µ")
        return False
    
    print("‚úÖ –í–µ—Ä—Å–∏—è Python –ø–æ–¥—Ö–æ–¥–∏—Ç")
    return True

def create_project_structure():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –ø—Ä–æ–µ–∫—Ç–∞"""
    
    directories = [
        "src",
        "src/agents", 
        "src/tools",
        "src/workflow",
        "src/models",
        "src/utils",
        "config",
        "config/prompts",
        "tests",
        "tests/fixtures",
        "logs",
        "data"
    ]
    
    print("üìÅ –°–æ–∑–¥–∞—ë–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞...")
    
    for directory in directories:
        Path(directory).mkdir(parents=True, exist_ok=True)
        print(f"   ‚úì {directory}/")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ __init__.py —Ñ–∞–π–ª–æ–≤
    init_files = [
        "src/__init__.py",
        "src/agents/__init__.py",
        "src/tools/__init__.py", 
        "src/workflow/__init__.py",
        "src/models/__init__.py",
        "src/utils/__init__.py",
        "config/__init__.py",
        "config/prompts/__init__.py",
        "tests/__init__.py"
    ]
    
    for init_file in init_files:
        Path(init_file).touch()
    
    print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞")

def create_requirements():
    """–°–æ–∑–¥–∞–Ω–∏–µ requirements.txt"""
    
    requirements = """# Core ML/AI Libraries
langgraph==0.2.21
langchain==0.2.11
langchain-community==0.2.11
langchain-openai==0.1.22

# Document Processing
docling==1.16.0
python-docx==1.1.2
openpyxl==3.1.2

# Database
sqlalchemy==2.0.23
aiosqlite==0.19.0

# HTTP/API
httpx==0.25.2
aiohttp==3.9.1

# Data Processing
pandas==2.1.4
numpy==1.24.4
pydantic==2.5.0
pydantic-settings==2.1.0

# Utilities
python-dotenv==1.0.0
click==8.1.7
rich==13.7.0
loguru==0.7.2

# Testing
pytest==7.4.3
pytest-asyncio==0.21.1"""
    
    with open("requirements.txt", "w") as f:
        f.write(requirements)
    
    print("‚úÖ requirements.txt —Å–æ–∑–¥–∞–Ω")

def create_env_file():
    """–°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞"""
    
    env_content = """# LLM Configuration
LLM_BASE_URL=http://127.0.0.1:1234
LLM_MODEL=qwen3-4b
LLM_TEMPERATURE=0.1
LLM_MAX_TOKENS=4096

# Database
DATABASE_URL=sqlite:///./ai_risk_assessment.db

# Logging
LOG_LEVEL=INFO
LOG_FILE=logs/ai_risk_assessment.log

# Risk Assessment
MAX_RETRY_COUNT=3
QUALITY_THRESHOLD=7.0
MAX_CONCURRENT_EVALUATIONS=6"""
    
    with open(".env", "w") as f:
        f.write(env_content)
    
    print("‚úÖ .env —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω")

def create_gitignore():
    """–°–æ–∑–¥–∞–Ω–∏–µ .gitignore"""
    
    gitignore = """__pycache__/
*.py[cod]
*.so
.Python
*.egg-info/
dist/
build/

# Virtual environments
venv/
env/
ai_risk_env/

# Environment
.env

# Database
*.db
*.sqlite

# Logs
logs/
*.log

# Cache
cache/

# Testing
.coverage
.pytest_cache/

# IDE
.vscode/
.idea/
*.swp

# OS
.DS_Store
Thumbs.db"""
    
    with open(".gitignore", "w") as f:
        f.write(gitignore)
    
    print("‚úÖ .gitignore —Å–æ–∑–¥–∞–Ω")

if __name__ == "__main__":
    print("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ —Å–∏—Å—Ç–µ–º—ã –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–æ–≤ –ò–ò-–∞–≥–µ–Ω—Ç–æ–≤")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python
    if not check_python_version():
        sys.exit(1)
    
    create_project_structure()
    create_requirements()
    create_env_file()
    create_gitignore()
    
    print("\n‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω!")
    print("\n–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:")
    print("- Python 3.12.4+")
    print("\n–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. python -m venv ai_risk_env")
    print("2. source ai_risk_env/bin/activate  # Linux/Mac")
    print("   ai_risk_env\\Scripts\\activate     # Windows") 
    print("3. python install_libraries.py")


# install_libraries.py
"""
–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
"""

import subprocess
import sys
from pathlib import Path

def check_virtual_env():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è conda
    if os.environ.get('CONDA_DEFAULT_ENV'):
        print(f"‚úÖ Conda –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ: {os.environ.get('CONDA_DEFAULT_ENV')}")
        return True
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è venv
    if hasattr(sys, 'real_prefix') or (hasattr(sys, 'base_prefix') and sys.base_prefix != sys.prefix):
        print("‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ")
        return True
    else:
        print("‚ùå –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ!")
        return False 

def check_python_version_venv():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏"""
    version = sys.version_info
    required_version = (3, 12, 4)
    
    print(f"üêç Python –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏: {version.major}.{version.minor}.{version.micro}")
    
    if version < required_version:
        print(f"‚ö†Ô∏è  –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è Python {required_version[0]}.{required_version[1]}.{required_version[2]}+")
        print("–ù–æ –ø–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å...")
        return True
    
    print("‚úÖ –í–µ—Ä—Å–∏—è Python –ø–æ–¥—Ö–æ–¥–∏—Ç")
    return True

def upgrade_pip():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip"""
    print("‚¨ÜÔ∏è  –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip...")
    try:
        subprocess.run([sys.executable, "-m", "pip", "install", "--upgrade", "pip"], check=True)
        print("‚úÖ pip –æ–±–Ω–æ–≤–ª–µ–Ω")
    except subprocess.CalledProcessError:
        print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å pip")

def install_requirements():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    if not Path("requirements.txt").exists():
        print("‚ùå requirements.txt –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫...")
    try:
        subprocess.run([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"], check=True)
        print("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
        return False

def install_optional_packages():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–∑–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤"""
    optional = [
        "jupyter",      # –î–ª—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤
        "matplotlib",   # –î–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
        "psutil",       # –î–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã
    ]
    
    print("üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤...")
    
    for package in optional:
        try:
            subprocess.run([sys.executable, "-m", "pip", "install", package], 
                         check=True, capture_output=True)
            print(f"   ‚úì {package}")
        except subprocess.CalledProcessError:
            print(f"   ‚ö†Ô∏è  {package} - –Ω–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")

def verify_installation():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–ª—é—á–µ–≤—ã—Ö –ø–∞–∫–µ—Ç–æ–≤"""
    key_packages = [
        "langgraph",
        "langchain", 
        "docling",
        "sqlalchemy",
        "rich",
        "click",
        "pytest"
    ]
    
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏...")
    
    failed = []
    for package in key_packages:
        try:
            __import__(package)
            print(f"   ‚úÖ {package}")
        except ImportError:
            print(f"   ‚ùå {package}")
            failed.append(package)
    
    if failed:
        print(f"\n‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å: {', '.join(failed)}")
        return False
    else:
        print("\n‚úÖ –í—Å–µ –∫–ª—é—á–µ–≤—ã–µ –ø–∞–∫–µ—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return True

def create_test_script():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞"""
    test_code = '''# test_setup.py
"""–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""

def test_imports():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫"""
    try:
        import langgraph
        import langchain
        import docling
        import sqlalchemy
        import rich
        import click
        print("‚úÖ –í—Å–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è —É—Å–ø–µ—à–Ω–æ!")
        return True
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False

def test_env():
    """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    try:
        from dotenv import load_dotenv
        import os
        
        load_dotenv()
        
        llm_url = os.getenv("LLM_BASE_URL", "http://127.0.0.1:1234")
        llm_model = os.getenv("LLM_MODEL", "qwen3-4b")
        
        print(f"‚úÖ LLM URL: {llm_url}")
        print(f"‚úÖ LLM Model: {llm_model}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ .env: {e}")
        return False

if __name__ == "__main__":
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞")
    
    success = True
    success &= test_imports()
    success &= test_env()
    
    if success:
        print("\\nüéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ —É—Å–ø–µ—à–Ω–∞!")
    else:
        print("\\n‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π")
'''
    
    with open("test_setup.py", "w") as f:
        f.write(test_code)
    
    print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–Ω (test_setup.py)")

if __name__ == "__main__":
    print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–æ–≤ –ò–ò-–∞–≥–µ–Ω—Ç–æ–≤")
    print("=" * 60)
    
    if not check_virtual_env():
        sys.exit(1)
    
    if not check_python_version_venv():
        sys.exit(1)
    
    upgrade_pip()
    
    if not install_requirements():
        sys.exit(1)
    
    install_optional_packages()
    
    if not verify_installation():
        print("\n‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–∞–∫–µ—Ç—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å, –Ω–æ –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å")
    
    create_test_script()
    
    print("\n" + "=" * 60)
    print("üéâ –£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
    print("\n–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã:")
    print("- Python 3.12.4+ ‚úÖ")
    print("- –í—Å–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã ‚úÖ")
    print("\n–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python test_setup.py")
    print("\n–ù–∞—Å—Ç—Ä–æ–π–∫–∞ LM Studio:")
    print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ LM Studio")
    print("2. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –º–æ–¥–µ–ª—å qwen3-4b") 
    print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –Ω–∞ localhost:1234")
    print("4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ: curl http://localhost:1234/v1/models")


# run_setup.py
"""
–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç - —Å–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–µ–∫—Ç –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
"""

import os
import sys
import subprocess

def main():
    print("üöÄ –ü–û–õ–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê –ü–†–û–ï–ö–¢–ê")
    print("–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: Python 3.12.4+")
    print("=" * 40)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python
    version = sys.version_info
    if version < (3, 12, 4):
        print(f"‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.12.4+, —Ç–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {version.major}.{version.minor}.{version.micro}")
        print("–û–±–Ω–æ–≤–∏—Ç–µ Python –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        return
    
    print(f"‚úÖ Python {version.major}.{version.minor}.{version.micro}")
    
    # –®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    print("\n1Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞...")
    exec(open("create_project.py").read())
    
    # –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    print("\n2Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    try:
        subprocess.run([sys.executable, "-m", "venv", "ai_risk_env"], check=True)
        print("‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ")
    except subprocess.CalledProcessError:
        print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return
    
    print("\nüìã –î–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:")
    print("1. –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ:")
    print("   Linux/Mac: source ai_risk_env/bin/activate")
    print("   Windows:   ai_risk_env\\Scripts\\activate")
    print("2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏: python install_libraries.py")
    print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ LM Studio —Å –º–æ–¥–µ–ª—å—é qwen3-4b –Ω–∞ localhost:1234")

if __name__ == "__main__":
    main()