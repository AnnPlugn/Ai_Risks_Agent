# main.py
"""
CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–æ–≤ –ò–ò-–∞–≥–µ–Ω—Ç–æ–≤
–û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É
"""

import asyncio
import json
import sys
from pathlib import Path
from typing import List, Optional
from datetime import datetime
from src.utils.llm_config_manager import get_llm_config_manager
import click
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from rich.progress import Progress, SpinnerColumn, TextColumn
from rich.tree import Tree
from rich.json import JSON

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src
sys.path.insert(0, str(Path(__file__).parent / "src"))

from src.workflow import create_workflow_from_env
from src.models.database import get_db_manager
from src.utils.logger import setup_logging, get_logger

# ===== –ù–û–í–û–ï: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π =====
from src.utils.reasoning_integration import enable_all_reasoning, setup_reasoning_env

console = Console()


@click.group()
@click.option('--log-level', default='INFO', help='–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è')
@click.option('--log-file', default='logs/ai_risk_assessment.log', help='–§–∞–π–ª –ª–æ–≥–æ–≤')
@click.option('--show-reasoning/--no-reasoning', default=True, help='–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤')
@click.pass_context
def cli(ctx, log_level, log_file, show_reasoning):
    """ü§ñ –°–∏—Å—Ç–µ–º–∞ –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–æ–≤ –ò–ò-–∞–≥–µ–Ω—Ç–æ–≤"""
    ctx.ensure_object(dict)
    
    # ===== –ù–û–í–û–ï: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π =====
    if show_reasoning:
        setup_reasoning_env()
        enable_all_reasoning()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    setup_logging(log_level=log_level, log_file=log_file)
    logger = get_logger()
    
    ctx.obj['logger'] = logger
    ctx.obj['show_reasoning'] = show_reasoning
    
    # –ö—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
    console.print(Panel.fit(
        "[bold blue]ü§ñ –°–∏—Å—Ç–µ–º–∞ –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–æ–≤ –ò–ò-–∞–≥–µ–Ω—Ç–æ–≤[/bold blue]\n"
        "–ú—É–ª—å—Ç–∏–∞–≥–µ–Ω—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–∞ –±–∞–∑–µ LangGraph\n"
        f"{'üß† –†–∞—Å—Å—É–∂–¥–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤: –í–ö–õ–Æ–ß–ï–ù–´' if show_reasoning else 'üîá –†–∞—Å—Å—É–∂–¥–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤: –í–´–ö–õ–Æ–ß–ï–ù–´'}",
        title="AI Risk Assessment System",
        border_style="blue"
    ))


@cli.command()
@click.argument('source_files', nargs=-1, required=True)
@click.option('--agent-name', '-n', help='–ò–º—è –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º–æ–≥–æ –∞–≥–µ–Ω—Ç–∞')
@click.option('--output', '-o', help='–§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (JSON)')
@click.option('--quality-threshold', '-q', default=7.0, help='–ü–æ—Ä–æ–≥ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è –∫—Ä–∏—Ç–∏–∫–∞ (0-10)')
@click.option('--max-retries', '-r', default=3, help='–ú–∞–∫—Å–∏–º—É–º –ø–æ–≤—Ç–æ—Ä–æ–≤ –æ—Ü–µ–Ω–∫–∏')
@click.option('--model', '-m', help='LLM –º–æ–¥–µ–ª—å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ .env)')
@click.pass_context
async def assess(ctx, source_files, agent_name, output, quality_threshold, max_retries, model):
    """–ó–∞–ø—É—Å–∫ –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–æ–≤ –ò–ò-–∞–≥–µ–Ω—Ç–∞"""
    logger = ctx.obj['logger']
    show_reasoning = ctx.obj.get('show_reasoning', True)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã
    validated_files = []
    for file_path in source_files:
        path = Path(file_path)
        if path.exists():
            if path.is_dir():
                # –ï—Å–ª–∏ –ø–∞–ø–∫–∞, –±–µ—Ä–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
                for ext in ['*.py', '*.js', '*.java', '*.txt', '*.md', '*.json', '*.yaml']:
                    validated_files.extend([str(f) for f in path.rglob(ext)])
            else:
                validated_files.append(str(path.absolute()))
        else:
            console.print(f"[red]‚ùå –§–∞–π–ª/–ø–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {file_path}[/red]")
            return
    
    if not validated_files:
        console.print("[red]‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞[/red]")
        return
    
    console.print(f"[green]üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {len(validated_files)}[/green]")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    for i, file_path in enumerate(validated_files[:10]):
        console.print(f"  ‚Ä¢ {file_path}")
    
    if len(validated_files) > 10:
        console.print(f"  ... –∏ –µ—â–µ {len(validated_files) - 10} —Ñ–∞–π–ª–æ–≤")
    
    # –°–æ–∑–¥–∞–µ–º workflow
    try:
        console.print("\n[yellow]‚öôÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è workflow...[/yellow]")
        workflow = create_workflow_from_env()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å LLM
        llm_healthy = await workflow.profiler.health_check()
        if not llm_healthy:
            console.print("[red]‚ùå LM Studio –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ localhost:1234[/red]")
            console.print("–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ LM Studio –∑–∞–ø—É—â–µ–Ω —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª—å—é")
            return
        
        console.print("[green]‚úÖ LLM —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω[/green]")
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        manager = get_llm_config_manager()
        console.print(f"[blue]ü§ñ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–¥–µ–ª—å: {manager.get_model()}[/blue]")
        console.print(f"[blue]üåê LLM —Å–µ—Ä–≤–µ—Ä: {manager.get_base_url()}[/blue]")
        if show_reasoning:
            console.print("[blue]üß† –†–∞—Å—Å—É–∂–¥–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏[/blue]")
        
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}[/red]")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ü–µ–Ω–∫—É —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
    assessment_id = f"cli_assessment_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    
    with Progress(
        SpinnerColumn(),
        TextColumn("[progress.description]{task.description}"),
        console=console
    ) as progress:
        
        task = progress.add_task("üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–æ–≤...", total=None)
        
        try:
            result = await workflow.run_assessment(
                source_files=validated_files,
                agent_name=agent_name,
                assessment_id=assessment_id
            )
            
            print("\nüîç DEBUG: –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ workflow:")
            print(f"result.keys(): {list(result.keys())}")
            print(f"result['success']: {result.get('success')}")
            print(f"result['current_step']: {result.get('current_step')}")

            final_assessment = result.get("final_assessment")
            if final_assessment:
                print(f"final_assessment.keys(): {list(final_assessment.keys())}")
                print(f"final_assessment['assessment_id']: {final_assessment.get('assessment_id')}")
                print(f"final_assessment['overall_risk_level']: {final_assessment.get('overall_risk_level')}")
                print(f"final_assessment['overall_risk_score']: {final_assessment.get('overall_risk_score')}")
                
                risk_evaluations = final_assessment.get("risk_evaluations", {})
                print(f"risk_evaluations.keys(): {list(risk_evaluations.keys()) if risk_evaluations else 'None'}")
                
                recommendations = final_assessment.get("priority_recommendations", [])
                print(f"recommendations count: {len(recommendations) if recommendations else 0}")
            else:
                print("final_assessment: None")

            progress.update(task, completed=True)
            
            if result["success"]:
                await _display_assessment_result(result, output)
                logger.bind_context(assessment_id, "cli").info(
                    f"‚úÖ –û—Ü–µ–Ω–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ: {assessment_id}"
                )
            else:
                console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}[/red]")
                
        except KeyboardInterrupt:
            progress.update(task, description="‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            console.print("\n[yellow]‚ö†Ô∏è –û—Ü–µ–Ω–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º[/yellow]")
            
        except Exception as e:
            progress.update(task, description="‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
            console.print(f"\n[red]‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}[/red]")
            logger.bind_context(assessment_id, "cli").error(f"–û—à–∏–±–∫–∞ CLI: {e}")


# ===== –ù–û–í–û–ï: –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ë–î =====
@cli.command()
@click.pass_context
async def test_db(ctx):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        console.print("[blue]üóÑÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...[/blue]")
        
        db_manager = await get_db_manager()
        console.print("[green]‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ[/green]")
        
        # –ü—Ä–æ—Å—Ç–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        from sqlalchemy import text
        async with db_manager.async_session() as session:
            
            tables = ['agent_profiles', 'risk_assessments', 'risk_evaluations']
            
            stats_table = Table(title="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î")
            stats_table.add_column("–¢–∞–±–ª–∏—Ü–∞", style="cyan")
            stats_table.add_column("–ó–∞–ø–∏—Å–µ–π", style="white")
            
            for table in tables:
                try:
                    result = await session.execute(text(f"SELECT COUNT(*) FROM {table}"))
                    count = result.scalar()
                    stats_table.add_row(table, str(count))
                except Exception as e:
                    stats_table.add_row(table, f"–û—à–∏–±–∫–∞: {str(e)[:30]}")
            
            console.print(stats_table)
        
        await db_manager.close()
        
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ë–î: {e}[/red]")


@cli.command()
@click.argument('assessment_id')
@click.option('--output', '-o', help='–§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞')
@click.pass_context
async def show(ctx, assessment_id, output):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ü–µ–Ω–∫–∏ –ø–æ ID"""
    try:
        db_manager = await get_db_manager()
        assessment_data = await db_manager.get_risk_assessment(assessment_id)
        
        if not assessment_data:
            console.print(f"[red]‚ùå –û—Ü–µ–Ω–∫–∞ —Å ID {assessment_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞[/red]")
            return
        
        await _display_saved_assessment(assessment_data, output)
        
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏: {e}[/red]")


@cli.command()
@click.option('--limit', '-l', default=10, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—Ü–µ–Ω–æ–∫')
@click.pass_context
async def list_assessments(ctx, limit):
    """–°–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—Ü–µ–Ω–æ–∫"""
    try:
        db_manager = await get_db_manager()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ü–µ–Ω–æ–∫
        from sqlalchemy import select, desc
        from src.models.database import RiskAssessmentDB
        
        async with db_manager.async_session() as session:
            stmt = select(RiskAssessmentDB).order_by(desc(RiskAssessmentDB.assessment_timestamp)).limit(limit)
            result = await session.execute(stmt)
            assessments = result.scalars().all()
            
            if not assessments:
                console.print("[yellow]üì≠ –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫[/yellow]")
                return
            
            table = Table(title=f"üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(assessments)} –æ—Ü–µ–Ω–æ–∫")
            table.add_column("ID", style="cyan")
            table.add_column("–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞", style="white")
            table.add_column("–ë–∞–ª–ª", style="white")
            table.add_column("–î–∞—Ç–∞", style="green")
            
            for assessment in assessments:
                risk_level = assessment.overall_risk_level
                color = {
                    "low": "green",
                    "medium": "yellow", 
                    "high": "red"
                }.get(risk_level, "white")
                
                table.add_row(
                    assessment.id[:8] + "...",
                    f"[{color}]{risk_level.upper()}[/{color}]",
                    str(assessment.overall_risk_score),
                    str(assessment.assessment_timestamp)[:19]
                )
            
            console.print(table)
        
        await db_manager.close()
        
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞: {e}[/red]")


@cli.command()
@click.option('--check-llm', is_flag=True, help='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å LLM —Å–µ—Ä–≤–µ—Ä')
@click.option('--check-db', is_flag=True, help='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö')
@click.pass_context
async def status(ctx, check_llm, check_db):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
    results = []
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ LLM
    if check_llm or not (check_db):
        try:
            from src.utils.llm_client import get_llm_client
            client = await get_llm_client()
            
            if await client.health_check():
                results.append(("‚úÖ LLM —Å–µ—Ä–≤–µ—Ä", "–î–æ—Å—Ç—É–ø–µ–Ω", "green"))
                
                try:
                    models = await client.list_models()
                    results.append(("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏", f"{len(models)} –º–æ–¥–µ–ª–µ–π", "blue"))
                except:
                    results.append(("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏", "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ", "yellow"))
            else:
                results.append(("‚ùå LLM —Å–µ—Ä–≤–µ—Ä", "–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω", "red"))
                
        except Exception as e:
            results.append(("‚ùå LLM —Å–µ—Ä–≤–µ—Ä", f"–û—à–∏–±–∫–∞: {str(e)[:50]}", "red"))
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if check_db or not (check_llm):
        try:
            db_manager = await get_db_manager()
            results.append(("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", "–î–æ—Å—Ç—É–ø–Ω–∞", "green"))
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            try:
                from sqlalchemy import text
                async with db_manager.async_session() as session:
                    result = await session.execute(text("SELECT COUNT(*) FROM risk_assessments"))
                    count = result.scalar()
                    results.append(("üìä –û—Ü–µ–Ω–æ–∫ –≤ –ë–î", str(count), "blue"))
            except:
                results.append(("üìä –û—Ü–µ–Ω–æ–∫ –≤ –ë–î", "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ", "yellow"))
                
            await db_manager.close()
                
        except Exception as e:
            results.append(("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", f"–û—à–∏–±–∫–∞: {str(e)[:50]}", "red"))
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    table = Table(title="–°—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã")
    table.add_column("–ö–æ–º–ø–æ–Ω–µ–Ω—Ç", style="bold")
    table.add_column("–°—Ç–∞—Ç—É—Å")
    
    for component, status, color in results:
        table.add_row(component, f"[{color}]{status}[/{color}]")
    
    console.print(table)


# –ó–∞–º–µ–Ω–∏—Ç–µ demo –∫–æ–º–∞–Ω–¥—É –≤ main.py –Ω–∞ —ç—Ç—É –≤–µ—Ä—Å–∏—é:

@cli.command()
@click.pass_context
async def demo(ctx):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    console.print("[blue]üé≠ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã...[/blue]\n")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
    demo_dir = Path("demo_data")
    demo_dir.mkdir(exist_ok=True)
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –∞–≥–µ–Ω—Ç
    test_agent_code = '''# demo_agent.py
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –ò–ò-–∞–≥–µ–Ω—Ç –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–æ–≤
"""

class DemoAgent:
    def __init__(self):
        self.name = "DemoAgent"
        self.version = "1.0"
        self.system_prompt = """
        –¢—ã - –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –±–∞–Ω–∫–∞.
        –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —É—Å–ª—É–≥–∞—Ö.
        
        –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:
        - –ù–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–æ–≤
        - –ù–µ –¥–∞–≤–∞–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Å–æ–≤–µ—Ç–æ–≤
        - –ù–∞–ø—Ä–∞–≤–ª—è–π —Å–ª–æ–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º
        """
    
    def process_query(self, query: str) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞"""
        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if "–±–∞–ª–∞–Ω—Å" in query.lower():
            return "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å –≤ –º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –±–∞–Ω–∫–∞"
        elif "–∫—Ä–µ–¥–∏—Ç" in query.lower():
            return "–î–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –∫—Ä–µ–¥–∏—Ç–∞–º –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫—Ä–µ–¥–∏—Ç–Ω–æ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É"
        else:
            return "–ö–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å–µ–≥–æ–¥–Ω—è?"
'''
    
    test_description = '''–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∞–≥–µ–Ω—Ç
    
–ù–∞–∑–≤–∞–Ω–∏–µ: DemoAgent
–¢–∏–ø: –ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫
–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è: –ö–ª–∏–µ–Ω—Ç—ã –±–∞–Ω–∫–∞
–ê–≤—Ç–æ–Ω–æ–º–Ω–æ—Å—Ç—å: –ü–æ–¥ –Ω–∞–¥–∑–æ—Ä–æ–º

–û–ø–∏—Å–∞–Ω–∏–µ:
–ü—Ä–æ—Å—Ç–æ–π —á–∞—Ç-–±–æ—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –±–∞–∑–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∫–ª–∏–µ–Ω—Ç–æ–≤ –±–∞–Ω–∫–∞.
–ò–º–µ–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏ —Ç—Ä–µ–±—É–µ—Ç —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –Ω–∞–¥–∑–æ—Ä–∞.

–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- –û—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã
- –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º
- –ü—Ä–æ—Å—Ç–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —É—Å–ª—É–≥–∞–º

–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:
- –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
- –ù–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π
- –¢—Ä–µ–±—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
'''
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
        (demo_dir / "demo_agent.py").write_text(test_agent_code, encoding='utf-8')
        (demo_dir / "description.txt").write_text(test_description, encoding='utf-8')
        
        console.print(f"[green]üìÅ –°–æ–∑–¥–∞–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –≤ {demo_dir}[/green]")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ü–µ–Ω–∫—É –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ workflow (–ë–ï–ó —Ä–µ–∫—É—Ä—Å–∏–∏!)
        demo_files = [str(demo_dir / "demo_agent.py"), str(demo_dir / "description.txt")]
        
        console.print("[blue]üìä –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—É—é –æ—Ü–µ–Ω–∫—É...[/blue]\n")
        
        # –°–æ–∑–¥–∞–µ–º workflow
        workflow = create_workflow_from_env()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º LLM
        llm_healthy = await workflow.profiler.health_check()
        if not llm_healthy:
            console.print("[red]‚ùå LM Studio –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ LM Studio —Å –º–æ–¥–µ–ª—å—é qwen3-4b[/red]")
            return
        
        with Progress(SpinnerColumn(), TextColumn("[progress.description]{task.description}")) as progress:
            task = progress.add_task("üîÑ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞...", total=None)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º workflow –Ω–∞–ø—Ä—è–º—É—é
            result = await workflow.run_assessment(
                source_files=demo_files,
                agent_name="DemoAgent",
                assessment_id=f"demo_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
            )
            
            progress.update(task, completed=True)
            
            if result["success"]:
                console.print("\n[green]‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ![/green]")
                await _display_assessment_result(result)
            else:
                console.print(f"\n[red]‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {result.get('error')}[/red]")
                
    except Exception as e:
        console.print(f"\n[red]‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}[/red]")
        import traceback
        console.print(f"[dim]{traceback.format_exc()}[/dim]")
    
    finally:
        # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
        try:
            import shutil
            if demo_dir.exists():
                shutil.rmtree(demo_dir)
                console.print(f"[dim]üóëÔ∏è –û—á–∏—â–µ–Ω—ã –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã[/dim]")
        except:
            pass


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è main.py
# –ù–∞–π–¥–∏—Ç–µ –∏ –∑–∞–º–µ–Ω–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é _display_assessment_result

async def _display_assessment_result(result, output_file=None):
    """–ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—Ü–µ–Ω–∫–∏"""
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–ª—é—á–∏
    assessment = result.get("final_assessment") or result.get("assessment")
    
    if not assessment:
        console.print("[red]‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è[/red]")
        console.print(f"[dim]DEBUG: –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏ –≤ result: {list(result.keys())}[/dim]")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ö–æ—Ç—è –±—ã –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ result
        if result.get("success"):
            assessment_id = result.get("assessment_id", "unknown")
            processing_time = result.get("processing_time", 0)
            console.print(f"[yellow]Assessment ID: {assessment_id}[/yellow]")
            console.print(f"[yellow]–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {processing_time:.1f} —Å–µ–∫—É–Ω–¥[/yellow]")
            console.print("[yellow]‚ö†Ô∏è –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã[/yellow]")
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å fallback –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    assessment_id = assessment.get('assessment_id', result.get('assessment_id', 'unknown'))
    overall_risk_level = assessment.get('overall_risk_level', 'unknown')
    overall_risk_score = assessment.get('overall_risk_score', 0)
    processing_time = assessment.get('processing_time_seconds', result.get('processing_time', 0))
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    console.print(Panel(
        f"[bold green]üéØ –û—Ü–µ–Ω–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ![/bold green]\n\n"
        f"Assessment ID: {assessment_id}\n"
        f"–û–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: [bold]{overall_risk_level.upper()}[/bold]\n"
        f"–û–±—â–∏–π –±–∞–ª–ª: {overall_risk_score}/25\n"
        f"–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.1f} —Å–µ–∫—É–Ω–¥",
        title="üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ü–µ–Ω–∫–∏",
        border_style="green"
    ))
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–æ–≤
    risk_evaluations = assessment.get("risk_evaluations", {})
    if risk_evaluations:
        table = Table(title="üîç –î–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–æ–≤")
        table.add_column("–¢–∏–ø —Ä–∏—Å–∫–∞", style="cyan")
        table.add_column("–ë–∞–ª–ª", style="white")
        table.add_column("–£—Ä–æ–≤–µ–Ω—å", style="white")
        table.add_column("–î–µ—Ç–∞–ª–∏", style="dim")
        
        # –ù–∞–∑–≤–∞–Ω–∏—è —Ä–∏—Å–∫–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        risk_names = {
            'ethical': '–≠—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∏—Å–∫–∏',
            'social': '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–∏—Å–∫–∏', 
            'security': '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö',
            'stability': '–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å LLM',
            'autonomy': '–ê–≤—Ç–æ–Ω–æ–º–Ω–æ—Å—Ç—å',
            'regulatory': '–†–µ–≥—É–ª—è—Ç–æ—Ä–Ω—ã–µ —Ä–∏—Å–∫–∏'
        }
        
        for risk_type, evaluation in risk_evaluations.items():
            risk_name = risk_names.get(risk_type, risk_type)
            
            if isinstance(evaluation, dict):
                level = evaluation.get('risk_level', 'unknown')
                total_score = evaluation.get('total_score', 0)
                prob_score = evaluation.get('probability_score', 0)
                impact_score = evaluation.get('impact_score', 0)
                
                color = {
                    'low': 'green',
                    'medium': 'yellow',
                    'high': 'red'
                }.get(level, 'white')
                
                table.add_row(
                    risk_name,
                    f"{total_score}/25",
                    f"[{color}]{level.upper()}[/{color}]",
                    f"P:{prob_score}/5 √ó I:{impact_score}/5"
                )
            else:
                table.add_row(
                    risk_name,
                    "N/A",
                    "[dim]–û–®–ò–ë–ö–ê[/dim]",
                    "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö"
                )
        
        console.print(table)
    else:
        console.print("[yellow]‚ö†Ô∏è –î–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã[/yellow]")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    recommendations = assessment.get("priority_recommendations", [])
    if recommendations:
        console.print("\n[bold green]üí° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:[/bold green]")
        for i, rec in enumerate(recommendations[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ 10 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            console.print(f"  {i}. {rec}")
    else:
        console.print("\n[yellow]‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã[/yellow]")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É –ø–æ –∫–∞—á–µ—Å—Ç–≤—É (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
    eval_summary = assessment.get("evaluation_summary", {})
    if eval_summary:
        success_rate = eval_summary.get("success_rate", 0)
        successful_count = eval_summary.get("successful_evaluations", 0)
        total_count = eval_summary.get("total_evaluations", 6)
        
        console.print(f"\n[bold blue]üìà –ö–∞—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–∫–∏:[/bold blue]")
        console.print(f"  ‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫: {successful_count}/{total_count} ({success_rate:.1%})")
        
        if success_rate >= 0.8:
            console.print("  ‚Ä¢ [green]üèÜ –û—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤![/green]")
        elif success_rate >= 0.5:
            console.print("  ‚Ä¢ [yellow]üëç –•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤[/yellow]")
        else:
            console.print("  ‚Ä¢ [red]‚ö†Ô∏è –ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤[/red]")
    
    # –°–≤–æ–¥–∫–∞ –ø–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–º –ø—Ä–æ–±–ª–µ–º–∞–º 
    highest_risks = []
    if risk_evaluations:
        for risk_type, evaluation in risk_evaluations.items():
            if isinstance(evaluation, dict):
                score = evaluation.get('total_score', 0)
                if score > 15:  # High risk
                    highest_risks.append(f"{risk_names.get(risk_type, risk_type)} ({score}/25)")
    
    if highest_risks:
        console.print(f"\n[bold red]‚ö†Ô∏è –û–±–ª–∞—Å—Ç–∏ –≤—ã—Å–æ–∫–æ–≥–æ —Ä–∏—Å–∫–∞:[/bold red]")
        for risk in highest_risks:
            console.print(f"  ‚Ä¢ {risk}")
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
    if output_file:
        try:
            output_path = Path(output_file)
            output_path.parent.mkdir(parents=True, exist_ok=True)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            save_data = {
                "assessment": assessment,
                "metadata": {
                    "timestamp": datetime.now().isoformat(),
                    "version": "1.0",
                    "tool": "AI_Risk_Assessment",
                    "assessment_id": assessment_id
                },
                "raw_result": result  # –í–∫–ª—é—á–∞–µ–º –ø–æ–ª–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            }
            
            with open(output_path, 'w', encoding='utf-8') as f:
                json.dump(save_data, f, ensure_ascii=False, indent=2, default=str)
            
            console.print(f"\n[green]üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_file}[/green]")
        except Exception as e:
            console.print(f"\n[red]‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}[/red]")


async def _display_saved_assessment(assessment_data, output_file=None):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –æ—Ü–µ–Ω–∫–∏"""
    console.print("[blue]üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö[/blue]")
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI"""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        Path("logs").mkdir(exist_ok=True)
        Path("data").mkdir(exist_ok=True)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º CLI
        cli()
    except KeyboardInterrupt:
        console.print("\n[yellow]üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è![/yellow]")
    except Exception as e:
        console.print(f"\n[red]‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}[/red]")
        sys.exit(1)


if __name__ == "__main__":
    import asyncio
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ø–∞—Ç—á –¥–ª—è async –∫–æ–º–∞–Ω–¥
    def make_async(f):
        def wrapper(*args, **kwargs):
            return asyncio.run(f(*args, **kwargs))
        return wrapper
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—á
    assess.callback = make_async(assess.callback)
    show.callback = make_async(show.callback)
    list_assessments.callback = make_async(list_assessments.callback)
    status.callback = make_async(status.callback)
    demo.callback = make_async(demo.callback)
    # test_db.callback = make_async(test_db.callback)  # –ü–æ–∫–∞ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ
    
    main()