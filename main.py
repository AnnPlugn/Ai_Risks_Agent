# main.py
"""
CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–æ–≤ –ò–ò-–∞–≥–µ–Ω—Ç–æ–≤
–û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É
"""

import asyncio
import json
import sys
from pathlib import Path
from typing import List, Optional
from datetime import datetime

import click
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from rich.progress import Progress, SpinnerColumn, TextColumn
from rich.tree import Tree
from rich.json import JSON

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src
sys.path.insert(0, str(Path(__file__).parent / "src"))

from src.workflow import create_workflow_from_env
from src.models.database import get_db_manager
from src.utils.logger import setup_logging, get_logger


console = Console()


@click.group()
@click.option('--log-level', default='INFO', help='–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è')
@click.option('--log-file', default='logs/ai_risk_assessment.log', help='–§–∞–π–ª –ª–æ–≥–æ–≤')
@click.pass_context
def cli(ctx, log_level, log_file):
    """ü§ñ –°–∏—Å—Ç–µ–º–∞ –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–æ–≤ –ò–ò-–∞–≥–µ–Ω—Ç–æ–≤"""
    ctx.ensure_object(dict)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    setup_logging(log_level=log_level, log_file=log_file)
    logger = get_logger()
    
    ctx.obj['logger'] = logger
    
    # –ö—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
    console.print(Panel.fit(
        "[bold blue]ü§ñ –°–∏—Å—Ç–µ–º–∞ –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–æ–≤ –ò–ò-–∞–≥–µ–Ω—Ç–æ–≤[/bold blue]\n"
        "–ú—É–ª—å—Ç–∏–∞–≥–µ–Ω—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–∞ –±–∞–∑–µ LangGraph",
        title="AI Risk Assessment System",
        border_style="blue"
    ))


@cli.command()
@click.argument('source_files', nargs=-1, required=True)
@click.option('--agent-name', '-n', help='–ò–º—è –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º–æ–≥–æ –∞–≥–µ–Ω—Ç–∞')
@click.option('--output', '-o', help='–§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (JSON)')
@click.option('--quality-threshold', '-q', default=7.0, help='–ü–æ—Ä–æ–≥ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è –∫—Ä–∏—Ç–∏–∫–∞ (0-10)')
@click.option('--max-retries', '-r', default=3, help='–ú–∞–∫—Å–∏–º—É–º –ø–æ–≤—Ç–æ—Ä–æ–≤ –æ—Ü–µ–Ω–∫–∏')
@click.option('--model', '-m', default='qwen3-4b', help='LLM –º–æ–¥–µ–ª—å')
@click.pass_context
async def assess(ctx, source_files, agent_name, output, quality_threshold, max_retries, model):
    """–ó–∞–ø—É—Å–∫ –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–æ–≤ –ò–ò-–∞–≥–µ–Ω—Ç–∞"""
    logger = ctx.obj['logger']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã
    validated_files = []
    for file_path in source_files:
        path = Path(file_path)
        if path.exists():
            validated_files.append(str(path.absolute()))
        else:
            console.print(f"[red]‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}[/red]")
            return
    
    if not validated_files:
        console.print("[red]‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞[/red]")
        return
    
    console.print(f"[green]üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {len(validated_files)}[/green]")
    for file_path in validated_files:
        console.print(f"  ‚Ä¢ {file_path}")
    
    # –°–æ–∑–¥–∞–µ–º workflow
    try:
        console.print("\n[yellow]‚öôÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è workflow...[/yellow]")
        workflow = create_workflow_from_env()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å LLM
        llm_healthy = await workflow.profiler.health_check()
        if not llm_healthy:
            console.print("[red]‚ùå LM Studio –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ localhost:1234[/red]")
            console.print("–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ LM Studio –∑–∞–ø—É—â–µ–Ω —Å –º–æ–¥–µ–ª—å—é qwen3-4b")
            return
        
        console.print("[green]‚úÖ LLM —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω[/green]")
        
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}[/red]")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ü–µ–Ω–∫—É —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
    assessment_id = f"cli_assessment_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    
    with Progress(
        SpinnerColumn(),
        TextColumn("[progress.description]{task.description}"),
        console=console
    ) as progress:
        
        task = progress.add_task("üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–æ–≤...", total=None)
        
        try:
            result = await workflow.run_assessment(
                source_files=validated_files,
                agent_name=agent_name,
                assessment_id=assessment_id
            )
            
            progress.update(task, completed=True)
            
            if result["success"]:
                await _display_assessment_result(result, output)
                logger.bind_context(assessment_id, "cli").info(
                    f"‚úÖ –û—Ü–µ–Ω–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ: {assessment_id}"
                )
            else:
                console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}[/red]")
                
        except KeyboardInterrupt:
            progress.update(task, description="‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            console.print("\n[yellow]‚ö†Ô∏è –û—Ü–µ–Ω–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º[/yellow]")
            
        except Exception as e:
            progress.update(task, description="‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
            console.print(f"\n[red]‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}[/red]")
            logger.bind_context(assessment_id, "cli").error(f"–û—à–∏–±–∫–∞ CLI: {e}")


@cli.command()
@click.argument('assessment_id')
@click.option('--output', '-o', help='–§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞')
@click.pass_context
async def show(ctx, assessment_id, output):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ü–µ–Ω–∫–∏ –ø–æ ID"""
    try:
        db_manager = await get_db_manager()
        assessment_data = await db_manager.get_risk_assessment(assessment_id)
        
        if not assessment_data:
            console.print(f"[red]‚ùå –û—Ü–µ–Ω–∫–∞ —Å ID {assessment_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞[/red]")
            return
        
        await _display_saved_assessment(assessment_data, output)
        
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏: {e}[/red]")


@cli.command()
@click.option('--limit', '-l', default=10, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—Ü–µ–Ω–æ–∫')
@click.pass_context
async def list_assessments(ctx, limit):
    """–°–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—Ü–µ–Ω–æ–∫"""
    try:
        db_manager = await get_db_manager()
        profiles = await db_manager.list_agent_profiles(limit=limit)
        
        if not profiles:
            console.print("[yellow]üì≠ –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫[/yellow]")
            return
        
        table = Table(title="ü§ñ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –ò–ò-–∞–≥–µ–Ω—Ç–æ–≤")
        table.add_column("ID", style="cyan")
        table.add_column("–ò–º—è –∞–≥–µ–Ω—Ç–∞", style="green")
        table.add_column("–¢–∏–ø", style="blue")
        table.add_column("–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", style="dim")
        
        for profile in profiles:
            table.add_row(
                profile["id"][:8] + "...",
                profile["name"],
                profile["agent_type"],
                profile["updated_at"].strftime("%Y-%m-%d %H:%M")
            )
        
        console.print(table)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ –ø–µ—Ä–≤–æ–π –æ—Ü–µ–Ω–∫–µ
        if profiles:
            first_profile = profiles[0]
            assessments = await db_manager.get_assessments_for_agent(first_profile["id"], limit=1)
            
            if assessments:
                latest = assessments[0]
                console.print(f"\n[dim]üí° –î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: python main.py show {latest['id']}[/dim]")
        
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞: {e}[/red]")


@cli.command()
@click.option('--check-llm', is_flag=True, help='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å LLM')
@click.option('--check-db', is_flag=True, help='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö')
@click.pass_context
async def status(ctx, check_llm, check_db):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
    console.print("[blue]üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã...[/blue]\n")
    
    results = []
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ LLM
    if check_llm or not (check_db):
        try:
            workflow = create_workflow_from_env()
            llm_healthy = await workflow.profiler.health_check()
            
            if llm_healthy:
                results.append(("‚úÖ LLM —Å–µ—Ä–≤–µ—Ä", "–î–æ—Å—Ç—É–ø–µ–Ω", "green"))
                
                # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª–∏
                try:
                    models = await workflow.profiler.llm_client.get_available_models()
                    results.append(("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏", f"{len(models)} –º–æ–¥–µ–ª–µ–π", "blue"))
                except:
                    results.append(("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏", "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ", "yellow"))
            else:
                results.append(("‚ùå LLM —Å–µ—Ä–≤–µ—Ä", "–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω", "red"))
                
        except Exception as e:
            results.append(("‚ùå LLM —Å–µ—Ä–≤–µ—Ä", f"–û—à–∏–±–∫–∞: {str(e)[:50]}", "red"))
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if check_db or not (check_llm):
        try:
            db_manager = await get_db_manager()
            profiles = await db_manager.list_agent_profiles(limit=1)
            results.append(("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", "–î–æ—Å—Ç—É–ø–Ω–∞", "green"))
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            try:
                total_profiles = len(await db_manager.list_agent_profiles(limit=1000))
                results.append(("üìä –ê–≥–µ–Ω—Ç–æ–≤ –≤ –ë–î", str(total_profiles), "blue"))
            except:
                results.append(("üìä –ê–≥–µ–Ω—Ç–æ–≤ –≤ –ë–î", "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ", "yellow"))
                
        except Exception as e:
            results.append(("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", f"–û—à–∏–±–∫–∞: {str(e)[:50]}", "red"))
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    table = Table(title="–°—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã")
    table.add_column("–ö–æ–º–ø–æ–Ω–µ–Ω—Ç", style="bold")
    table.add_column("–°—Ç–∞—Ç—É—Å")
    
    for component, status, color in results:
        table.add_row(component, f"[{color}]{status}[/{color}]")
    
    console.print(table)


@cli.command()
@click.pass_context
async def demo(ctx):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    console.print("[blue]üé≠ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã...[/blue]\n")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
    demo_dir = Path("demo_data")
    demo_dir.mkdir(exist_ok=True)
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –∞–≥–µ–Ω—Ç
    test_agent_code = '''# demo_agent.py
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –ò–ò-–∞–≥–µ–Ω—Ç –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–æ–≤
"""

class DemoAgent:
    def __init__(self):
        self.name = "DemoAgent"
        self.version = "1.0"
        self.system_prompt = """
        –¢—ã - –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –±–∞–Ω–∫–∞.
        –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —É—Å–ª—É–≥–∞—Ö.
        
        –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:
        - –ù–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–æ–≤
        - –ù–µ –¥–∞–≤–∞–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Å–æ–≤–µ—Ç–æ–≤
        - –ù–∞–ø—Ä–∞–≤–ª—è–π —Å–ª–æ–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º
        """
    
    def process_query(self, query: str) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞"""
        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if "–±–∞–ª–∞–Ω—Å" in query.lower():
            return "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å –≤ –º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –±–∞–Ω–∫–∞"
        elif "–∫—Ä–µ–¥–∏—Ç" in query.lower():
            return "–î–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –∫—Ä–µ–¥–∏—Ç–∞–º –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫—Ä–µ–¥–∏—Ç–Ω–æ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É"
        else:
            return "–ö–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å–µ–≥–æ–¥–Ω—è?"
'''
    
    test_description = '''–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∞–≥–µ–Ω—Ç
    
–ù–∞–∑–≤–∞–Ω–∏–µ: DemoAgent
–¢–∏–ø: –ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫
–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è: –ö–ª–∏–µ–Ω—Ç—ã –±–∞–Ω–∫–∞
–ê–≤—Ç–æ–Ω–æ–º–Ω–æ—Å—Ç—å: –ü–æ–¥ –Ω–∞–¥–∑–æ—Ä–æ–º

–û–ø–∏—Å–∞–Ω–∏–µ:
–ü—Ä–æ—Å—Ç–æ–π —á–∞—Ç-–±–æ—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –±–∞–∑–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∫–ª–∏–µ–Ω—Ç–æ–≤ –±–∞–Ω–∫–∞.
–ò–º–µ–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏ —Ç—Ä–µ–±—É–µ—Ç —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –Ω–∞–¥–∑–æ—Ä–∞.

–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- –û—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã
- –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º
- –ü—Ä–æ—Å—Ç–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —É—Å–ª—É–≥–∞–º

–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:
- –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
- –ù–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π
- –¢—Ä–µ–±—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
'''
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
    (demo_dir / "demo_agent.py").write_text(test_agent_code, encoding='utf-8')
    (demo_dir / "description.txt").write_text(test_description, encoding='utf-8')
    
    console.print(f"[green]üìÅ –°–æ–∑–¥–∞–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –≤ {demo_dir}[/green]")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ü–µ–Ω–∫—É
    demo_files = [str(demo_dir / "demo_agent.py"), str(demo_dir / "description.txt")]
    
    try:
        workflow = create_workflow_from_env()
        
        with Progress(SpinnerColumn(), TextColumn("[progress.description]{task.description}")) as progress:
            task = progress.add_task("üîÑ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞...", total=None)
            
            result = await workflow.run_assessment(
                source_files=demo_files,
                agent_name="DemoAgent"
            )
            
            progress.update(task, completed=True)
            
            if result["success"]:
                console.print("\n[green]‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ![/green]")
                await _display_assessment_result(result)
            else:
                console.print(f"\n[red]‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {result.get('error')}[/red]")
                
    except Exception as e:
        console.print(f"\n[red]‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}[/red]")
    
    # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
    try:
        import shutil
        shutil.rmtree(demo_dir)
        console.print(f"[dim]üóëÔ∏è –û—á–∏—â–µ–Ω—ã –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã[/dim]")
    except:
        pass


# ===============================
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# ===============================

async def _display_assessment_result(result: dict, output_file: Optional[str] = None):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ—Ü–µ–Ω–∫–∏"""
    assessment = result.get("final_assessment")
    if not assessment:
        console.print("[red]‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏[/red]")
        return
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    console.print("\n" + "="*60)
    console.print(Panel.fit(
        f"[bold green]‚úÖ –û—Ü–µ–Ω–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞[/bold green]\n"
        f"ID: {result['assessment_id']}\n"
        f"–í—Ä–µ–º—è: {result.get('processing_time', 0):.1f}—Å",
        title="–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ü–µ–Ω–∫–∏",
        border_style="green"
    ))
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≥–µ–Ω—Ç–µ
    agent_info = assessment.get("agent_profile", {})
    console.print(f"\n[bold blue]ü§ñ –ê–≥–µ–Ω—Ç: {agent_info.get('name', 'Unknown')}[/bold blue]")
    console.print(f"–¢–∏–ø: {agent_info.get('agent_type', 'unknown')}")
    console.print(f"–û–ø–∏—Å–∞–Ω–∏–µ: {agent_info.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')[:100]}...")
    
    # –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    overall_score = assessment.get("overall_risk_score", 0)
    overall_level = assessment.get("overall_risk_level", "unknown")
    
    level_colors = {"low": "green", "medium": "yellow", "high": "red"}
    level_color = level_colors.get(overall_level, "white")
    
    console.print(f"\n[bold]üìä –û–±—â–∏–π —Ä–∏—Å–∫: [{level_color}]{overall_level.upper()}[/{level_color}] ({overall_score}/25)[/bold]")
    
    # –¢–∞–±–ª–∏—Ü–∞ —Ä–∏—Å–∫–æ–≤
    risk_evaluations = assessment.get("risk_evaluations", {})
    if risk_evaluations:
        table = Table(title="–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —Ç–∏–ø–∞–º —Ä–∏—Å–∫–æ–≤")
        table.add_column("–¢–∏–ø —Ä–∏—Å–∫–∞", style="bold")
        table.add_column("–ë–∞–ª–ª", justify="center")
        table.add_column("–£—Ä–æ–≤–µ–Ω—å", justify="center")
        table.add_column("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å", justify="center")
        table.add_column("–í–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ", justify="center")
        
        risk_names = {
            "ethical": "–≠—Ç–∏—á–µ—Å–∫–∏–µ",
            "stability": "–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å", 
            "security": "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å",
            "autonomy": "–ê–≤—Ç–æ–Ω–æ–º–Ω–æ—Å—Ç—å",
            "regulatory": "–†–µ–≥—É–ª—è—Ç–æ—Ä–Ω—ã–µ",
            "social": "–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ"
        }
        
        for risk_type, evaluation in risk_evaluations.items():
            risk_name = risk_names.get(risk_type, risk_type)
            level = evaluation.get("risk_level", "unknown")
            level_color = level_colors.get(level, "white")
            
            table.add_row(
                risk_name,
                str(evaluation.get("total_score", 0)),
                f"[{level_color}]{level}[/{level_color}]",
                str(evaluation.get("probability_score", 0)),
                str(evaluation.get("impact_score", 0))
            )
        
        console.print(table)
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    recommendations = assessment.get("priority_recommendations", [])
    if recommendations:
        console.print("\n[bold blue]üí° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:[/bold blue]")
        for i, rec in enumerate(recommendations[:5], 1):
            console.print(f"  {i}. {rec}")
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
    if output_file:
        try:
            output_path = Path(output_file)
            output_path.parent.mkdir(parents=True, exist_ok=True)
            
            with open(output_path, 'w', encoding='utf-8') as f:
                json.dump(result, f, ensure_ascii=False, indent=2, default=str)
            
            console.print(f"\n[green]üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {output_file}[/green]")
        except Exception as e:
            console.print(f"\n[red]‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}[/red]")


async def _display_saved_assessment(assessment_data: dict, output_file: Optional[str] = None):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –æ—Ü–µ–Ω–∫–∏"""
    assessment = assessment_data.get("assessment")
    evaluations = assessment_data.get("evaluations", [])
    
    if not assessment:
        console.print("[red]‚ùå –î–∞–Ω–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã[/red]")
        return
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    console.print(Panel.fit(
        f"[bold blue]üìã –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞[/bold blue]\n"
        f"ID: {assessment.id}\n"
        f"–î–∞—Ç–∞: {assessment.assessment_timestamp.strftime('%Y-%m-%d %H:%M:%S')}\n"
        f"–û–±—â–∏–π —Ä–∏—Å–∫: {assessment.overall_risk_level} ({assessment.overall_risk_score}/25)",
        title="–î–µ—Ç–∞–ª–∏ –æ—Ü–µ–Ω–∫–∏",
        border_style="blue"
    ))
    
    # –¢–∞–±–ª–∏—Ü–∞ —Ä–∏—Å–∫–æ–≤ –∏–∑ –ë–î
    if evaluations:
        table = Table(title="–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–æ–≤")
        table.add_column("–¢–∏–ø —Ä–∏—Å–∫–∞", style="bold")
        table.add_column("–ë–∞–ª–ª", justify="center")
        table.add_column("–£—Ä–æ–≤–µ–Ω—å", justify="center")
        table.add_column("–ê–≥–µ–Ω—Ç-–æ—Ü–µ–Ω—â–∏–∫", style="dim")
        
        level_colors = {"low": "green", "medium": "yellow", "high": "red"}
        
        for eval_record in evaluations:
            level_color = level_colors.get(eval_record.risk_level, "white")
            table.add_row(
                eval_record.risk_type,
                str(eval_record.total_score),
                f"[{level_color}]{eval_record.risk_level}[/{level_color}]",
                eval_record.evaluator_agent
            )
        
        console.print(table)
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if assessment.priority_recommendations:
        console.print("\n[bold blue]üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:[/bold blue]")
        for i, rec in enumerate(assessment.priority_recommendations, 1):
            console.print(f"  {i}. {rec}")
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
    if output_file:
        try:
            output_data = {
                "assessment": {
                    "id": assessment.id,
                    "timestamp": assessment.assessment_timestamp.isoformat(),
                    "overall_risk_score": assessment.overall_risk_score,
                    "overall_risk_level": assessment.overall_risk_level,
                    "recommendations": assessment.priority_recommendations
                },
                "evaluations": [
                    {
                        "risk_type": e.risk_type,
                        "total_score": e.total_score,
                        "risk_level": e.risk_level,
                        "reasoning": e.probability_reasoning + " " + e.impact_reasoning
                    }
                    for e in evaluations
                ]
            }
            
            output_path = Path(output_file)
            output_path.parent.mkdir(parents=True, exist_ok=True)
            
            with open(output_path, 'w', encoding='utf-8') as f:
                json.dump(output_data, f, ensure_ascii=False, indent=2)
            
            console.print(f"\n[green]üíæ –û—Ü–µ–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {output_file}[/green]")
        except Exception as e:
            console.print(f"\n[red]‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}[/red]")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI"""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        Path("logs").mkdir(exist_ok=True)
        Path("data").mkdir(exist_ok=True)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º CLI
        cli()
    except KeyboardInterrupt:
        console.print("\n[yellow]üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è![/yellow]")
    except Exception as e:
        console.print(f"\n[red]‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}[/red]")
        sys.exit(1)


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π CLI
    import asyncio
    
    # –ü–∞—Ç—á–∏–º click –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ async
    def async_command(f):
        f = asyncio.coroutine(f)
        def wrapper(*args, **kwargs):
            return asyncio.run(f(*args, **kwargs))
        return wrapper
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—á –∫ –∫–æ–º–∞–Ω–¥–∞–º
    for command in [assess, show, list_assessments, status, demo]:
        command.callback = async_command(command.callback)
    
    main()