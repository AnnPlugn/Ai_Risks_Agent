# main.py
"""
–ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å CLI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–æ–≤ –ò–ò-–∞–≥–µ–Ω—Ç–æ–≤

–û–ë–ù–û–í–õ–ï–ù–û: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–º LLM –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä–æ–º
"""

import asyncio
import json
import sys
from pathlib import Path
from typing import List, Optional, Dict, Any
from datetime import datetime
from dotenv import load_dotenv
load_dotenv()
import click

# –ò–º–ø–æ—Ä—Ç—ã —Å–∏—Å—Ç–µ–º—ã –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–æ–≤
from src.workflow.graph_builder import (
    create_risk_assessment_workflow, 
    validate_workflow_dependencies,
    print_workflow_status
)
from src.config import get_global_llm_config, LLMConfigManager
from src.utils.logger import setup_logging, get_logger
from src.models.database import init_database, get_assessment_by_id


def setup_environment():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    setup_logging()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    init_database()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä LLM
    try:
        config_manager = get_global_llm_config()
        if not config_manager.validate_configuration():
            click.echo("‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è LLM –Ω–µ –ø—Ä–æ—à–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é", err=True)
        
        if not config_manager.is_available():
            click.echo("‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: LLM —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", err=True)
            
    except Exception as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ LLM –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä–∞: {e}", err=True)
        sys.exit(1)


@click.group()
@click.version_option(version="2.0.0", message="AI Risk Assessment System v%(version)s")
def cli():
    """
    ü§ñ AI Risk Assessment System
    
    –°–∏—Å—Ç–µ–º–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ä–∏—Å–∫–æ–≤ –ò–ò-–∞–≥–µ–Ω—Ç–æ–≤
    –¥–ª—è –±–∞–Ω–∫–æ–≤—Å–∫–æ–π —Å—Ñ–µ—Ä—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    setup_environment()


@cli.command()
@click.argument('paths', nargs=-1, required=True)
@click.option('--agent-name', '-n', default=None, help='–ù–∞–∑–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞')
@click.option('--output', '-o', type=click.Path(), help='–§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞')
@click.option('--quality-threshold', '-q', type=float, default=7.0, 
              help='–ü–æ—Ä–æ–≥ –∫–∞—á–µ—Å—Ç–≤–∞ –∫—Ä–∏—Ç–∏–∫–∞ (0-10)')
@click.option('--max-retries', '-r', type=int, default=3, 
              help='–ú–∞–∫—Å–∏–º—É–º –ø–æ–≤—Ç–æ—Ä–æ–≤ –ø—Ä–∏ –Ω–µ–ø—Ä–∏–µ–º–ª–µ–º–æ–º –∫–∞—á–µ—Å—Ç–≤–µ')
@click.option('--format', 'output_format', type=click.Choice(['json', 'yaml', 'txt']), 
              default='json', help='–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞')
@click.option('--verbose', '-v', is_flag=True, help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥')
def assess(paths: tuple, agent_name: Optional[str], output: Optional[str], 
           quality_threshold: float, max_retries: int, output_format: str, verbose: bool):
    """
    üéØ –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤ –ò–ò-–∞–≥–µ–Ω—Ç–∞
    
    PATHS: –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –∏–ª–∏ –ø–∞–ø–∫–∞–º —Å –¥–∞–Ω–Ω—ã–º–∏ –∞–≥–µ–Ω—Ç–∞
    
    –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
    
      # –û—Ü–µ–Ω–∫–∞ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
      python main.py assess agent.py
      
      # –û—Ü–µ–Ω–∫–∞ –ø–∞–ø–∫–∏ —Å –ø—Ä–æ–µ–∫—Ç–æ–º
      python main.py assess ./my_agent_project/
      
      # –° –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∫–∞—á–µ—Å—Ç–≤–∞
      python main.py assess ./agent/ --quality-threshold 8.0 --max-retries 5
      
      # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª  
      python main.py assess ./agent/ --output results.json
    """
    
    logger = get_logger()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—É—Ç–µ–π
    file_paths = []
    for path_str in paths:
        path = Path(path_str)
        if not path.exists():
            click.echo(f"‚ùå –ü—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {path_str}", err=True)
            sys.exit(1)
        file_paths.append(str(path.resolve()))
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è –∞–≥–µ–Ω—Ç–∞
    if not agent_name:
        if len(file_paths) == 1:
            agent_name = Path(file_paths[0]).stem
        else:
            agent_name = f"Agent_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    config_manager = get_global_llm_config()
    if verbose:
        status_info = config_manager.get_status_info()
        click.echo(f"üîß –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {status_info['provider']}")
        click.echo(f"üîß –ú–æ–¥–µ–ª—å: {status_info['model']}")
        click.echo(f"üîß –°—Ç–∞—Ç—É—Å: {'‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω' if status_info['is_available'] else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}")
    
    async def run_assessment():
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –æ—Ü–µ–Ω–∫–∏"""
        
        try:
            # –°–æ–∑–¥–∞–µ–º workflow (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä)
            workflow = create_risk_assessment_workflow(
                quality_threshold=quality_threshold,
                max_retries=max_retries
            )
            
            if verbose:
                click.echo(f"üöÄ –ó–∞–ø—É—Å–∫ –æ—Ü–µ–Ω–∫–∏ –∞–≥–µ–Ω—Ç–∞ '{agent_name}'...")
                click.echo(f"üìÅ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–µ –ø—É—Ç–∏: {', '.join(file_paths)}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Ü–µ–Ω–∫—É
            result = await workflow.run_assessment(
                source_files=file_paths,
                agent_name=agent_name
            )
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if output_format == 'json':
                formatted_result = json.dumps(result, ensure_ascii=False, indent=2, default=str)
            elif output_format == 'yaml':
                import yaml
                formatted_result = yaml.dump(result, allow_unicode=True, default_flow_style=False)
            else:  # txt
                formatted_result = format_result_as_text(result)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–ª–∏ –≤—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if output:
                Path(output).write_text(formatted_result, encoding='utf-8')
                click.echo(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {output}")
            else:
                click.echo(formatted_result)
            
            # –ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞
            if verbose or not output:
                print_assessment_summary(result)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏: {e}")
            click.echo(f"‚ùå –û—à–∏–±–∫–∞: {e}", err=True)
            sys.exit(1)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ—Ü–µ–Ω–∫—É
    asyncio.run(run_assessment())


@cli.command()
@click.option('--check-llm', is_flag=True, help='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å LLM')
@click.option('--check-db', is_flag=True, help='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î')
@click.option('--check-workflow', is_flag=True, help='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å workflow')
@click.option('--detailed', is_flag=True, help='–ü–æ–¥—Ä–æ–±–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞')
def status(check_llm: bool, check_db: bool, check_workflow: bool, detailed: bool):
    """
    üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã
    
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–æ–≤.
    """
    
    if not any([check_llm, check_db, check_workflow]) or detailed:
        # –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏, –¥–µ–ª–∞–µ–º –≤—Å–µ
        check_llm = check_db = check_workflow = True
    
    if check_llm:
        click.echo("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ LLM –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
        check_llm_status(detailed)
    
    if check_db:
        click.echo("\nüíæ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
        check_database_status(detailed)
    
    if check_workflow:
        click.echo("\n‚öôÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ workflow:")
        check_workflow_status(detailed)


@cli.command()
def demo():
    """
    üé¨ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ—Ü–µ–Ω–∫—É —Ä–∏—Å–∫–æ–≤ –Ω–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —Å–∏—Å—Ç–µ–º—ã.
    """
    
    click.echo("üé¨ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–æ–≤...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_data = create_demo_data()
    
    async def run_demo():
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –¥–µ–º–æ"""
        
        try:
            workflow = create_risk_assessment_workflow(
                quality_threshold=6.0,  # –°–Ω–∏–∂–µ–Ω–Ω—ã–π –ø–æ—Ä–æ–≥ –¥–ª—è –¥–µ–º–æ
                max_retries=2
            )
            
            result = await workflow.run_assessment(
                file_paths=test_data["file_paths"],
                agent_name="Demo Banking Assistant"
            )
            
            # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Å–∏–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            print_demo_result(result)
            
        except Exception as e:
            click.echo(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}", err=True)
            sys.exit(1)
    
    asyncio.run(run_demo())


@cli.command()
@click.argument('assessment_id')
@click.option('--format', 'output_format', type=click.Choice(['json', 'yaml', 'summary']), 
              default='summary', help='–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞')
def show(assessment_id: str, output_format: str):
    """
    üìã –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –æ—Ü–µ–Ω–∫–∏
    
    ASSESSMENT_ID: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ—Ü–µ–Ω–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    """
    
    try:
        assessment = get_assessment_by_id(assessment_id)
        if not assessment:
            click.echo(f"‚ùå –û—Ü–µ–Ω–∫–∞ —Å ID '{assessment_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", err=True)
            sys.exit(1)
        
        if output_format == 'json':
            click.echo(json.dumps(assessment, ensure_ascii=False, indent=2, default=str))
        elif output_format == 'yaml':
            import yaml
            click.echo(yaml.dump(assessment, allow_unicode=True, default_flow_style=False))
        else:  # summary
            print_assessment_summary(assessment)
            
    except Exception as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏: {e}", err=True)
        sys.exit(1)


@cli.command()
@click.option('--provider', type=click.Choice(['lm_studio', 'gigachat']), 
              help='–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞')
@click.option('--model', help='–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–æ–¥–µ–ª—å LLM')
@click.option('--temperature', type=float, help='–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É')
@click.option('--show-config', is_flag=True, help='–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é')
def config(provider: Optional[str], model: Optional[str], temperature: Optional[float], show_config: bool):
    """
    ‚öôÔ∏è  –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π LLM
    
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏ –∏–∑–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞.
    """
    
    config_manager = get_global_llm_config()
    
    if show_config:
        status_info = config_manager.get_status_info()
        click.echo("üìã –¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è LLM:")
        click.echo(f"  –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {status_info['provider_type']}")
        click.echo(f"  –ú–æ–¥–µ–ª—å: {status_info['model']}")
        click.echo(f"  URL: {status_info['base_url']}")
        click.echo(f"  –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {status_info['temperature']}")
        click.echo(f"  –î–æ—Å—Ç—É–ø–µ–Ω: {'‚úÖ' if status_info['is_available'] else '‚ùå'}")
        return
    
    if provider:
        try:
            new_manager = LLMConfigManager.create_with_provider_type(provider)
            from src.config import set_global_llm_config
            set_global_llm_config(new_manager)
            click.echo(f"‚úÖ –ü—Ä–æ–≤–∞–π–¥–µ—Ä –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {provider}")
        except Exception as e:
            click.echo(f"‚ùå –û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: {e}", err=True)
    
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
    # –ü–æ–∫–∞ —á—Ç–æ —ç—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±–µ—Ä—É—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    
    if not any([provider, model, temperature, show_config]):
        click.echo("‚ùì –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --show-config –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è")


# ===============================
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# ===============================

def check_llm_status(detailed: bool = False):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ LLM"""
    
    try:
        config_manager = get_global_llm_config()
        status_info = config_manager.get_status_info()
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        click.echo(f"  –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {status_info['provider']}")
        click.echo(f"  –ú–æ–¥–µ–ª—å: {status_info['model']}")
        click.echo(f"  –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: {'‚úÖ' if status_info['is_available'] else '‚ùå'}")
        click.echo(f"  –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {'‚úÖ' if status_info['is_valid'] else '‚ùå'}")
        
        if detailed:
            click.echo(f"  URL: {status_info['base_url']}")
            click.echo(f"  –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {status_info['temperature']}")
            click.echo(f"  Max tokens: {status_info['max_tokens']}")
            
    except Exception as e:
        click.echo(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")


def check_database_status(detailed: bool = False):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    try:
        from src.models.database import test_db_connection
        if test_db_connection():
            click.echo("  ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞")
        else:
            click.echo("  ‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            
    except Exception as e:
        click.echo(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")


def check_workflow_status(detailed: bool = False):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ workflow"""
    
    try:
        dependencies = validate_workflow_dependencies()
        all_ready = all(dependencies.values())
        
        click.echo(f"  –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: {'‚úÖ' if all_ready else '‚ùå'}")
        
        if detailed or not all_ready:
            for component, status in dependencies.items():
                status_icon = "‚úÖ" if status else "‚ùå"
                click.echo(f"    {status_icon} {component}")
                
    except Exception as e:
        click.echo(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")


def create_demo_data() -> Dict[str, Any]:
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    
    import tempfile
    import os
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    demo_files = []
    
    # –§–∞–π–ª —Å –∫–æ–¥–æ–º –∞–≥–µ–Ω—Ç–∞
    agent_code = '''
class BankingAssistant:
    """–ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
    
    def __init__(self):
        self.model = "qwen3-4b"
        self.capabilities = [
            "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º",
            "–ü–æ–º–æ—â—å —Å –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏", 
            "–ê–Ω–∞–ª–∏–∑ —Ñ–∏–Ω–∞–Ω—Å–æ–≤"
        ]
    
    def process_query(self, query: str) -> str:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞
        return self.llm_call(query)
'''
    
    with tempfile.NamedTemporaryFile(mode='w', suffix='.py', delete=False) as f:
        f.write(agent_code)
        demo_files.append(f.name)
    
    # –§–∞–π–ª —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    config_data = '''
{
    "agent_name": "Banking Assistant",
    "target_audience": ["–ö–ª–∏–µ–Ω—Ç—ã –±–∞–Ω–∫–∞", "–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏"],
    "data_access": ["internal", "confidential"],
    "guardrails": [
        "–ù–µ —Ä–∞–∑–≥–ª–∞—à–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–æ–≤",
        "–¢—Ä–µ–±–æ–≤–∞—Ç—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π"
    ]
}
'''
    
    with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False) as f:
        f.write(config_data)
        demo_files.append(f.name)
    
    return {"file_paths": demo_files}


def format_result_as_text(result: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –≤–∏–¥–µ"""
    
    text_parts = []
    
    text_parts.append(f"ü§ñ –û–¶–ï–ù–ö–ê –†–ò–°–ö–û–í –ê–ì–ï–ù–¢–ê: {result.get('agent_name', 'Unknown')}")
    text_parts.append("=" * 60)
    
    # –û–±—â–∏–π —Ä–∏—Å–∫
    overall_level = result.get('overall_risk_level', 'unknown')
    overall_score = result.get('overall_risk_score', 0)
    
    risk_emoji = {"low": "üü¢", "medium": "üü°", "high": "üî¥"}.get(overall_level, "‚ö™")
    text_parts.append(f"{risk_emoji} –û–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {overall_level.upper()} ({overall_score}/10)")
    text_parts.append("")
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏
    text_parts.append("üìä –î–ï–¢–ê–õ–¨–ù–´–ï –û–¶–ï–ù–ö–ò:")
    risk_evaluations = result.get('risk_evaluations', {})
    
    for risk_type, evaluation in risk_evaluations.items():
        risk_score = evaluation.get('risk_score', 0)
        risk_level = evaluation.get('risk_level', 'unknown')
        risk_emoji = {"low": "üü¢", "medium": "üü°", "high": "üî¥"}.get(risk_level, "‚ö™")
        
        text_parts.append(f"  {risk_emoji} {risk_type}: {risk_level} ({risk_score}/10)")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    recommendations = result.get('priority_recommendations', [])
    if recommendations:
        text_parts.append("")
        text_parts.append("üí° –ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        for i, rec in enumerate(recommendations[:5], 1):
            text_parts.append(f"  {i}. {rec}")
    
    # –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    processing_time = result.get('processing_time', 0)
    text_parts.append("")
    text_parts.append(f"‚è±Ô∏è  –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.1f} —Å–µ–∫—É–Ω–¥")
    
    return "\n".join(text_parts)


def print_assessment_summary(result: Dict[str, Any]):
    """–í—ã–≤–æ–¥ –∫—Ä–∞—Ç–∫–æ–π —Å–≤–æ–¥–∫–∏ –æ—Ü–µ–Ω–∫–∏"""
    
    agent_name = result.get('agent_name', 'Unknown')
    overall_level = result.get('overall_risk_level', 'unknown')
    overall_score = result.get('overall_risk_score', 0)
    
    risk_emoji = {"low": "üü¢", "medium": "üü°", "high": "üî¥"}.get(overall_level, "‚ö™")
    
    click.echo(f"\nüìä –°–í–û–î–ö–ê –û–¶–ï–ù–ö–ò:")
    click.echo(f"  –ê–≥–µ–Ω—Ç: {agent_name}")
    click.echo(f"  {risk_emoji} –û–±—â–∏–π —Ä–∏—Å–∫: {overall_level.upper()} ({overall_score}/10)")
    
    risk_evaluations = result.get('risk_evaluations', {})
    if risk_evaluations:
        high_risks = [rt for rt, ev in risk_evaluations.items() if ev.get('risk_level') == 'high']
        if high_risks:
            click.echo(f"  ‚ö†Ô∏è  –í—ã—Å–æ–∫–∏–µ —Ä–∏—Å–∫–∏: {', '.join(high_risks)}")


def print_demo_result(result: Dict[str, Any]):
    """–ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    
    click.echo("\n" + "üé¨ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò".center(60, "="))
    click.echo(format_result_as_text(result))
    click.echo("=" * 60)
    click.echo("‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    click.echo("\nüí° –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: python main.py assess <–ø—É—Ç—å_–∫_–∞–≥–µ–Ω—Ç—É>")


if __name__ == '__main__':
    cli()