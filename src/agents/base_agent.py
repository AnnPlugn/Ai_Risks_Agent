# src/agents/base_agent.py
"""
–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–æ–≤ –ò–ò-–∞–≥–µ–Ω—Ç–æ–≤
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ–±—â–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤
"""

import asyncio
import json
import re
from abc import ABC, abstractmethod
from typing import Dict, Any, Optional, List, Union
from datetime import datetime
from dataclasses import dataclass

from ..utils.llm_client import LLMClient, LLMConfig, LLMMessage, RiskAnalysisLLMClient
from ..utils.llm_config_manager import get_llm_config_manager
from ..utils.logger import get_logger, log_agent_execution, log_llm_call
from ..models.risk_models import AgentTaskResult, ProcessingStatus


@dataclass
class AgentConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞"""
    name: str
    description: str
    llm_config: LLMConfig
    max_retries: int = 3
    timeout_seconds: int = 180
    temperature: float = 0.1
    use_risk_analysis_client: bool = False


class BaseAgent(ABC):
    """
    –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–æ–≤
    
    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç:
    - –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ LLM
    - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    - –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ –ø–æ–≤—Ç–æ—Ä—ã
    - –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    - –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤
    """
    
    def __init__(self, config: AgentConfig):
        self.config = config
        self.logger = get_logger()
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–±—Ä–∏–∫—É –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
        from ..utils.llm_client import create_llm_client
        
        client_type = "risk_analysis" if config.use_risk_analysis_client else "standard"
        
        # –§–∞–±—Ä–∏–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –Ω—É–∂–Ω—ã–π —Ç–∏–ø –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É
        self.llm_client = create_llm_client(
            client_type=client_type,
            base_url=config.llm_config.base_url,
            model=config.llm_config.model,
            temperature=config.llm_config.temperature
        )
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–≥–µ–Ω—Ç–∞
        self.stats = {
            "total_requests": 0,
            "successful_requests": 0,
            "failed_requests": 0,
            "total_execution_time": 0.0,
            "average_response_time": 0.0
        }
    
    @property
    def name(self) -> str:
        """–ò–º—è –∞–≥–µ–Ω—Ç–∞"""
        return self.config.name
    
    @property
    def description(self) -> str:
        """–û–ø–∏—Å–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞"""
        return self.config.description
    
    @abstractmethod
    async def process(
        self, 
        input_data: Dict[str, Any], 
        assessment_id: str
    ) -> AgentTaskResult:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –∞–≥–µ–Ω—Ç–∞
        
        Args:
            input_data: –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            assessment_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ—Ü–µ–Ω–∫–∏
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–∞
        """
        pass
    
    @abstractmethod
    def get_system_prompt(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∞–≥–µ–Ω—Ç–∞"""
        pass
    
    async def run(
        self, 
        input_data: Dict[str, Any], 
        assessment_id: str
    ) -> AgentTaskResult:
        """
        –ó–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ –ø–æ–≤—Ç–æ—Ä–∞–º–∏
        
        Args:
            input_data: –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            assessment_id: ID –æ—Ü–µ–Ω–∫–∏
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        task_result = AgentTaskResult(
            agent_name=self.name,
            task_type=self._get_task_type(),
            status=ProcessingStatus.IN_PROGRESS,
            start_time=datetime.now()
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã
        self.logger.log_agent_start(self.name, self._get_task_type(), assessment_id)
        
        for attempt in range(self.config.max_retries):
            try:
                # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
                result = await asyncio.wait_for(
                    self.process(input_data, assessment_id),
                    timeout=self.config.timeout_seconds
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                self._update_stats(True, result.execution_time_seconds or 0)
                
                # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—Ö
                self.logger.log_agent_success(
                    self.name, 
                    self._get_task_type(), 
                    assessment_id, 
                    result.execution_time_seconds or 0
                )
                
                return result
                
            except asyncio.TimeoutError:
                error_msg = f"–¢–∞–π–º-–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ({self.config.timeout_seconds}—Å)"
                await self._handle_retry(task_result, error_msg, attempt, assessment_id)
                
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {str(e)}"
                await self._handle_retry(task_result, error_msg, attempt, assessment_id)
        
        # –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã
        task_result.status = ProcessingStatus.FAILED
        task_result.end_time = datetime.now()
        task_result.execution_time_seconds = (
            task_result.end_time - task_result.start_time
        ).total_seconds()
        
        self._update_stats(False, task_result.execution_time_seconds)
        
        self.logger.log_agent_error(
            self.name, 
            self._get_task_type(), 
            assessment_id, 
            Exception(task_result.error_message or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
        )
        
        return task_result
    
    async def call_llm(
        self,
        system_prompt: str,
        user_message: str,
        context: Optional[str] = None,
        assessment_id: str = "unknown",
        temperature: Optional[float] = None
    ) -> str:
        """
        –í—ã–∑–æ–≤ LLM —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        
        Args:
            system_prompt: –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            user_message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            context: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            assessment_id: ID –æ—Ü–µ–Ω–∫–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            temperature: –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            
        Returns:
            –û—Ç–≤–µ—Ç –æ—Ç LLM
        """
        messages = [
            LLMMessage(role="system", content=system_prompt)
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
        if context:
            messages.append(
                LLMMessage(
                    role="user", 
                    content=f"–ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{context}\n\n–ó–∞–¥–∞—á–∞:\n{user_message}"
                )
            )
        else:
            messages.append(LLMMessage(role="user", content=user_message))
        
        # –í—ã–∑—ã–≤–∞–µ–º LLM
        response = await self.llm_client.complete_chat(
            messages=messages,
            temperature=temperature or self.config.temperature
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ LLM
        self.logger.log_llm_request(
            self.name,
            assessment_id,
            response.model,
            response.usage.get("total_tokens", 0)
        )
        
        return response.content
    
    async def call_llm_structured(
        self,
        data_to_analyze: str,
        extraction_prompt: str,
        assessment_id: str,
        expected_format: str = "JSON"
    ) -> Dict[str, Any]:
        """
        –í—ã–∑–æ–≤ LLM –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
       
        Args:
            data_to_analyze: –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            extraction_prompt: –ü—Ä–æ–º–ø—Ç –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
            assessment_id: ID –æ—Ü–µ–Ω–∫–∏
            expected_format: –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞
           
        Returns:
            –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        """
        if not isinstance(self.llm_client, (LLMClient, RiskAnalysisLLMClient)):
            raise ValueError("LLM –∫–ª–∏–µ–Ω—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã")
        
        # üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –ø—Ä–æ–º–ø—Ç–∞
        prompt_length = len(extraction_prompt)
        data_length = len(data_to_analyze)
        bound_logger = self.logger.bind_context(assessment_id, self.name)
        
        bound_logger.info(f"üìè –î–ª–∏–Ω–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞: {prompt_length} —Å–∏–º–≤–æ–ª–æ–≤")
        bound_logger.info(f"üìè –î–ª–∏–Ω–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {data_length} —Å–∏–º–≤–æ–ª–æ–≤")
        bound_logger.info(f"üìè –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {prompt_length + data_length} —Å–∏–º–≤–æ–ª–æ–≤")
        
        if prompt_length < 3000:
            bound_logger.warning(f"‚ö†Ô∏è –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–º –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π")
        else:
            bound_logger.info(f"‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω—ã–π –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –¥–ª–∏–Ω–µ –≤ –ø—Ä–æ–º–ø—Ç–µ
        if "–ú–ò–ù–ò–ú–£–ú 1000 —Å–∏–º–≤–æ–ª–æ–≤" in extraction_prompt or "–ú–ò–ù–ò–ú–£–ú 800 —Å–∏–º–≤–æ–ª–æ–≤" in extraction_prompt:
            bound_logger.info("‚úÖ –í –ø—Ä–æ–º–ø—Ç–µ –Ω–∞–π–¥–µ–Ω—ã —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω–µ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π")
        else:
            bound_logger.warning("‚ö†Ô∏è –í –ø—Ä–æ–º–ø—Ç–µ –ù–ï –Ω–∞–π–¥–µ–Ω—ã —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –¥–ª–∏–Ω–µ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π")
       
        # –í–ê–® –°–£–©–ï–°–¢–í–£–Æ–©–ò–ô –í–´–ó–û–í
        result = await self.llm_client.extract_structured_data(
            data_to_analyze=data_to_analyze,
            extraction_prompt=extraction_prompt,
            expected_format=expected_format
        )
        
        # üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if result:
            # –õ–æ–≥–∏—Ä—É–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
            if isinstance(result, dict):
                bound_logger.info(f"‚úÖ LLM –≤–µ—Ä–Ω—É–ª —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å {len(result)} –ø–æ–ª—è–º–∏")
                
                # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è JSON —Å reasoning –ø–æ–ª—è–º–∏
                if expected_format.upper() == "JSON":
                    prob_reasoning = result.get("probability_reasoning", "")
                    impact_reasoning = result.get("impact_reasoning", "")
                    
                    if prob_reasoning:
                        prob_len = len(str(prob_reasoning))
                        bound_logger.info(f"üìä probability_reasoning: {prob_len} —Å–∏–º–≤–æ–ª–æ–≤")
                        if prob_len < 500:
                            bound_logger.warning(f"‚ö†Ô∏è probability_reasoning —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π: {prob_len} < 500")
                        elif prob_len >= 1000:
                            bound_logger.info(f"üéØ probability_reasoning –æ—Ç–ª–∏—á–Ω–æ–π –¥–ª–∏–Ω—ã: {prob_len} >= 1000")
                        else:
                            bound_logger.info(f"‚úÖ probability_reasoning –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã: {prob_len}")
                    
                    if impact_reasoning:
                        impact_len = len(str(impact_reasoning))
                        bound_logger.info(f"üìä impact_reasoning: {impact_len} —Å–∏–º–≤–æ–ª–æ–≤")
                        if impact_len < 500:
                            bound_logger.warning(f"‚ö†Ô∏è impact_reasoning —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π: {impact_len} < 500")
                        elif impact_len >= 1000:
                            bound_logger.info(f"üéØ impact_reasoning –æ—Ç–ª–∏—á–Ω–æ–π –¥–ª–∏–Ω—ã: {impact_len} >= 1000")
                        else:
                            bound_logger.info(f"‚úÖ impact_reasoning –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã: {impact_len}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –ø–æ–ª—è
                    for field_name in ["key_factors", "recommendations", "risk_level", "total_score"]:
                        if field_name in result:
                            field_value = result[field_name]
                            bound_logger.debug(f"üîç {field_name}: {type(field_value).__name__} = {field_value}")
            
            elif isinstance(result, str):
                result_length = len(result)
                bound_logger.info(f"üìè LLM –≤–µ—Ä–Ω—É–ª —Å—Ç—Ä–æ–∫—É –¥–ª–∏–Ω–æ–π: {result_length} —Å–∏–º–≤–æ–ª–æ–≤")
                
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å JSON –∏–∑ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                try:
                    import json
                    parsed_result = json.loads(result)
                    bound_logger.info(f"‚úÖ –°—Ç—Ä–æ–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø–∞—Ä—Å–∏—Ç—Å—è –∫–∞–∫ JSON —Å {len(parsed_result)} –ø–æ–ª—è–º–∏")
                    
                    # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω–æ–≥–æ JSON
                    prob_reasoning = parsed_result.get("probability_reasoning", "")
                    impact_reasoning = parsed_result.get("impact_reasoning", "")
                    
                    if prob_reasoning:
                        prob_len = len(str(prob_reasoning))
                        bound_logger.info(f"üìä (–∏–∑ —Å—Ç—Ä–æ–∫–∏) probability_reasoning: {prob_len} —Å–∏–º–≤–æ–ª–æ–≤")
                    
                    if impact_reasoning:
                        impact_len = len(str(impact_reasoning))
                        bound_logger.info(f"üìä (–∏–∑ —Å—Ç—Ä–æ–∫–∏) impact_reasoning: {impact_len} —Å–∏–º–≤–æ–ª–æ–≤")
                        
                except json.JSONDecodeError as e:
                    bound_logger.warning(f"‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç-—Å—Ç—Ä–æ–∫–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º JSON: {e}")
                except Exception as e:
                    bound_logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON: {e}")
        else:
            bound_logger.error("‚ùå LLM –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ None —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
       
        # –í–ê–® –°–£–©–ï–°–¢–í–£–Æ–©–ò–ô –ö–û–î –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø
        self.logger.log_llm_request(
            self.name,
            assessment_id,
            self.llm_client.config.model,
            0  # –¢–æ–∫–µ–Ω—ã —É–∂–µ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω—ã –≤–Ω—É—Ç—Ä–∏ extract_structured_data
        )
       
        return result
    
    def validate_result(self, result_data: Dict[str, Any]) -> bool:
        """
        –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–≥–µ–Ω—Ç–∞
        –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö –¥–ª—è —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        
        Args:
            result_data: –î–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            
        Returns:
            True –µ—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–µ–Ω
        """
        # –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        if not isinstance(result_data, dict):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö)
        required_fields = self._get_required_result_fields()
        for field in required_fields:
            if field not in result_data:
                return False
        
        return True
    
    def _get_task_type(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏ –∞–≥–µ–Ω—Ç–∞"""
        return self.__class__.__name__.lower().replace('agent', '')
    
    def _get_required_result_fields(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö)"""
        return []
    
    async def _handle_retry(
        self, 
        task_result: AgentTaskResult, 
        error_msg: str, 
        attempt: int, 
        assessment_id: str
    ):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏"""
        task_result.error_message = error_msg
        
        if attempt < self.config.max_retries - 1:
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä
            self.logger.log_agent_retry(
                self.name, 
                self._get_task_type(), 
                assessment_id, 
                attempt + 1
            )
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
            await asyncio.sleep(1.0 * (attempt + 1))
        else:
            # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - —Ñ–∏–∫—Å–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            task_result.status = ProcessingStatus.FAILED
            task_result.end_time = datetime.now()
    
    def _update_stats(self, success: bool, execution_time: float):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–≥–µ–Ω—Ç–∞"""
        self.stats["total_requests"] += 1
        self.stats["total_execution_time"] += execution_time
        
        if success:
            self.stats["successful_requests"] += 1
        else:
            self.stats["failed_requests"] += 1
        
        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
        self.stats["average_response_time"] = (
            self.stats["total_execution_time"] / self.stats["total_requests"]
        )
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–∞"""
        return {
            **self.stats,
            "success_rate": (
                self.stats["successful_requests"] / max(self.stats["total_requests"], 1)
            ),
            "agent_name": self.name,
            "agent_type": self._get_task_type()
        }
    
    async def health_check(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∞–≥–µ–Ω—Ç–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å LLM
            llm_healthy = await self.llm_client.health_check()
            
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            return llm_healthy
            
        except Exception:
            return False
    
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –∞–≥–µ–Ω—Ç–∞"""
        try:
            await self.llm_client.close()
        except Exception:
            pass
    
    def __str__(self) -> str:
        return f"{self.__class__.__name__}(name={self.name})"
    
    def __repr__(self) -> str:
        return self.__str__()


class AnalysisAgent(BaseAgent):
    """
    –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
    –†–∞—Å—à–∏—Ä—è–µ—Ç BaseAgent —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    """
    
    def __init__(self, config: AgentConfig):
        super().__init__(config)
    
    async def analyze_data(
        self,
        data: str,
        analysis_type: str,
        criteria: str,
        assessment_id: str,
        examples: Optional[str] = None
    ) -> Dict[str, Any]:
        """
        –û–±—â–∏–π –º–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            analysis_type: –¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞
            criteria: –ö—Ä–∏—Ç–µ—Ä–∏–∏ –∞–Ω–∞–ª–∏–∑–∞
            assessment_id: ID –æ—Ü–µ–Ω–∫–∏
            examples: –ü—Ä–∏–º–µ—Ä—ã –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
        """
        system_prompt = self.get_system_prompt()
        
        if examples:
            system_prompt += f"\n\n–ü–†–ò–ú–ï–†–´:\n{examples}"
        
        user_message = f"""–î–ê–ù–ù–´–ï –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê:
{data}

–¢–ò–ü –ê–ù–ê–õ–ò–ó–ê: {analysis_type}

–ö–†–ò–¢–ï–†–ò–ò:
{criteria}

–í—ã–ø–æ–ª–Ω–∏ –∞–Ω–∞–ª–∏–∑ —Å–æ–≥–ª–∞—Å–Ω–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º."""
        
        response = await self.call_llm(
            system_prompt=system_prompt,
            user_message=user_message,
            assessment_id=assessment_id
        )
        
        return {"analysis_result": response, "analysis_type": analysis_type}


class EvaluationAgent(BaseAgent):
    """
    –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤-–æ—Ü–µ–Ω—â–∏–∫–æ–≤ —Ä–∏—Å–∫–æ–≤
    –†–∞—Å—à–∏—Ä—è–µ—Ç BaseAgent —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–æ–≤
    """
    
    def __init__(self, config: AgentConfig):
        # –û—Ü–µ–Ω—â–∏–∫–∏ –¥–æ–ª–∂–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
        config.use_risk_analysis_client = True
        super().__init__(config)
    
    async def evaluate_risk(
        self,
        risk_type: str,
        agent_data: str,
        evaluation_criteria: str,
        assessment_id: str,
        examples: Optional[str] = None
    ) -> Dict[str, Any]:
        """–û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"""
        
        try:
            if not isinstance(self.llm_client, RiskAnalysisLLMClient):
                raise ValueError("–ê–≥–µ–Ω—Ç-–æ—Ü–µ–Ω—â–∏–∫ –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å RiskAnalysisLLMClient")
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä examples –≤ –≤—ã–∑–æ–≤
            result = await self.llm_client.evaluate_risk(
                risk_type=risk_type,
                agent_data=agent_data,
                evaluation_criteria=evaluation_criteria,
                examples=examples  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä examples
            )
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é
            validated_result = self._ensure_required_fields(result)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ü–µ–Ω–∫—É
            self.logger.log_risk_evaluation(
                self.name,
                assessment_id,
                risk_type,
                validated_result["total_score"],
                validated_result["risk_level"]
            )
            
            return validated_result
            
        except Exception as e:
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í —Å–ª—É—á–∞–µ –ª—é–±–æ–π –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            self.logger.bind_context(assessment_id, self.name).error(
                f"‚ùå –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–∞ {risk_type}: {e}"
            )
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–æ exception
            return self._get_default_evaluation_data(f"–û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–∞: {str(e)}")
    
    def _get_required_result_fields(self) -> List[str]:
        """–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–∞"""
        return [
            "probability_score", "impact_score", "total_score", 
            "risk_level", "probability_reasoning", "impact_reasoning"
        ]
    def _parse_llm_response(self, response_content: str) -> Dict[str, Any]:
        """–ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ø–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ LLM —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å—é"""
        
        try:
            # –®–∞–≥ 1: –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            cleaned_content = response_content.strip()
            
            # –£–¥–∞–ª—è–µ–º —Ç–µ–≥–∏ <think>...</think> –µ—Å–ª–∏ –µ—Å—Ç—å
            import re
            cleaned_content = re.sub(r'<think>.*?</think>', '', cleaned_content, flags=re.DOTALL)
            cleaned_content = cleaned_content.strip()
            
            # –£–¥–∞–ª—è–µ–º markdown –±–ª–æ–∫–∏
            if "```json" in cleaned_content:
                # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ JSON –±–ª–æ–∫–∏
                json_blocks = re.findall(r'```json\s*(.*?)\s*```', cleaned_content, re.DOTALL)
                if json_blocks:
                    json_content = json_blocks[-1].strip()  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–ª–æ–∫
                else:
                    # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–π —Ç–µ–≥, –±–µ—Ä–µ–º –≤—Å–µ –ø–æ—Å–ª–µ ```json
                    start = cleaned_content.find("```json") + 7
                    json_content = cleaned_content[start:].strip()
            else:
                # –ò—â–µ–º JSON –ø–æ —Ñ–∏–≥—É—Ä–Ω—ã–º —Å–∫–æ–±–∫–∞–º
                json_match = re.search(r'\{.*\}', cleaned_content, re.DOTALL)
                if json_match:
                    json_content = json_match.group().strip()
                else:
                    json_content = cleaned_content
            
            # –®–∞–≥ 2: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ JSON
            # –£–±–∏—Ä–∞–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ü–µ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –ø–æ—Å–ª–µ }
            if '}' in json_content:
                end_pos = json_content.rfind('}')
                json_content = json_content[:end_pos + 1]
            
            # –®–∞–≥ 3: –ü—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å JSON
            try:
                parsed_data = json.loads(json_content)
            except json.JSONDecodeError:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ—á–∏–Ω–∏—Ç—å —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ JSON
                json_content = self._fix_common_json_errors(json_content)
                parsed_data = json.loads(json_content)
            
            # –®–∞–≥ 4: –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï - –≤—Å–µ–≥–¥–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            parsed_data = self._ensure_required_fields(parsed_data)
            
            return parsed_data
            
        except Exception as e:
            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–º–æ–≥–ª–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            self.logger.bind_context("unknown", self.name).warning(
                f"‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ LLM –æ—Ç–≤–µ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback: {e}"
            )
            self.logger.bind_context("unknown", self.name).debug(
                f"–ü—Ä–æ–±–ª–µ–º–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: {response_content[:200]}..."
            )
            return self._get_default_evaluation_data(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {str(e)}")

    def _fix_common_json_errors(self, json_content: str) -> str:
        """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ –≤ JSON –æ—Ç LLM"""
        
        # –£–±–∏—Ä–∞–µ–º trailing commas
        json_content = re.sub(r',\s*}', '}', json_content)
        json_content = re.sub(r',\s*]', ']', json_content)
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –≤ —Å—Ç—Ä–æ–∫–∞—Ö
        # –≠—Ç–æ –ø—Ä–æ—Å—Ç–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å –¥–æ—Ä–∞–±–æ—Ç–∫–∏
        json_content = re.sub(r'(?<!\\)"(?=[^,}\]]*[,}\]])', '\\"', json_content)
        
        # –£–±–∏—Ä–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ JSON (–µ—Å–ª–∏ –µ—Å—Ç—å)
        json_content = re.sub(r'//.*?\n', '\n', json_content)
        json_content = re.sub(r'/\*.*?\*/', '', json_content, flags=re.DOTALL)
        
        return json_content

    def _ensure_required_fields(self, parsed_data: Dict[str, Any]) -> Dict[str, Any]:
        """–£–õ–£–ß–®–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π"""
        
        # –®–∞–≥ 1: –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è —Å —É–º–Ω—ã–º–∏ –¥–µ—Ñ–æ–ª—Ç–∞–º–∏
        required_fields = {
            "probability_score": 3,
            "impact_score": 3, 
            "total_score": 9,
            "risk_level": "medium",
            "probability_reasoning": "–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ LLM",
            "impact_reasoning": "–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ LLM",
            "key_factors": [],
            "recommendations": [],
            "confidence_level": 0.7
        }
        
        # –®–∞–≥ 2: –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è
        for field, default_value in required_fields.items():
            if field not in parsed_data or parsed_data[field] is None:
                parsed_data[field] = default_value
                self.logger.bind_context("unknown", self.name).debug(
                    f"üîß –î–æ–±–∞–≤–ª–µ–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–µ –ø–æ–ª–µ {field}: {default_value}"
                )
        
        # –®–∞–≥ 3: –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
        parsed_data = self._validate_and_fix_field_types(parsed_data)
        
        # –®–∞–≥ 4: –í–∞–ª–∏–¥–∏—Ä—É–µ–º –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É
        parsed_data = self._validate_business_logic(parsed_data)
        
        return parsed_data

    def _validate_numeric_fields(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç —á–∏—Å–ª–æ–≤—ã–µ –ø–æ–ª—è"""
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è probability_score (1-5)
        try:
            data["probability_score"] = int(data["probability_score"])
            if not (1 <= data["probability_score"] <= 5):
                data["probability_score"] = 3
        except (ValueError, TypeError):
            data["probability_score"] = 3
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è impact_score (1-5)
        try:
            data["impact_score"] = int(data["impact_score"])
            if not (1 <= data["impact_score"] <= 5):
                data["impact_score"] = 3
        except (ValueError, TypeError):
            data["impact_score"] = 3
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è confidence_level (0.0-1.0)
        try:
            data["confidence_level"] = float(data["confidence_level"])
            if not (0.0 <= data["confidence_level"] <= 1.0):
                data["confidence_level"] = 0.7
        except (ValueError, TypeError):
            data["confidence_level"] = 0.7
        
        return data

    def _validate_string_fields(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –ø–æ–ª—è"""
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è risk_level
        valid_levels = ["low", "medium", "high"]
        if data.get("risk_level") not in valid_levels:
            data["risk_level"] = "medium"
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è reasoning –ø–æ–ª–µ–π
        if not data.get("probability_reasoning") or len(str(data["probability_reasoning"]).strip()) < 10:
            data["probability_reasoning"] = "–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
        
        if not data.get("impact_reasoning") or len(str(data["impact_reasoning"]).strip()) < 10:
            data["impact_reasoning"] = "–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
        
        return data

    def _validate_list_fields(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–∫–æ–≤—ã–µ –ø–æ–ª—è"""
        
        list_fields = ["key_factors", "recommendations"]
        
        for field in list_fields:
            if not isinstance(data.get(field), list):
                data[field] = []
            
            # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ None
            data[field] = [
                item for item in data[field] 
                if item and isinstance(item, str) and item.strip()
            ]
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            data[field] = data[field][:10]
        
        return data
    
    def _validate_and_fix_field_types(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–∏–ø—ã –ø–æ–ª–µ–π"""
        
        # –ß–∏—Å–ª–æ–≤—ã–µ –ø–æ–ª—è (1-5)
        score_fields = ["probability_score", "impact_score"]
        for field in score_fields:
            try:
                value = int(data[field])
                data[field] = max(1, min(5, value))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω 1-5
            except (ValueError, TypeError):
                data[field] = 3  # –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª
                self.logger.bind_context("unknown", self.name).warning(
                    f"üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π {field}: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ 3"
                )
        
        # Confidence level (0.0-1.0)
        try:
            value = float(data["confidence_level"])
            data["confidence_level"] = max(0.0, min(1.0, value))
        except (ValueError, TypeError):
            data["confidence_level"] = 0.7
        
        # Risk level (enum)
        valid_levels = ["low", "medium", "high"]
        if data.get("risk_level") not in valid_levels:
            data["risk_level"] = "medium"
            self.logger.bind_context("unknown", self.name).warning(
                "üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π risk_level: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ 'medium'"
            )
        
        # –°—Ç—Ä–æ–∫–æ–≤—ã–µ –ø–æ–ª—è
        string_fields = ["probability_reasoning", "impact_reasoning"]
        for field in string_fields:
            if not isinstance(data.get(field), str) or len(str(data[field]).strip()) < 5:
                data[field] = f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –¥–ª—è {field}"
        
        # –°–ø–∏—Å–∫–æ–≤—ã–µ –ø–æ–ª—è
        list_fields = ["key_factors", "recommendations"]
        for field in list_fields:
            if not isinstance(data.get(field), list):
                data[field] = []
            else:
                # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç –ø—É—Å—Ç—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                data[field] = [
                    str(item).strip() for item in data[field] 
                    if item and str(item).strip()
                ][:10]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        
        return data

    def _validate_business_logic(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–∞"""
        
        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º total_score –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
        data["total_score"] = data["probability_score"] * data["impact_score"]
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º risk_level –Ω–∞ –æ—Å–Ω–æ–≤–µ total_score
        total_score = data["total_score"]
        if total_score <= 6:
            correct_level = "low"
        elif total_score <= 14:
            correct_level = "medium"
        else:
            correct_level = "high"
        
        if data["risk_level"] != correct_level:
            old_level = data["risk_level"]
            data["risk_level"] = correct_level
            self.logger.bind_context("unknown", self.name).debug(
                f"üîß –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω risk_level: {old_level} ‚Üí {correct_level} (total_score: {total_score})"
            )
        
        return data
    def _get_default_evaluation_data(self, error_message: str) -> Dict[str, Any]:
        """–£–õ–£–ß–®–ï–ù–ù–´–ï –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ü–µ–Ω–∫–∏"""
        return {
            "probability_score": 3,
            "impact_score": 3,
            "total_score": 9,
            "risk_level": "medium",
            "probability_reasoning": f"LLM –Ω–µ —Å–º–æ–≥ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ. –û—à–∏–±–∫–∞: {error_message}",
            "impact_reasoning": f"LLM –Ω–µ —Å–º–æ–≥ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ. –û—à–∏–±–∫–∞: {error_message}",
            "key_factors": ["–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"],
            "recommendations": ["–ü—Ä–æ–≤–µ—Å—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑", "–£–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"],
            "confidence_level": 0.3  # –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è fallback –¥–∞–Ω–Ω—ã—Ö
        }

# ===============================
# –§–∞–±—Ä–∏–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤
# ===============================

def create_agent_config(
    name: str,
    description: str,
    llm_base_url: Optional[str] = None,
    llm_model: Optional[str] = None,
    temperature: Optional[float] = None,
    max_retries: Optional[int] = None,
    timeout_seconds: Optional[int] = None,
    use_risk_analysis_client: bool = False
) -> AgentConfig:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞
    –û–ë–ù–û–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä
    """
    # –ò–ó–ú–ï–ù–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä–∞
    manager = get_llm_config_manager()
    base_config = manager.get_config()  # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º
    actual_base_url = llm_base_url or base_config.base_url
    actual_model = llm_model or base_config.model
    actual_temperature = temperature if temperature is not None else base_config.temperature
    actual_max_retries = max_retries if max_retries is not None else base_config.max_retries
    actual_timeout = timeout_seconds if timeout_seconds is not None else base_config.timeout
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ–∑–¥–∞–µ–º LLM –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–æ –í–°–ï–ú–ò –ø–æ–ª—è–º–∏ –≤–∫–ª—é—á–∞—è provider
    llm_config = LLMConfig(
        base_url=actual_base_url,
        model=actual_model,
        temperature=actual_temperature,
        max_tokens=base_config.max_tokens,
        timeout=actual_timeout,
        max_retries=actual_max_retries,
        retry_delay=base_config.retry_delay,
        
        # –ö–†–ò–¢–ò–ß–ù–û: –ü–µ—Ä–µ–¥–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∏ –≤—Å–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–æ–ª—è
        provider=base_config.provider,
        cert_file=base_config.cert_file,
        key_file=base_config.key_file,
        top_p=base_config.top_p,
        verify_ssl_certs=base_config.verify_ssl_certs,
        profanity_check=base_config.profanity_check,
        streaming=base_config.streaming
    )
    
    return AgentConfig(
        name=name,
        description=description,
        llm_config=llm_config,
        max_retries=actual_max_retries,
        timeout_seconds=actual_timeout,
        temperature=actual_temperature,
        use_risk_analysis_client=use_risk_analysis_client
    )


def create_default_config_from_env() -> AgentConfig:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    –û–ë–ù–û–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä
    """
    # –ò–ó–ú–ï–ù–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ —á—Ç–µ–Ω–∏—è env
    return create_agent_config(
        name="default_agent",
        description="–ê–≥–µ–Ω—Ç —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
        # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±–µ—Ä—É—Ç—Å—è –∏–∑ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä–∞
    )


# –≠–∫—Å–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤
__all__ = [
    "BaseAgent",
    "AnalysisAgent", 
    "EvaluationAgent",
    "AgentConfig",
    "create_agent_config",
    "create_default_config_from_env"
]
