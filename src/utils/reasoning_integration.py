# src/utils/reasoning_integration.py - –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã—Ö –ø–∞—Ç—á–µ–π
applied_patches = set()

"""
–ù–ê–î–ï–ñ–ù–ê–Ø –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π –∞–≥–µ–Ω—Ç–æ–≤ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Å–∏–≥–Ω–∞—Ç—É—Ä
"""

import json
import inspect
from typing import Dict, Any
from rich.console import Console
from rich.panel import Panel
from rich.text import Text

console = Console()

def show_agent_reasoning(
    agent_name: str,
    risk_type: str,
    evaluation_result: Dict[str, Any],
    agent_profile_summary: str = ""
):
    """–ü—Ä–æ—Å—Ç–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π –∞–≥–µ–Ω—Ç–∞"""
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    prob_score = evaluation_result.get('probability_score', 0)
    impact_score = evaluation_result.get('impact_score', 0)
    total_score = evaluation_result.get('total_score', 0)
    risk_level = evaluation_result.get('risk_level', 'unknown')
    
    prob_reasoning = evaluation_result.get('probability_reasoning', '–ù–µ—Ç –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è')
    impact_reasoning = evaluation_result.get('impact_reasoning', '–ù–µ—Ç –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è')
    key_factors = evaluation_result.get('key_factors', [])
    recommendations = evaluation_result.get('recommendations', [])
    confidence = evaluation_result.get('confidence_level', 0.0)
    
    # –¶–≤–µ—Ç –ø–æ —É—Ä–æ–≤–Ω—é —Ä–∏—Å–∫–∞
    level_color = {
        'low': 'green',
        'medium': 'yellow', 
        'high': 'red'
    }.get(risk_level, 'white')
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —Å —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è–º–∏
    reasoning_text = Text()
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    reasoning_text.append(f"üß† {agent_name} –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç: {risk_type}\n\n", style="bold blue")
    
    # –†–∞—Å—Å—É–∂–¥–µ–Ω–∏–µ –æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
    reasoning_text.append("üí≠ –ê–Ω–∞–ª–∏–∑ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏:\n", style="bold cyan")
    reasoning_text.append(f"{prob_reasoning}\n", style="white")
    reasoning_text.append(f"‚ûú –û—Ü–µ–Ω–∫–∞: {prob_score}/5\n\n", style="cyan")
    
    # –†–∞—Å—Å—É–∂–¥–µ–Ω–∏–µ –æ —Ç—è–∂–µ—Å—Ç–∏
    reasoning_text.append("üéØ –ê–Ω–∞–ª–∏–∑ —Ç—è–∂–µ—Å—Ç–∏ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏–π:\n", style="bold cyan")
    reasoning_text.append(f"{impact_reasoning}\n", style="white")
    reasoning_text.append(f"‚ûú –û—Ü–µ–Ω–∫–∞: {impact_score}/5\n\n", style="cyan")
    
    # –ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
    if key_factors:
        reasoning_text.append("üîë –ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã —Ä–∏—Å–∫–∞:\n", style="bold yellow")
        for factor in key_factors[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-3
            reasoning_text.append(f"‚Ä¢ {factor}\n", style="yellow")
        reasoning_text.append("\n")
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
    reasoning_text.append("üéØ –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê:\n", style="bold")
    reasoning_text.append(f"–û–±—â–∏–π –±–∞–ª–ª: {total_score}/25\n", style="white")
    reasoning_text.append(f"–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: ", style="white")
    reasoning_text.append(f"{risk_level.upper()}\n", style=f"bold {level_color}")
    reasoning_text.append(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.1%}\n\n", style="blue")
    
    # –¢–æ–ø-3 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if recommendations:
        reasoning_text.append("üí° –¢–æ–ø-3 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n", style="bold green")
        for i, rec in enumerate(recommendations[:3], 1):
            reasoning_text.append(f"{i}. {rec}\n", style="green")
    
    # –í—ã–≤–æ–¥–∏–º –ø–∞–Ω–µ–ª—å —Å —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è–º–∏
    console.print(Panel(
        reasoning_text,
        title=f"üß† –†–∞—Å—Å—É–∂–¥–µ–Ω–∏—è: {agent_name}",
        border_style=level_color,
        padding=(1, 2)
    ))


def show_critic_reasoning(risk_type: str, critic_result: Dict[str, Any]):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π –∫—Ä–∏—Ç–∏–∫–∞"""
    
    quality_score = critic_result.get('quality_score', 0)
    is_acceptable = critic_result.get('is_acceptable', False)
    issues_found = critic_result.get('issues_found', [])
    suggestions = critic_result.get('improvement_suggestions', [])
    reasoning = critic_result.get('critic_reasoning', '–ù–µ—Ç —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π')
    
    # –¶–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∏–µ–º–ª–µ–º–æ—Å—Ç–∏
    border_color = "green" if is_acceptable else "red"
    status_icon = "‚úÖ" if is_acceptable else "‚ùå"
    
    reasoning_text = Text()
    reasoning_text.append(f"üîç –ö—Ä–∏—Ç–∏–∫ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç: {risk_type}\n\n", style="bold blue")
    reasoning_text.append(f"üìä –ö–∞—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–∫–∏: {quality_score}/10\n", style="cyan")
    reasoning_text.append(f"{status_icon} –°—Ç–∞—Ç—É—Å: {'–ü–†–ò–ù–Ø–¢–û' if is_acceptable else '–û–¢–ö–õ–û–ù–ï–ù–û'}\n\n", style=f"bold {'green' if is_acceptable else 'red'}")
    
    reasoning_text.append("ü§î –†–∞—Å—Å—É–∂–¥–µ–Ω–∏—è –∫—Ä–∏—Ç–∏–∫–∞:\n", style="bold yellow")
    reasoning_text.append(f"{reasoning}\n\n", style="white")
    
    if issues_found:
        reasoning_text.append("‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:\n", style="bold red")
        for issue in issues_found:
            reasoning_text.append(f"‚Ä¢ {issue}\n", style="red")
        reasoning_text.append("\n")
    
    if suggestions:
        reasoning_text.append("üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é:\n", style="bold green")
        for suggestion in suggestions:
            reasoning_text.append(f"‚Ä¢ {suggestion}\n", style="green")
    
    console.print(Panel(
        reasoning_text,
        title="üîç –ê–Ω–∞–ª–∏–∑ –∫—Ä–∏—Ç–∏–∫–∞",
        border_style=border_color,
        padding=(1, 2)
    ))


def enable_reasoning_in_evaluators():
    """
    –ù–ê–î–ï–ñ–ù–û–ï –≤–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π –≤ –∞–≥–µ–Ω—Ç–∞—Ö-–æ—Ü–µ–Ω—â–∏–∫–∞—Ö
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–∏–≥–Ω–∞—Ç—É—Ä—É –º–µ—Ç–æ–¥–∞ –∏ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –∫ –Ω–µ–π
    """
    
    try:
        from src.utils.llm_client import RiskAnalysisLLMClient
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
        original_evaluate_risk = getattr(RiskAnalysisLLMClient, 'evaluate_risk', None)
        
        if not original_evaluate_risk:
            print("‚ö†Ô∏è –ú–µ—Ç–æ–¥ evaluate_risk –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ RiskAnalysisLLMClient")
            return
        
        # –ò–ù–°–ü–ï–ö–¢–ò–†–£–ï–ú –°–ò–ì–ù–ê–¢–£–†–£ –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ì–û –ú–ï–¢–û–î–ê
        sig = inspect.signature(original_evaluate_risk)
        param_names = list(sig.parameters.keys())
        
        print(f"üîç –ù–∞–π–¥–µ–Ω–∞ —Å–∏–≥–Ω–∞—Ç—É—Ä–∞: {param_names}")
        
        # –°–û–ó–î–ê–ï–ú –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–£–Æ –û–ë–ï–†–¢–ö–£
        async def universal_patched_evaluate_risk(self, *args, **kwargs):
            """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ø–∞—Ç—á–µ–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–µ–π –∫ —Å–∏–≥–Ω–∞—Ç—É—Ä–µ"""
            
            try:
                # –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ —Å —Ç–æ—á–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                result = await original_evaluate_risk(self, *args, **kwargs)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã
                try:
                    import os
                    if os.getenv("SHOW_AGENT_REASONING", "true").lower() == "true":
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º risk_type –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
                        risk_type = args[0] if args else kwargs.get('risk_type', 'Unknown')
                        
                        show_agent_reasoning(
                            agent_name=getattr(self, '_current_agent_name', 'Unknown Agent'),
                            risk_type=str(risk_type),
                            evaluation_result=result,
                            agent_profile_summary=""
                        )
                except Exception as e:
                    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    pass
                
                return result
                
            except Exception as e:
                # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ª–æ–≥–∏—Ä—É–µ–º –∏ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –ø–∞—Ç—á–µ–Ω–æ–º –º–µ—Ç–æ–¥–µ evaluate_risk: {e}")
                raise
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—á
        RiskAnalysisLLMClient.evaluate_risk = universal_patched_evaluate_risk
        print("‚úÖ –ü–∞—Ç—á –¥–ª—è evaluate_risk —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω")
        
        # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û: –ø–∞—Ç—á–∏–º —Ç–∞–∫–∂–µ critique_evaluation –¥–ª—è –∫—Ä–∏—Ç–∏–∫–∞
        original_critique_evaluation = getattr(RiskAnalysisLLMClient, 'critique_evaluation', None)
        
        if original_critique_evaluation:
            async def universal_patched_critique_evaluation(self, *args, **kwargs):
                """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ø–∞—Ç—á–µ–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è critique_evaluation"""
                
                try:
                    # –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
                    result = await original_critique_evaluation(self, *args, **kwargs)
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è –∫—Ä–∏—Ç–∏–∫–∞, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã
                    try:
                        import os
                        if os.getenv("SHOW_CRITIC_REASONING", "true").lower() == "true":
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º risk_type –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
                            risk_type = args[0] if args else kwargs.get('risk_type', 'Unknown')
                            
                            show_critic_reasoning(str(risk_type), result)
                    except Exception as e:
                        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        pass
                    
                    return result
                    
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –ø–∞—Ç—á–µ–Ω–æ–º –º–µ—Ç–æ–¥–µ critique_evaluation: {e}")
                    raise
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—á
            RiskAnalysisLLMClient.critique_evaluation = universal_patched_critique_evaluation
            print("‚úÖ –ü–∞—Ç—á –¥–ª—è critique_evaluation —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω")
        
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ç—á–∞ –æ—Ü–µ–Ω—â–∏–∫–æ–≤: {e}")


def enable_reasoning_in_critic():
    """–ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –≤–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π –∫—Ä–∏—Ç–∏–∫–∞"""
    
    try:
        from src.agents.critic_agent import CriticAgent
        
        # –ü–∞—Ç—á–∏–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥ _critique_evaluation (—Ä–µ–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –∫—Ä–∏—Ç–∏–∫–∞)
        original_critique = getattr(CriticAgent, '_critique_evaluation', None)
        
        if not original_critique:
            print("‚ö†Ô∏è –ú–µ—Ç–æ–¥ _critique_evaluation –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ CriticAgent")
            return
        
        # –ò–Ω—Å–ø–µ–∫—Ç–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞—Ç—É—Ä—É
        sig = inspect.signature(original_critique)
        param_names = list(sig.parameters.keys())
        print(f"üîç –ù–∞–π–¥–µ–Ω–∞ —Å–∏–≥–Ω–∞—Ç—É—Ä–∞ –∫—Ä–∏—Ç–∏–∫–∞: {param_names}")
        
        async def universal_patched_critique(self, *args, **kwargs):
            """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ø–∞—Ç—á–µ–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∫—Ä–∏—Ç–∏–∫–∞"""
            
            try:
                # –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
                result = await original_critique(self, *args, **kwargs)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è –∫—Ä–∏—Ç–∏–∫–∞
                try:
                    import os
                    if os.getenv("SHOW_CRITIC_REASONING", "true").lower() == "true":
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º risk_type –∏–∑ kwargs –∏–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
                        risk_type = kwargs.get('risk_type', 'Unknown')
                        if hasattr(risk_type, 'value'):
                            risk_type = risk_type.value
                        
                        show_critic_reasoning(str(risk_type), result)
                except Exception as e:
                    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    pass
                
                return result
                
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –ø–∞—Ç—á–µ–Ω–æ–º –º–µ—Ç–æ–¥–µ _critique_evaluation: {e}")
                raise
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—á
        CriticAgent._critique_evaluation = universal_patched_critique
        print("‚úÖ –ü–∞—Ç—á –¥–ª—è –∫—Ä–∏—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω")
        
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ç—á–∞ –∫—Ä–∏—Ç–∏–∫–∞: {e}")


# ==========================================
# –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ü–†–û–°–¢–ê–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –í –û–î–ò–ù –ö–õ–ò–ö
# ==========================================

def enable_all_reasoning():
    """
    –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –≤–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π
    –î–æ–±–∞–≤–∏—Ç—å –û–î–ù–£ —Å—Ç—Ä–æ—á–∫—É –≤ main.py:
    
    from src.utils.reasoning_integration import enable_all_reasoning
    enable_all_reasoning()
    """
    
    print("üß† –í–∫–ª—é—á–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π –∞–≥–µ–Ω—Ç–æ–≤...")
    
    try:
        enable_reasoning_in_evaluators()
        print("‚úÖ –†–∞—Å—Å—É–∂–¥–µ–Ω–∏—è –æ—Ü–µ–Ω—â–∏–∫–æ–≤ –≤–∫–ª—é—á–µ–Ω—ã")
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –º–µ—Ç–æ–¥ evaluate_risk –¥–ª—è –ø–∞—Ç—á–∞")
    
    try:
        enable_reasoning_in_critic()
        print("‚úÖ –†–∞—Å—Å—É–∂–¥–µ–Ω–∏—è –∫—Ä–∏—Ç–∏–∫–∞ –≤–∫–ª—é—á–µ–Ω—ã") 
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –º–µ—Ç–æ–¥ analyze_evaluation_quality –¥–ª—è –ø–∞—Ç—á–∞")
    
    print("üéâ –†–∞—Å—Å—É–∂–¥–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã!")


# ==========================================
# –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø
# ==========================================

def setup_reasoning_env():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è–º–∏"""
    
    import os
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    if "SHOW_AGENT_REASONING" not in os.environ:
        os.environ["SHOW_AGENT_REASONING"] = "true"
    
    if "SHOW_CRITIC_REASONING" not in os.environ:
        os.environ["SHOW_CRITIC_REASONING"] = "true"
    
    print(f"üîß –†–∞—Å—Å—É–∂–¥–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤: {'–í–ö–õ' if os.getenv('SHOW_AGENT_REASONING') == 'true' else '–í–´–ö–õ'}")
    print(f"üîß –†–∞—Å—Å—É–∂–¥–µ–Ω–∏—è –∫—Ä–∏—Ç–∏–∫–∞: {'–í–ö–õ' if os.getenv('SHOW_CRITIC_REASONING') == 'true' else '–í–´–ö–õ'}")


# ==========================================
# –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –û–¢–õ–ê–î–ö–ò
# ==========================================

def inspect_method_signatures():
    """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–≥–Ω–∞—Ç—É—Ä –º–µ—Ç–æ–¥–æ–≤"""
    
    try:
        from src.utils.llm_client import RiskAnalysisLLMClient
        from src.agents.critic_agent import CriticAgent
        
        print("üîç –ò–ù–°–ü–ï–ö–¶–ò–Ø –°–ò–ì–ù–ê–¢–£–† –ú–ï–¢–û–î–û–í:")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º RiskAnalysisLLMClient
        evaluate_risk_method = getattr(RiskAnalysisLLMClient, 'evaluate_risk', None)
        if evaluate_risk_method:
            sig = inspect.signature(evaluate_risk_method)
            print(f"üìã RiskAnalysisLLMClient.evaluate_risk: {list(sig.parameters.keys())}")
        else:
            print("‚ùå RiskAnalysisLLMClient.evaluate_risk –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º CriticAgent
        analyze_method = getattr(CriticAgent, 'analyze_evaluation_quality', None)
        if analyze_method:
            sig = inspect.signature(analyze_method)
            print(f"üìã CriticAgent.analyze_evaluation_quality: {list(sig.parameters.keys())}")
        else:
            print("‚ùå CriticAgent.analyze_evaluation_quality –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω—Å–ø–µ–∫—Ü–∏–∏: {e}")


# ==========================================
# –≠–ö–°–ü–û–†–¢
# ==========================================

__all__ = [
    'show_agent_reasoning',
    'show_critic_reasoning', 
    'enable_all_reasoning',
    'setup_reasoning_env',
    'inspect_method_signatures'
]