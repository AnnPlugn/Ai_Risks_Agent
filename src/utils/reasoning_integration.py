# src/utils/reasoning_integration.py
"""
–ü–†–û–°–¢–ê–Ø –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π –∞–≥–µ–Ω—Ç–æ–≤ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥
–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–æ–ª—å–∑–∞
"""

import json
from typing import Dict, Any
from rich.console import Console
from rich.panel import Panel
from rich.text import Text

console = Console()

def show_agent_reasoning(
    agent_name: str,
    risk_type: str,
    evaluation_result: Dict[str, Any],
    agent_profile_summary: str = ""
):
    """
    –ü—Ä–æ—Å—Ç–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π –∞–≥–µ–Ω—Ç–∞
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ü–û–°–õ–ï –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ—Ç LLM
    """
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    prob_score = evaluation_result.get('probability_score', 0)
    impact_score = evaluation_result.get('impact_score', 0)
    total_score = evaluation_result.get('total_score', 0)
    risk_level = evaluation_result.get('risk_level', 'unknown')
    
    prob_reasoning = evaluation_result.get('probability_reasoning', '–ù–µ—Ç –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è')
    impact_reasoning = evaluation_result.get('impact_reasoning', '–ù–µ—Ç –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è')
    key_factors = evaluation_result.get('key_factors', [])
    recommendations = evaluation_result.get('recommendations', [])
    confidence = evaluation_result.get('confidence_level', 0.0)
    
    # –¶–≤–µ—Ç –ø–æ —É—Ä–æ–≤–Ω—é —Ä–∏—Å–∫–∞
    level_color = {
        'low': 'green',
        'medium': 'yellow',
        'high': 'red'
    }.get(risk_level, 'white')
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —Å —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è–º–∏
    reasoning_text = Text()
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    reasoning_text.append(f"üß† {agent_name} –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç: {risk_type}\n\n", style="bold blue")
    
    # –†–∞—Å—Å—É–∂–¥–µ–Ω–∏–µ –æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
    reasoning_text.append("üí≠ –ê–Ω–∞–ª–∏–∑ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏:\n", style="bold cyan")
    reasoning_text.append(f"{prob_reasoning}\n", style="white")
    reasoning_text.append(f"‚ûú –û—Ü–µ–Ω–∫–∞: {prob_score}/5\n\n", style="cyan")
    
    # –†–∞—Å—Å—É–∂–¥–µ–Ω–∏–µ –æ —Ç—è–∂–µ—Å—Ç–∏
    reasoning_text.append("üéØ –ê–Ω–∞–ª–∏–∑ —Ç—è–∂–µ—Å—Ç–∏ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏–π:\n", style="bold cyan")
    reasoning_text.append(f"{impact_reasoning}\n", style="white")
    reasoning_text.append(f"‚ûú –û—Ü–µ–Ω–∫–∞: {impact_score}/5\n\n", style="cyan")
    
    # –ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
    if key_factors:
        reasoning_text.append("üîë –ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã —Ä–∏—Å–∫–∞:\n", style="bold yellow")
        for factor in key_factors[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-3
            reasoning_text.append(f"‚Ä¢ {factor}\n", style="yellow")
        reasoning_text.append("\n")
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
    reasoning_text.append("üéØ –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê:\n", style="bold")
    reasoning_text.append(f"–û–±—â–∏–π –±–∞–ª–ª: {total_score}/25\n", style="white")
    reasoning_text.append(f"–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: ", style="white")
    reasoning_text.append(f"{risk_level.upper()}\n", style=f"bold {level_color}")
    reasoning_text.append(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.1%}\n\n", style="blue")
    
    # –¢–æ–ø-3 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if recommendations:
        reasoning_text.append("üí° –¢–æ–ø-3 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n", style="bold green")
        for i, rec in enumerate(recommendations[:3], 1):
            reasoning_text.append(f"{i}. {rec}\n", style="green")
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–∞–Ω–µ–ª—å
    console.print(Panel(
        reasoning_text,
        title=f"üîç –†–∞—Å—Å—É–∂–¥–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞",
        border_style=level_color,
        width=100
    ))
    
    console.print("‚îÄ" * 100)


def show_critic_reasoning(
    risk_type: str,
    critic_result: Dict[str, Any]
):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π –∫—Ä–∏—Ç–∏–∫–∞"""
    
    quality_score = critic_result.get('quality_score', 0)
    is_acceptable = critic_result.get('is_acceptable', False)
    critic_reasoning = critic_result.get('critic_reasoning', '–ù–µ—Ç –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è')
    issues = critic_result.get('issues_found', [])
    suggestions = critic_result.get('improvement_suggestions', [])
    
    # –¶–≤–µ—Ç –ø–æ –∫–∞—á–µ—Å—Ç–≤—É
    color = "green" if is_acceptable else "red"
    status = "‚úÖ –ü–†–ò–ù–Ø–¢–û" if is_acceptable else "‚ùå –û–¢–ö–õ–û–ù–ï–ù–û"
    
    critic_text = Text()
    critic_text.append(f"üîç –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑: {risk_type}\n", style="bold")
    critic_text.append(f"üìä –ö–∞—á–µ—Å—Ç–≤–æ: {quality_score:.1f}/10 - {status}\n\n", style=f"bold {color}")
    critic_text.append(f"üí≠ –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏–∫–∞:\n{critic_reasoning}\n", style="white")
    
    if issues:
        critic_text.append(f"\n‚ö†Ô∏è –í—ã—è–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:\n", style="yellow")
        for issue in issues[:3]:
            critic_text.append(f"‚Ä¢ {issue}\n", style="yellow")
    
    if suggestions:
        critic_text.append(f"\nüí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é:\n", style="blue")
        for suggestion in suggestions[:3]:
            critic_text.append(f"‚Ä¢ {suggestion}\n", style="blue")
    
    console.print(Panel(
        critic_text,
        title="üîç –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑",
        border_style=color,
        width=100
    ))


# ==========================================
# –ü–ê–¢–ß–ò –î–õ–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –í –°–£–©–ï–°–¢–í–£–Æ–©–ò–ô –ö–û–î
# ==========================================

def enable_reasoning_in_evaluators():
    """
    –í–∫–ª—é—á–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π –≤ –∞–≥–µ–Ω—Ç–∞—Ö-–æ—Ü–µ–Ω—â–∏–∫–∞—Ö
    –ù–£–ñ–ù–û –í–´–ó–í–ê–¢–¨ –û–î–ò–ù –†–ê–ó –≤ –Ω–∞—á–∞–ª–µ main.py
    """
    
    # –ü–∞—Ç—á–∏–º –º–µ—Ç–æ–¥ evaluate_risk –≤ –±–∞–∑–æ–≤–æ–º –∞–≥–µ–Ω—Ç–µ
    from src.agents.base_agent import AnalysisAgent
    from src.utils.llm_client import RiskAnalysisLLMClient
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
    original_evaluate_risk = getattr(RiskAnalysisLLMClient, 'evaluate_risk', None)
    
    if original_evaluate_risk:
        async def patched_evaluate_risk(self, risk_type, agent_data, evaluation_criteria, assessment_id):
            """–ü–∞—Ç—á–µ–Ω—ã–π –º–µ—Ç–æ–¥ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π"""
            
            # –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
            result = await original_evaluate_risk(self, risk_type, agent_data, evaluation_criteria, assessment_id)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è
                import os
                if os.getenv("SHOW_AGENT_REASONING", "true").lower() == "true":
                    show_agent_reasoning(
                        agent_name=getattr(self, '_current_agent_name', 'Unknown Agent'),
                        risk_type=risk_type,
                        evaluation_result=result,
                        agent_profile_summary=str(agent_data)[:200]
                    )
            except Exception as e:
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                pass
            
            return result
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—á
        RiskAnalysisLLMClient.evaluate_risk = patched_evaluate_risk


def enable_reasoning_in_critic():
    """–í–∫–ª—é—á–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π –∫—Ä–∏—Ç–∏–∫–∞"""
    
    from src.agents.critic_agent import CriticAgent
    
    # –ü–∞—Ç—á–∏–º –º–µ—Ç–æ–¥ analyze_evaluation_quality
    original_analyze = getattr(CriticAgent, 'analyze_evaluation_quality', None)
    
    if original_analyze:
        async def patched_analyze(self, original_evaluation, agent_data, quality_threshold, assessment_id):
            """–ü–∞—Ç—á–µ–Ω—ã–π –º–µ—Ç–æ–¥ –∫—Ä–∏—Ç–∏–∫–∞ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π"""
            
            # –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
            result = await original_analyze(self, original_evaluation, agent_data, quality_threshold, assessment_id)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è –∫—Ä–∏—Ç–∏–∫–∞
            try:
                import os
                if os.getenv("SHOW_CRITIC_REASONING", "true").lower() == "true":
                    risk_type = original_evaluation.get('risk_type', 'Unknown')
                    show_critic_reasoning(risk_type, result)
            except Exception as e:
                pass
            
            return result
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—á
        CriticAgent.analyze_evaluation_quality = patched_analyze


# ==========================================
# –ü–†–û–°–¢–ê–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –í –û–î–ò–ù –ö–õ–ò–ö
# ==========================================

def enable_all_reasoning():
    """
    –ü–†–û–°–¢–û–ï –≤–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π
    –î–æ–±–∞–≤–∏—Ç—å –û–î–ù–£ —Å—Ç—Ä–æ—á–∫—É –≤ main.py:
    
    from src.utils.reasoning_integration import enable_all_reasoning
    enable_all_reasoning()
    """
    
    print("üß† –í–∫–ª—é—á–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π –∞–≥–µ–Ω—Ç–æ–≤...")
    
    try:
        enable_reasoning_in_evaluators()
        print("‚úÖ –†–∞—Å—Å—É–∂–¥–µ–Ω–∏—è –æ—Ü–µ–Ω—â–∏–∫–æ–≤ –≤–∫–ª—é—á–µ–Ω—ã")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ç—á–∞ –æ—Ü–µ–Ω—â–∏–∫–æ–≤: {e}")
    
    try:
        enable_reasoning_in_critic()
        print("‚úÖ –†–∞—Å—Å—É–∂–¥–µ–Ω–∏—è –∫—Ä–∏—Ç–∏–∫–∞ –≤–∫–ª—é—á–µ–Ω—ã")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ç—á–∞ –∫—Ä–∏—Ç–∏–∫–∞: {e}")
    
    print("üéâ –†–∞—Å—Å—É–∂–¥–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã!")


# ==========================================
# –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø
# ==========================================

def setup_reasoning_env():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è–º–∏"""
    
    import os
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    if "SHOW_AGENT_REASONING" not in os.environ:
        os.environ["SHOW_AGENT_REASONING"] = "true"
    
    if "SHOW_CRITIC_REASONING" not in os.environ:
        os.environ["SHOW_CRITIC_REASONING"] = "true"
    
    print(f"üîß –†–∞—Å—Å—É–∂–¥–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤: {'–í–ö–õ' if os.getenv('SHOW_AGENT_REASONING') == 'true' else '–í–´–ö–õ'}")
    print(f"üîß –†–∞—Å—Å—É–∂–¥–µ–Ω–∏—è –∫—Ä–∏—Ç–∏–∫–∞: {'–í–ö–õ' if os.getenv('SHOW_CRITIC_REASONING') == 'true' else '–í–´–ö–õ'}")


# ==========================================
# –≠–ö–°–ü–û–†–¢
# ==========================================

__all__ = [
    'show_agent_reasoning',
    'show_critic_reasoning', 
    'enable_all_reasoning',
    'setup_reasoning_env'
]