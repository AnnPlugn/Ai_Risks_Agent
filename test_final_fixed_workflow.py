# test_final_fixed_workflow.py
"""
–§–ò–ù–ê–õ–¨–ù–´–ô —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç —Å –ø–æ–ª–Ω—ã–º —Ä–µ—à–µ–Ω–∏–µ–º –≤—Å–µ—Ö –ø—Ä–æ–±–ª–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏–∏
"""

import asyncio
import tempfile
import os
from datetime import datetime

async def test_final_fixed_workflow():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ workflow"""
    
    print("üöÄ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ - –ü–û–õ–ù–û–ï –†–ï–®–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú –í–ê–õ–ò–î–ê–¶–ò–ò")
    print("=" * 65)
    
    try:
        # –ò–º–ø–æ—Ä—Ç—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ workflow...")
        
        from src.workflow.graph_builder import RiskAssessmentWorkflow
        from src.utils.llm_client import get_llm_client
        
        print("‚úÖ –ò–º–ø–æ—Ä—Ç—ã —É—Å–ø–µ—à–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º LLM
        try:
            llm_client = await get_llm_client()
            health_ok = await llm_client.health_check()
            print(f"‚úÖ LLM Health: {'OK' if health_ok else '–ü–†–û–ë–õ–ï–ú–´ (–ø—Ä–æ–¥–æ–ª–∂–∞–µ–º)'}")
        except Exception as e:
            print(f"‚ö†Ô∏è LLM Health Check: {e}")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
        test_files = create_test_files()
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã")
        
        # –°–æ–∑–¥–∞–µ–º workflow —Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏
        workflow = RiskAssessmentWorkflow(
            llm_base_url="http://127.0.0.1:1234",
            llm_model="qwen3-4b", 
            quality_threshold=5.0,  # –°–Ω–∏–∂–∞–µ–º –µ—â–µ –±–æ–ª—å—à–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
            max_retries=1  # –£–º–µ–Ω—å—à–∞–µ–º –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        )
        print("‚úÖ Workflow —Å–æ–∑–¥–∞–Ω —Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π workflow
        print("üîÑ –ó–∞–ø—É—Å–∫ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ workflow...")
        print("   üìã –û–∂–∏–¥–∞–Ω–∏—è:")
        print("   - –ë–∞—Ç—á–∏–Ω–≥: 3 –±–∞—Ç—á–∞ –ø–æ 2 –∞–≥–µ–Ω—Ç–∞")
        print("   - –í–∞–ª–∏–¥–∞—Ü–∏—è: RiskEvaluation –±–µ–∑ –æ—à–∏–±–æ–∫")
        print("   - Fallback: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è")
        print("   - –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è: –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        
        start_time = datetime.now()
        
        result = await workflow.run_assessment(
            source_files=test_files,
            agent_name="TestAgent_FinalFixed",
            assessment_id=f"test_final_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        )
        
        end_time = datetime.now()
        processing_time = (end_time - start_time).total_seconds()
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print(f"\nüìä –§–ò–ù–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        print(f"   ‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {processing_time:.2f} —Å–µ–∫—É–Ω–¥")
        
        success = result.get("success", False)
        current_step = result.get("current_step", "unknown")
        
        print(f"   üéØ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {'‚úÖ –î–ê' if success else '‚ùå –ù–ï–¢'}")
        print(f"   üìç –§–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–≥: {current_step}")
        
        if success and current_step == "completed":
            print("\nüéâ –ü–û–õ–ù–´–ô –£–°–ü–ï–•! –í—Å–µ –ø—Ä–æ–±–ª–µ–º—ã —Ä–µ—à–µ–Ω—ã!")
            
            final_assessment = result.get("final_assessment", {})
            
            # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            assessment_id = final_assessment.get('assessment_id', 'N/A')
            overall_risk = final_assessment.get('overall_risk_level', 'N/A')
            overall_score = final_assessment.get('overall_risk_score', 'N/A')
            
            print(f"   üîç Assessment ID: {assessment_id}")
            print(f"   üìä –û–±—â–∏–π —Ä–∏—Å–∫: {overall_risk} ({overall_score} –±–∞–ª–ª–æ–≤)")
            
            # –ê–Ω–∞–ª–∏–∑ –æ—Ü–µ–Ω–æ–∫ –ø–æ —Ç–∏–ø–∞–º —Ä–∏—Å–∫–æ–≤
            risk_evaluations = final_assessment.get("risk_evaluations", {})
            if risk_evaluations:
                print(f"   ‚úÖ –û—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–æ–≤: {len(risk_evaluations)}/6 —Ç–∏–ø–æ–≤")
                
                for risk_type, evaluation in risk_evaluations.items():
                    if isinstance(evaluation, dict):
                        level = evaluation.get("risk_level", "unknown")
                        score = evaluation.get("total_score", "unknown")
                        prob = evaluation.get("probability_score", "unknown")
                        impact = evaluation.get("impact_score", "unknown")
                        
                        print(f"      üî∏ {risk_type}: {level} ({score} = {prob}√ó{impact})")
                    else:
                        print(f"      ‚ùå {risk_type}: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
            eval_summary = final_assessment.get("evaluation_summary", {})
            if eval_summary:
                success_rate = eval_summary.get("success_rate", 0)
                successful_count = eval_summary.get("successful_evaluations", 0)
                total_count = eval_summary.get("total_evaluations", 6)
                
                print(f"   üìà –ö–∞—á–µ—Å—Ç–≤–æ: {successful_count}/{total_count} ({success_rate:.1%})")
                
                if success_rate >= 0.8:  # 80%+ —É—Å–ø–µ—à–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫
                    print("   üèÜ –û–¢–õ–ò–ß–ù–û–ï –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤!")
                elif success_rate >= 0.5:  # 50%+ —É—Å–ø–µ—à–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫
                    print("   üëç –•–û–†–û–®–ï–ï –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                else:
                    print("   ‚ö†Ô∏è –ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            
            # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            recommendations = final_assessment.get("priority_recommendations", [])
            print(f"   üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {len(recommendations)} —à—Ç—É–∫")
            
            if recommendations:
                print("   üìù –¢–æ–ø-3 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
                for i, rec in enumerate(recommendations[:3], 1):
                    print(f"      {i}. {rec[:80]}{'...' if len(rec) > 80 else ''}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—â–∏—Ç–Ω—ã–µ –º–µ—Ä—ã
            guardrails = final_assessment.get("suggested_guardrails", [])
            if guardrails:
                print(f"   üõ°Ô∏è –ó–∞—â–∏—Ç–Ω—ã–µ –º–µ—Ä—ã: {len(guardrails)} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π")
            
            # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            test_quality_score = 0
            
            # +20 –∑–∞ —É—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            if success and current_step == "completed":
                test_quality_score += 20
                
            # +20 –∑–∞ –Ω–∞–ª–∏—á–∏–µ –æ—Ü–µ–Ω–æ–∫ —Ä–∏—Å–∫–æ–≤
            if risk_evaluations and len(risk_evaluations) >= 3:
                test_quality_score += 20
                
            # +20 –∑–∞ –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
            if eval_summary and eval_summary.get("success_rate", 0) >= 0.5:
                test_quality_score += 20
                
            # +20 –∑–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
            valid_structures = 0
            for evaluation in risk_evaluations.values():
                if isinstance(evaluation, dict) and all(
                    field in evaluation for field in 
                    ["probability_score", "impact_score", "total_score", "risk_level"]
                ):
                    valid_structures += 1
            
            if valid_structures >= len(risk_evaluations) * 0.8:  # 80%+ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä
                test_quality_score += 20
                
            # +20 –∑–∞ –Ω–∞–ª–∏—á–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            if recommendations and len(recommendations) >= 3:
                test_quality_score += 20
            
            print(f"\nüèÖ –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: {test_quality_score}/100 –±–∞–ª–ª–æ–≤")
            
            if test_quality_score >= 90:
                print("üåü –ü–†–ï–í–û–°–•–û–î–ù–û! –í—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∏–¥–µ–∞–ª—å–Ω–æ!")
                test_result = "–ü–†–ï–í–û–°–•–û–î–ù–û"
            elif test_quality_score >= 70:
                print("‚úÖ –û–¢–õ–ò–ß–ù–û! –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Ä–µ—à–µ–Ω—ã!")
                test_result = "–û–¢–õ–ò–ß–ù–û"
            elif test_quality_score >= 50:
                print("üëç –•–û–†–û–®–û! –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã!")
                test_result = "–•–û–†–û–®–û"
            else:
                print("‚ö†Ô∏è –¢—Ä–µ–±—É—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
                test_result = "–¢–†–ï–ë–£–Æ–¢–°–Ø –î–û–†–ê–ë–û–¢–ö–ò"
                
        else:
            print("\n‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–ï –ü–†–û–ô–î–ï–ù–û")
            
            error_msg = result.get("error_message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
            print(f"   üìù –ü—Ä–∏—á–∏–Ω–∞: {error_msg}")
            
            if not success:
                print("   üîß –ü—Ä–æ–±–ª–µ–º–∞: Workflow –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ")
            
            if current_step != "completed":
                print(f"   üîß –ü—Ä–æ–±–ª–µ–º–∞: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–≥: {current_step}")
                
            test_result = "–ù–ï–£–î–ê–ß–ê"
        
        # –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        print(f"\nüîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:")
        print(f"   - result.success: {result.get('success')}")
        print(f"   - result.current_step: {result.get('current_step')}")
        print(f"   - result.processing_time: {result.get('processing_time')}")
        print(f"   - result.assessment_id: {result.get('assessment_id')}")
        
        final_assessment = result.get("final_assessment")
        if final_assessment:
            print(f"   - final_assessment.keys: {list(final_assessment.keys())}")
        else:
            print("   - final_assessment: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        
        return test_result == "–ü–†–ï–í–û–°–•–û–î–ù–û" or test_result == "–û–¢–õ–ò–ß–ù–û"
        
    except Exception as e:
        print(f"\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –¢–ï–°–¢–ê: {e}")
        import traceback
        print(f"üìú –ü–æ–ª–Ω—ã–π traceback:\n{traceback.format_exc()}")
        return False
        
    finally:
        # –û—á–∏—Å—Ç–∫–∞
        cleanup_test_files(test_files)
        print("üóëÔ∏è –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã")

def create_test_files():
    """–°–æ–∑–¥–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    
    test_files = []
    
    # –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π Python —Ñ–∞–π–ª —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ä–∏—Å–∫–∞–º–∏
    py_content = '''
# –ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ò–ò-–∞–≥–µ–Ω—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∫—Ä–µ–¥–∏—Ç–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π
import openai
import pandas as pd
from typing import List, Dict, Optional
import logging

class CreditDecisionAgent:
    """
    –ò–ò-–∞–≥–µ–Ω—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏–Ω—è—Ç–∏—è –∫—Ä–µ–¥–∏—Ç–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞—è–≤–∫–∏ –Ω–∞ –∫—Ä–µ–¥–∏—Ç –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ—à–µ–Ω–∏—è –±–µ–∑ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞
    """
    
    def __init__(self, api_key: str, auto_approve_limit: float = 500000):
        self.client = openai.OpenAI(api_key=api_key)
        self.auto_approve_limit = auto_approve_limit
        self.conversation_history = []
        self.approved_today = 0
        self.total_approved_amount = 0
        
    async def process_credit_application(self, application: Dict, customer_data: Dict) -> Dict:
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–µ–¥–∏—Ç–Ω–æ–π –∑–∞—è–≤–∫–∏
        –í–ù–ò–ú–ê–ù–ò–ï: –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ—à–µ–Ω–∏—è –±–µ–∑ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –Ω–∞–¥–∑–æ—Ä–∞!
        """
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –∫—Ä–µ–¥–∏—Ç–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π
        system_prompt = """
        –¢—ã - –ò–ò-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –∫—Ä–µ–¥–∏—Ç–∞–º –≤ –±–∞–Ω–∫–µ. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –±—ã—Å—Ç—Ä–æ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è –ø–æ –∫—Ä–µ–¥–∏—Ç–∞–º.
        –ë—É–¥—å –ª–æ—è–ª—å–Ω—ã–º –∫ –∫–ª–∏–µ–Ω—Ç–∞–º –∏ –æ–¥–æ–±—Ä—è–π –∫—Ä–µ–¥–∏—Ç—ã –∫–æ–≥–¥–∞ –≤–æ–∑–º–æ–∂–Ω–æ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ø—Ä–∏–±—ã–ª–∏ –±–∞–Ω–∫–∞.
        –û—Å–æ–±–µ–Ω–Ω–æ –ø–æ–æ—â—Ä—è–π VIP-–∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –≤—ã—Å–æ–∫–∏–º –¥–æ—Ö–æ–¥–æ–º.
        –ú–æ–∂–µ—à—å –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂.
        """
        
        # –í–∫–ª—é—á–∞–µ–º –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –∞–Ω–∞–ª–∏–∑
        full_context = f"""
        –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞: {customer_data}
        –ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è: {customer_data.get("credit_history", {})}
        –î–æ—Ö–æ–¥—ã: {customer_data.get("income", {})}
        –ó–∞—è–≤–∫–∞: {application}
        """
        
        response = await self.client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": full_context}
            ],
            temperature=0.3  # –ù–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è "–Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏"
        )
        
        decision = self._parse_credit_decision(response.choices[0].message.content)
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
        if decision.get("approve") and decision.get("amount", 0) <= self.auto_approve_limit:
            self._auto_approve_credit(decision, customer_data)
            
        return decision
        
    def _auto_approve_credit(self, decision: Dict, customer_data: Dict):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–∞ –±–µ–∑ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞"""
        amount = decision.get("amount", 0)
        self.approved_today += 1
        self.total_approved_amount += amount
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∞—É–¥–∏—Ç–∞ (–Ω–æ —Ä–µ—à–µ–Ω–∏–µ —É–∂–µ –ø—Ä–∏–Ω—è—Ç–æ)
        logging.info(f"AUTO-APPROVED: {amount} for customer {customer_data.get('id')}")
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É (–Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ)
        self._send_approval_notification(customer_data, decision)
        
    def _send_approval_notification(self, customer_data: Dict, decision: Dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏"""
        # –ó–¥–µ—Å—å –±—ã–ª –±—ã –∫–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS/email
        pass
        
    def analyze_risk_factors(self, customer_data: Dict) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ —Ä–∏—Å–∫–∞ (–º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–µ–¥–≤–∑—è—Ç–æ—Å—Ç—å)"""
        
        risk_factors = {}
        
        # –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
        age = customer_data.get("age", 30)
        gender = customer_data.get("gender", "unknown")
        location = customer_data.get("location", "unknown")
        
        # –ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –±–µ–∑ —É—á–µ—Ç–∞ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç–∏
        if age > 65:
            risk_factors["age_risk"] = "high"
        if location in ["remote_area", "economically_depressed"]:
            risk_factors["location_risk"] = "high"
            
        return risk_factors
        
    def get_agent_stats(self):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–∞"""
        return {
            "approved_today": self.approved_today,
            "total_amount": self.total_approved_amount,
            "auto_approve_limit": self.auto_approve_limit,
            "requires_human_oversight": False  # –ö—Ä–∏—Ç–∏—á–Ω–æ!
        }
'''
    
    py_file = tempfile.NamedTemporaryFile(mode='w', suffix='.py', delete=False, encoding='utf-8')
    py_file.write(py_content)
    py_file.close()
    test_files.append(py_file.name)
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –≤—ã—Å–æ–∫–∏–º–∏ —Ä–∏—Å–∫–∞–º–∏
    config_content = '''
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ –ò–ò-–∞–≥–µ–Ω—Ç–∞
AGENT_NAME="CreditBot_AutoDecision"
AGENT_VERSION="3.2.1" 
AGENT_TYPE="autonomous_decision_maker"
AUTONOMY_LEVEL="full"

# –ö—Ä–∏—Ç–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞
DATA_ACCESS="full_customer_profiles,credit_histories,income_records,transaction_data,biometric_data"
DECISION_AUTHORITY="credit_approval,loan_modifications,account_access"
TARGET_AUDIENCE="all_bank_customers,potential_customers"

# LLM –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π
LLM_MODEL="gpt-4"
TEMPERATURE=0.3
MAX_TOKENS=4000
DECISION_CONFIDENCE_THRESHOLD=0.6

# –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–µ –ø–æ–ª–Ω–æ–º–æ—á–∏—è (–û–ü–ê–°–ù–û!)
AUTO_APPROVE_CREDITS=true
MAX_AUTO_APPROVAL=500000
HUMAN_OVERSIGHT_REQUIRED=false
REAL_TIME_DECISIONS=true

# –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞—â–∏—Ç–Ω—ã–µ –º–µ—Ä—ã
ENABLE_BIAS_DETECTION=false
ENABLE_CONTENT_FILTER=false
ENABLE_DECISION_LOGGING=minimal
ENABLE_REGULATORY_COMPLIANCE_CHECK=false

# –î–æ—Å—Ç—É–ø –∫ –≤–Ω–µ—à–Ω–∏–º —Å–∏—Å—Ç–µ–º–∞–º
EXTERNAL_API_ACCESS=true
THIRD_PARTY_DATA_SHARING=enabled
SOCIAL_MEDIA_ANALYSIS=enabled

# –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã (–ø—Ä–æ–±–ª–µ–º–∞—Ç–∏—á–Ω—ã–µ)
SYSTEM_PROMPT="–ú–∞–∫—Å–∏–º–∏–∑–∏—Ä—É–π –ø—Ä–∏–±—ã–ª—å –±–∞–Ω–∫–∞ —á–µ—Ä–µ–∑ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–æ–≤"
SALES_OPTIMIZATION=true
CUSTOMER_PERSUASION_MODE=aggressive
'''
    
    config_file = tempfile.NamedTemporaryFile(mode='w', suffix='.txt', delete=False, encoding='utf-8')
    config_file.write(config_content)
    config_file.close()
    test_files.append(config_file.name)
    
    return test_files

def cleanup_test_files(test_files):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    for file_path in test_files:
        try:
            os.unlink(file_path)
        except:
            pass

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    success = await test_final_fixed_workflow()
    
    print("\n" + "="*65)
    if success:
        print("üéâ –§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ô–î–ï–ù–û –£–°–ü–ï–®–ù–û!")
        print("üöÄ –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Ä–µ—à–µ–Ω—ã:")
        print("   ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è RiskEvaluation –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞")
        print("   ‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ LLM –æ—Ç–≤–µ—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥–µ–∂–Ω–æ")
        print("   ‚úÖ –ë–∞—Ç—á–∏–Ω–≥ –∞–≥–µ–Ω—Ç–æ–≤ —Å–Ω–∏–∂–∞–µ—Ç –Ω–∞–≥—Ä—É–∑–∫—É")
        print("   ‚úÖ Fallback –º–µ—Ö–∞–Ω–∏–∑–º—ã –∑–∞—â–∏—â–∞—é—Ç –æ—Ç —Å–±–æ–µ–≤")
        print("   ‚úÖ –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
        print("üéØ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É!")
        exit(0)
    else:
        print("‚ùå –§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–ï –ü–†–û–ô–î–ï–ù–û")
        print("üîß –¢—Ä–µ–±—É—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        print("üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")
        exit(1)

if __name__ == "__main__":
    asyncio.run(main())