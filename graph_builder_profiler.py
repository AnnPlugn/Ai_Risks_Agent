# src/workflow/graph_builder_profiler.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
"""
LangGraph workflow –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ò–ò-–∞–≥–µ–Ω—Ç–æ–≤
–ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
- –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
- –†–∞–±–æ—Ç–∞—é—â–∏–µ —É–∑–ª—ã
- –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
"""

import asyncio
import sys
from pathlib import Path
from typing import Dict, Any, List, Optional
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –≤ Python path
sys.path.insert(0, str(Path(__file__).parent.parent))

from langgraph.graph import StateGraph, END
from langgraph.graph.state import CompiledStateGraph

from ..utils.llm_config_manager import get_llm_config_manager
from ..models.risk_models import WorkflowState, AgentProfile, ProcessingStatus
from ..agents.profiler_agent import create_profiler_from_env, create_profiler_node_function
from ..utils.logger import get_langgraph_logger, log_graph_node


class ProfilerWorkflow:
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô Workflow –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ò–ò-–∞–≥–µ–Ω—Ç–æ–≤
    –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: File System Crawler ‚Üí Parsers ‚Üí Context-Aware Chunker ‚Üí LLM Orchestrator ‚Üí Output Generator
    """

    def __init__(self):
        print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ProfilerWorkflow...")

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é LLM
        self.config_manager = get_llm_config_manager()
        self.llm_base_url = self.config_manager.get_base_url()
        self.llm_model = self.config_manager.get_model()

        print(f"ü§ñ LLM Provider: {self.config_manager.get_provider().value}")
        print(f"üåê LLM URL: {self.llm_base_url}")
        print(f"üì¶ LLM Model: {self.llm_model}")

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∞–π–ª–µ—Ä
        self.profiler = create_profiler_from_env()
        self.graph_logger = get_langgraph_logger()

        # –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ
        self.graph = self._build_graph()
        print("‚úÖ ProfilerWorkflow –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def _build_graph(self) -> CompiledStateGraph:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∞ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("üèóÔ∏è –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ LangGraph –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è...")

        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ —Å–æ—Å—Ç–æ—è–Ω–∏–π
        workflow = StateGraph(WorkflowState)

        # –î–æ–±–∞–≤–ª—è–µ–º —É–∑–ª—ã
        print("üìç –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–∑–ª–æ–≤...")
        self._add_nodes(workflow)

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä—ë–±—Ä–∞
        print("üîó –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä—ë–±–µ—Ä...")
        self._add_edges(workflow)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞ –∏ –≤—ã—Ö–æ–¥–∞
        workflow.set_entry_point("initialization")
        workflow.set_finish_point("finalization")

        # –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º –≥—Ä–∞—Ñ
        print("‚öôÔ∏è –ö–æ–º–ø–∏–ª—è—Ü–∏—è –≥—Ä–∞—Ñ–∞...")
        compiled_graph = workflow.compile()
        print("‚úÖ –ì—Ä–∞—Ñ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")

        return compiled_graph

    def _add_nodes(self, workflow: StateGraph):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–∑–ª–æ–≤ –≤ –≥—Ä–∞—Ñ"""

        # –£–∑–µ–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        workflow.add_node("initialization", self._initialization_node)
        print("  ‚úÖ initialization")

        # –£–∑–µ–ª –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è (–≥–ª–∞–≤–Ω—ã–π —É–∑–µ–ª –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã)
        profiler_node = create_profiler_node_function(self.profiler)
        workflow.add_node("profiling", profiler_node)
        print("  ‚úÖ profiling")

        # –£–∑–µ–ª —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
        workflow.add_node("finalization", self._finalization_node)
        print("  ‚úÖ finalization")

        # –£–∑–µ–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
        workflow.add_node("error_handling", self._error_handling_node)
        print("  ‚úÖ error_handling")

    def _add_edges(self, workflow: StateGraph):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä—ë–±–µ—Ä –º–µ–∂–¥—É —É–∑–ª–∞–º–∏"""

        # –ü—Ä—è–º–æ–π –ø—É—Ç—å
        workflow.add_edge("initialization", "profiling")
        print("  ‚úÖ initialization ‚Üí profiling")

        # –£—Å–ª–æ–≤–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –æ—Ç –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        workflow.add_conditional_edges(
            "profiling",
            self._routing_condition,
            {
                "finalization": "finalization",
                "error": "error_handling"
            }
        )
        print("  ‚úÖ profiling ‚Üí [finalization|error]")

        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        workflow.add_edge("finalization", END)
        workflow.add_edge("error_handling", END)
        print("  ‚úÖ finalization ‚Üí END")
        print("  ‚úÖ error_handling ‚Üí END")

    @log_graph_node("initialization")
    async def _initialization_node(self, state: WorkflowState) -> WorkflowState:
        """–£–∑–µ–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è"""

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º assessment_id –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
        assessment_id = state.get("assessment_id")
        if not assessment_id:
            assessment_id = f"profiler_{datetime.now().strftime('%Y%m%d_%H%M%S')}"

        self.graph_logger.log_graph_start(assessment_id, "profiler_workflow")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤
        source_files = state.get("source_files", [])
        if not source_files:
            state.update({
                "current_step": "error",
                "error_message": "–ù–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã —Ñ–∞–π–ª—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞",
                "assessment_id": assessment_id
            })
            return state

        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
        validated_files = []
        for file_path in source_files:
            file_path_obj = Path(file_path)
            if file_path_obj.exists():
                validated_files.append(str(file_path_obj.absolute()))
            else:
                print(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")

        if not validated_files:
            state.update({
                "current_step": "error",
                "error_message": "–í—Å–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã",
                "assessment_id": assessment_id
            })
            return state

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        state.update({
            "assessment_id": assessment_id,
            "source_files": validated_files,
            "current_step": "profiling",
            "start_time": datetime.now()
        })

        self.graph_logger.log_workflow_step(
            assessment_id,
            "initialization",
            f"–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(validated_files)} —Ñ–∞–π–ª–æ–≤"
        )

        return state

    @log_graph_node("finalization")
    async def _finalization_node(self, state: WorkflowState) -> WorkflowState:
        """–£–∑–µ–ª —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""

        assessment_id = state.get("assessment_id", "unknown")
        start_time = state.get("start_time", datetime.now())
        processing_time = (datetime.now() - start_time).total_seconds()

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        agent_profile = state.get("agent_profile", {})
        profiling_result = state.get("profiling_result", {})

        # –°–æ–∑–¥–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é –æ—Ü–µ–Ω–∫—É
        final_assessment = {
            "assessment_id": assessment_id,
            "agent_profile": agent_profile,
            "profiling_details": profiling_result,
            "processing_time_seconds": processing_time,
            "timestamp": datetime.now().isoformat(),
            "status": "completed" if agent_profile else "failed",
            "workflow_type": "profiling_only"
        }

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        state.update({
            "final_assessment": final_assessment,
            "current_step": "completed",
            "processing_time": processing_time
        })

        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        self.graph_logger.log_graph_completion(
            assessment_id,
            processing_time,
            1 if agent_profile else 0
        )

        if agent_profile:
            agent_name = agent_profile.get("name", "Unknown")
            agent_type = agent_profile.get("agent_type", "unknown")
            print(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {agent_name} ({agent_type})")
        else:
            print("‚ùå –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")

        return state

    @log_graph_node("error_handling")
    async def _error_handling_node(self, state: WorkflowState) -> WorkflowState:
        """–£–∑–µ–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""

        assessment_id = state.get("assessment_id", "unknown")
        error_message = state.get("error_message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")

        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –æ—à–∏–±–∫–æ–π
        final_assessment = {
            "assessment_id": assessment_id,
            "status": "failed",
            "error_message": error_message,
            "timestamp": datetime.now().isoformat(),
            "workflow_type": "profiling_only"
        }

        state.update({
            "final_assessment": final_assessment,
            "current_step": "failed"
        })

        print(f"‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏: {error_message}")
        return state

    def _routing_condition(self, state: WorkflowState) -> str:
        """–£—Å–ª–æ–≤–∏–µ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è"""

        current_step = state.get("current_step", "unknown")
        error_message = state.get("error_message")

        if error_message or current_step == "error":
            return "error"
        elif current_step == "finalization":
            return "finalization"
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –Ω—É–∂–Ω–∞ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è
            return "finalization"

    async def run_assessment(
        self,
        source_files: List[str],
        agent_name: Optional[str] = None,
        assessment_id: Optional[str] = None
    ) -> Dict[str, Any]:
        """
        –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è

        Args:
            source_files: –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤/–ø–∞–ø–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            agent_name: –ò–º—è –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            assessment_id: ID –æ—Ü–µ–Ω–∫–∏ (–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω)

        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        """

        print(f"üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è {len(source_files)} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...")

        # –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        initial_state = WorkflowState(
            source_files=source_files,
            preliminary_agent_name=agent_name or "Unknown_Agent",
            assessment_id=assessment_id,
            current_step="initialization"
        )

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ LLM –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
            print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ LLM...")
            is_healthy = await self.profiler.health_check()
            if not is_healthy:
                provider = self.config_manager.get_provider().value
                return {
                    "success": False,
                    "error": f"{provider} —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                    "assessment_id": initial_state.assessment_id
                }

            print(f"‚úÖ LLM —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")

            # –ó–∞–ø—É—Å–∫–∞–µ–º –≥—Ä–∞—Ñ
            print("‚öôÔ∏è –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ LangGraph workflow...")
            final_state = await self.graph.ainvoke(initial_state.dict())

            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            final_assessment = final_state.get("final_assessment", {})
            success = final_assessment.get("status") == "completed"

            return {
                "success": success,
                "assessment_id": final_state.get("assessment_id"),
                "final_assessment": final_assessment,
                "processing_time": final_state.get("processing_time", 0),
                "current_step": final_state.get("current_step", "unknown")
            }

        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ workflow: {e}")
            return {
                "success": False,
                "error": str(e),
                "assessment_id": initial_state.assessment_id,
                "exception_type": type(e).__name__
            }

    async def health_check(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ workflow"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ñ–∞–π–ª–µ—Ä
            profiler_healthy = await self.profiler.health_check()
            if not profiler_healthy:
                return False

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≥—Ä–∞—Ñ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω
            if not self.graph:
                return False

            return True

        except Exception:
            return False

    def get_workflow_info(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ workflow"""
        return {
            "workflow_type": "profiling_only",
            "llm_provider": self.config_manager.get_provider().value,
            "llm_model": self.llm_model,
            "llm_base_url": self.llm_base_url,
            "nodes": ["initialization", "profiling", "finalization", "error_handling"],
            "architecture_components": [
                "File System Crawler",
                "Code Parser",
                "Doc Parser",
                "Context-Aware Chunker",
                "LLM Orchestrator",
                "Output Generator"
            ]
        }


# ===============================
# –§–∞–±—Ä–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# ===============================

def create_workflow_from_env() -> ProfilerWorkflow:
    """–°–æ–∑–¥–∞–Ω–∏–µ workflow –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    return ProfilerWorkflow()


def create_test_workflow() -> ProfilerWorkflow:
    """–°–æ–∑–¥–∞–Ω–∏–µ workflow –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    return ProfilerWorkflow()


# ===============================
# –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
# ===============================

async def test_workflow_health():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ workflow"""
    try:
        workflow = create_workflow_from_env()
        is_healthy = await workflow.health_check()

        if is_healthy:
            print("‚úÖ Workflow —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–µ–Ω")
            return True
        else:
            print("‚ùå Workflow –Ω–µ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–µ–Ω")
            return False

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ workflow: {e}")
        return False


async def test_minimal_profiling():
    """–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è"""

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
    test_dir = Path("test_agent")
    test_dir.mkdir(exist_ok=True)

    # –ü—Ä–æ—Å—Ç–æ–π Python —Ñ–∞–π–ª
    test_file = test_dir / "agent.py"
    test_file.write_text('''
# –¢–µ—Å—Ç–æ–≤—ã–π –ò–ò-–∞–≥–µ–Ω—Ç
class TestAgent:
    def __init__(self):
        self.system_prompt = "–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç"
        self.guardrails = ["–ù–µ –æ—Ç–≤–µ—á–∞–π –Ω–∞ –≤—Ä–µ–¥–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã"]
    
    def process(self, query):
        return f"–û—Ç–≤–µ—Ç –Ω–∞: {query}"
''')

    try:
        workflow = create_workflow_from_env()
        result = await workflow.run_assessment(
            source_files=[str(test_dir)],
            agent_name="TestAgent"
        )

        return result

    finally:
        # –û—á–∏—Å—Ç–∫–∞
        import shutil
        try:
            shutil.rmtree(test_dir)
        except:
            pass


# ===============================
# –≠–∫—Å–ø–æ—Ä—Ç
# ===============================

__all__ = [
    "ProfilerWorkflow",
    "create_workflow_from_env",
    "create_test_workflow",
    "test_workflow_health",
    "test_minimal_profiling"
]